
Mobile_Controlled_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00004b72  00004c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800172  00800172  00004d18  2**0
                  ALLOC
  3 .debug_aranges 000006a8  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c81  00000000  00000000  000053c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004211  00000000  00000000  00006041  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e27  00000000  00000000  0000a252  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004070  00000000  00000000  0000c079  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000970  00000000  00000000  000100ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fb5  00000000  00000000  00010a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00011a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000508  00000000  00000000  000121df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <__vector_1>
       8:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__vector_2>
       c:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_10>
      2c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_11>
      30:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <main>
      8a:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e2       	ldi	r26, 0x2E	; 46
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e2       	ldi	r24, 0x2E	; 46
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MCAL_UART_init>:
static u8 *TX_str ;
static u8 flag_send =1;

UART_config *Global_UART_cfg = NULL ;
void MCAL_UART_init(UART_TypeDef_t* UARTx , UART_config* UART_cfg)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <MCAL_UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <MCAL_UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	6b 83       	std	Y+3, r22	; 0x03

	Global_UART_cfg =UART_cfg ;
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	90 93 73 01 	sts	0x0173, r25
     b62:	80 93 72 01 	sts	0x0172, r24
	//specify the speed mode normal or double
	UARTx->_UCSRA = UART_cfg->Speed_Mode  ;
     b66:	eb 81       	ldd	r30, Y+3	; 0x03
     b68:	fc 81       	ldd	r31, Y+4	; 0x04
     b6a:	81 85       	ldd	r24, Z+9	; 0x09
     b6c:	e9 81       	ldd	r30, Y+1	; 0x01
     b6e:	fa 81       	ldd	r31, Y+2	; 0x02
     b70:	82 83       	std	Z+2, r24	; 0x02
	//Baud Rate
	 if(UART_cfg->Speed_Mode == UART_Speed_Mode_Normal)
     b72:	eb 81       	ldd	r30, Y+3	; 0x03
     b74:	fc 81       	ldd	r31, Y+4	; 0x04
     b76:	81 85       	ldd	r24, Z+9	; 0x09
     b78:	88 23       	and	r24, r24
     b7a:	a9 f4       	brne	.+42     	; 0xba6 <MCAL_UART_init+0x60>
	 {
		 UARTx->_UBRRL = BAUD(F_CPU ,UART_cfg->BaudRate ,16);
     b7c:	eb 81       	ldd	r30, Y+3	; 0x03
     b7e:	fc 81       	ldd	r31, Y+4	; 0x04
     b80:	21 81       	ldd	r18, Z+1	; 0x01
     b82:	32 81       	ldd	r19, Z+2	; 0x02
     b84:	43 81       	ldd	r20, Z+3	; 0x03
     b86:	54 81       	ldd	r21, Z+4	; 0x04
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	91 ea       	ldi	r25, 0xA1	; 161
     b8c:	a7 e0       	ldi	r26, 0x07	; 7
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	bc 01       	movw	r22, r24
     b92:	cd 01       	movw	r24, r26
     b94:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
     b98:	da 01       	movw	r26, r20
     b9a:	c9 01       	movw	r24, r18
     b9c:	81 50       	subi	r24, 0x01	; 1
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	80 83       	st	Z, r24
     ba4:	14 c0       	rjmp	.+40     	; 0xbce <MCAL_UART_init+0x88>

	 }
	 else
	 {
		 UARTx->_UBRRL = BAUD(F_CPU , UART_cfg->BaudRate ,8);
     ba6:	eb 81       	ldd	r30, Y+3	; 0x03
     ba8:	fc 81       	ldd	r31, Y+4	; 0x04
     baa:	21 81       	ldd	r18, Z+1	; 0x01
     bac:	32 81       	ldd	r19, Z+2	; 0x02
     bae:	43 81       	ldd	r20, Z+3	; 0x03
     bb0:	54 81       	ldd	r21, Z+4	; 0x04
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	92 e4       	ldi	r25, 0x42	; 66
     bb6:	af e0       	ldi	r26, 0x0F	; 15
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
     bc2:	da 01       	movw	r26, r20
     bc4:	c9 01       	movw	r24, r18
     bc6:	81 50       	subi	r24, 0x01	; 1
     bc8:	e9 81       	ldd	r30, Y+1	; 0x01
     bca:	fa 81       	ldd	r31, Y+2	; 0x02
     bcc:	80 83       	st	Z, r24
	 }
	//Frame

	 //parity mode (NO Parity)
	 UARTx->RC_RH._UCSRC |=UART_cfg->parity ;
     bce:	e9 81       	ldd	r30, Y+1	; 0x01
     bd0:	fa 81       	ldd	r31, Y+2	; 0x02
     bd2:	97 89       	ldd	r25, Z+23	; 0x17
     bd4:	eb 81       	ldd	r30, Y+3	; 0x03
     bd6:	fc 81       	ldd	r31, Y+4	; 0x04
     bd8:	86 81       	ldd	r24, Z+6	; 0x06
     bda:	89 2b       	or	r24, r25
     bdc:	e9 81       	ldd	r30, Y+1	; 0x01
     bde:	fa 81       	ldd	r31, Y+2	; 0x02
     be0:	87 8b       	std	Z+23, r24	; 0x17

	 // Character Size (8-bit size)
	 if(UART_cfg->data_size == UART_data_Size_5B)
     be2:	eb 81       	ldd	r30, Y+3	; 0x03
     be4:	fc 81       	ldd	r31, Y+4	; 0x04
     be6:	85 81       	ldd	r24, Z+5	; 0x05
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	b1 f4       	brne	.+44     	; 0xc18 <MCAL_UART_init+0xd2>
	 {
		 UARTx->RC_RH._UCSRC &=~(1<<1);
     bec:	e9 81       	ldd	r30, Y+1	; 0x01
     bee:	fa 81       	ldd	r31, Y+2	; 0x02
     bf0:	87 89       	ldd	r24, Z+23	; 0x17
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	e9 81       	ldd	r30, Y+1	; 0x01
     bf6:	fa 81       	ldd	r31, Y+2	; 0x02
     bf8:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->RC_RH._UCSRC &=~(1<<2);
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	87 89       	ldd	r24, Z+23	; 0x17
     c00:	8b 7f       	andi	r24, 0xFB	; 251
     c02:	e9 81       	ldd	r30, Y+1	; 0x01
     c04:	fa 81       	ldd	r31, Y+2	; 0x02
     c06:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->_UCSRB &=~(1<<2);
     c08:	e9 81       	ldd	r30, Y+1	; 0x01
     c0a:	fa 81       	ldd	r31, Y+2	; 0x02
     c0c:	81 81       	ldd	r24, Z+1	; 0x01
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	e9 81       	ldd	r30, Y+1	; 0x01
     c12:	fa 81       	ldd	r31, Y+2	; 0x02
     c14:	81 83       	std	Z+1, r24	; 0x01
     c16:	6b c0       	rjmp	.+214    	; 0xcee <MCAL_UART_init+0x1a8>
	 }
	 else if(UART_cfg->data_size == UART_data_Size_6B)
     c18:	eb 81       	ldd	r30, Y+3	; 0x03
     c1a:	fc 81       	ldd	r31, Y+4	; 0x04
     c1c:	85 81       	ldd	r24, Z+5	; 0x05
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	b1 f4       	brne	.+44     	; 0xc4e <MCAL_UART_init+0x108>
	 {
		 UARTx->RC_RH._UCSRC |=(1<<1);
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	87 89       	ldd	r24, Z+23	; 0x17
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	e9 81       	ldd	r30, Y+1	; 0x01
     c2c:	fa 81       	ldd	r31, Y+2	; 0x02
     c2e:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->RC_RH._UCSRC &=~(1<<2);
     c30:	e9 81       	ldd	r30, Y+1	; 0x01
     c32:	fa 81       	ldd	r31, Y+2	; 0x02
     c34:	87 89       	ldd	r24, Z+23	; 0x17
     c36:	8b 7f       	andi	r24, 0xFB	; 251
     c38:	e9 81       	ldd	r30, Y+1	; 0x01
     c3a:	fa 81       	ldd	r31, Y+2	; 0x02
     c3c:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->_UCSRB &=~(1<<2);
     c3e:	e9 81       	ldd	r30, Y+1	; 0x01
     c40:	fa 81       	ldd	r31, Y+2	; 0x02
     c42:	81 81       	ldd	r24, Z+1	; 0x01
     c44:	8b 7f       	andi	r24, 0xFB	; 251
     c46:	e9 81       	ldd	r30, Y+1	; 0x01
     c48:	fa 81       	ldd	r31, Y+2	; 0x02
     c4a:	81 83       	std	Z+1, r24	; 0x01
     c4c:	50 c0       	rjmp	.+160    	; 0xcee <MCAL_UART_init+0x1a8>
	 }
	 else if(UART_cfg->data_size == UART_data_Size_7B)
     c4e:	eb 81       	ldd	r30, Y+3	; 0x03
     c50:	fc 81       	ldd	r31, Y+4	; 0x04
     c52:	85 81       	ldd	r24, Z+5	; 0x05
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	b1 f4       	brne	.+44     	; 0xc84 <MCAL_UART_init+0x13e>
	 {
		 	 UARTx->RC_RH._UCSRC &=~(1<<1);
     c58:	e9 81       	ldd	r30, Y+1	; 0x01
     c5a:	fa 81       	ldd	r31, Y+2	; 0x02
     c5c:	87 89       	ldd	r24, Z+23	; 0x17
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	87 8b       	std	Z+23, r24	; 0x17
		 	 UARTx->RC_RH._UCSRC |=(1<<2);
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	87 89       	ldd	r24, Z+23	; 0x17
     c6c:	84 60       	ori	r24, 0x04	; 4
     c6e:	e9 81       	ldd	r30, Y+1	; 0x01
     c70:	fa 81       	ldd	r31, Y+2	; 0x02
     c72:	87 8b       	std	Z+23, r24	; 0x17
		 	 UARTx->_UCSRB &=~(1<<2);
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	8b 7f       	andi	r24, 0xFB	; 251
     c7c:	e9 81       	ldd	r30, Y+1	; 0x01
     c7e:	fa 81       	ldd	r31, Y+2	; 0x02
     c80:	81 83       	std	Z+1, r24	; 0x01
     c82:	35 c0       	rjmp	.+106    	; 0xcee <MCAL_UART_init+0x1a8>
	 }
	 else if(UART_cfg->data_size == UART_data_Size_8B)
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	85 81       	ldd	r24, Z+5	; 0x05
     c8a:	84 30       	cpi	r24, 0x04	; 4
     c8c:	b1 f4       	brne	.+44     	; 0xcba <MCAL_UART_init+0x174>
	 {
		 UARTx->RC_RH._UCSRC |=(1<<1);
     c8e:	e9 81       	ldd	r30, Y+1	; 0x01
     c90:	fa 81       	ldd	r31, Y+2	; 0x02
     c92:	87 89       	ldd	r24, Z+23	; 0x17
     c94:	82 60       	ori	r24, 0x02	; 2
     c96:	e9 81       	ldd	r30, Y+1	; 0x01
     c98:	fa 81       	ldd	r31, Y+2	; 0x02
     c9a:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->RC_RH._UCSRC |=(1<<2);
     c9c:	e9 81       	ldd	r30, Y+1	; 0x01
     c9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ca0:	87 89       	ldd	r24, Z+23	; 0x17
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	e9 81       	ldd	r30, Y+1	; 0x01
     ca6:	fa 81       	ldd	r31, Y+2	; 0x02
     ca8:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->_UCSRB &=~(1<<2);
     caa:	e9 81       	ldd	r30, Y+1	; 0x01
     cac:	fa 81       	ldd	r31, Y+2	; 0x02
     cae:	81 81       	ldd	r24, Z+1	; 0x01
     cb0:	8b 7f       	andi	r24, 0xFB	; 251
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	81 83       	std	Z+1, r24	; 0x01
     cb8:	1a c0       	rjmp	.+52     	; 0xcee <MCAL_UART_init+0x1a8>
	 }
	 else if(UART_cfg->data_size == UART_data_Size_9B)
     cba:	eb 81       	ldd	r30, Y+3	; 0x03
     cbc:	fc 81       	ldd	r31, Y+4	; 0x04
     cbe:	85 81       	ldd	r24, Z+5	; 0x05
     cc0:	85 30       	cpi	r24, 0x05	; 5
     cc2:	a9 f4       	brne	.+42     	; 0xcee <MCAL_UART_init+0x1a8>
	 {
		 UARTx->RC_RH._UCSRC |=(1<<1);
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	87 89       	ldd	r24, Z+23	; 0x17
     cca:	82 60       	ori	r24, 0x02	; 2
     ccc:	e9 81       	ldd	r30, Y+1	; 0x01
     cce:	fa 81       	ldd	r31, Y+2	; 0x02
     cd0:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->RC_RH._UCSRC |=(1<<2);
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	87 89       	ldd	r24, Z+23	; 0x17
     cd8:	84 60       	ori	r24, 0x04	; 4
     cda:	e9 81       	ldd	r30, Y+1	; 0x01
     cdc:	fa 81       	ldd	r31, Y+2	; 0x02
     cde:	87 8b       	std	Z+23, r24	; 0x17
		 UARTx->_UCSRB |=(1<<2);
     ce0:	e9 81       	ldd	r30, Y+1	; 0x01
     ce2:	fa 81       	ldd	r31, Y+2	; 0x02
     ce4:	81 81       	ldd	r24, Z+1	; 0x01
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	81 83       	std	Z+1, r24	; 0x01
	 }

	 UARTx->RC_RH._UCSRC|=UART_cfg->StopBit ;
     cee:	e9 81       	ldd	r30, Y+1	; 0x01
     cf0:	fa 81       	ldd	r31, Y+2	; 0x02
     cf2:	97 89       	ldd	r25, Z+23	; 0x17
     cf4:	eb 81       	ldd	r30, Y+3	; 0x03
     cf6:	fc 81       	ldd	r31, Y+4	; 0x04
     cf8:	87 81       	ldd	r24, Z+7	; 0x07
     cfa:	89 2b       	or	r24, r25
     cfc:	e9 81       	ldd	r30, Y+1	; 0x01
     cfe:	fa 81       	ldd	r31, Y+2	; 0x02
     d00:	87 8b       	std	Z+23, r24	; 0x17

	//interrupt enable
	UARTx->_UCSRB |= UART_cfg->IRQ_Enable ;
     d02:	e9 81       	ldd	r30, Y+1	; 0x01
     d04:	fa 81       	ldd	r31, Y+2	; 0x02
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	eb 81       	ldd	r30, Y+3	; 0x03
     d0a:	fc 81       	ldd	r31, Y+4	; 0x04
     d0c:	80 85       	ldd	r24, Z+8	; 0x08
     d0e:	89 2b       	or	r24, r25
     d10:	e9 81       	ldd	r30, Y+1	; 0x01
     d12:	fa 81       	ldd	r31, Y+2	; 0x02
     d14:	81 83       	std	Z+1, r24	; 0x01
	//Enable
	UARTx->_UCSRB |= UART_cfg->USART_Mode ;
     d16:	e9 81       	ldd	r30, Y+1	; 0x01
     d18:	fa 81       	ldd	r31, Y+2	; 0x02
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	eb 81       	ldd	r30, Y+3	; 0x03
     d1e:	fc 81       	ldd	r31, Y+4	; 0x04
     d20:	80 81       	ld	r24, Z
     d22:	89 2b       	or	r24, r25
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	81 83       	std	Z+1, r24	; 0x01

}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <MCAL_UART_Send>:
void MCAL_UART_Send(u8 data)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	0f 92       	push	r0
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA , UDRE));
     d44:	eb e2       	ldi	r30, 0x2B	; 43
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	82 95       	swap	r24
     d4c:	86 95       	lsr	r24
     d4e:	87 70       	andi	r24, 0x07	; 7
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	81 70       	andi	r24, 0x01	; 1
     d56:	90 70       	andi	r25, 0x00	; 0
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	a1 f3       	breq	.-24     	; 0xd44 <MCAL_UART_Send+0xc>
	UDR = data ;
     d5c:	ec e2       	ldi	r30, 0x2C	; 44
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	80 83       	st	Z, r24
}
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <MCAL_UART_Receive>:
u8 MCAL_UART_Receive(void)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,RXC)));
     d74:	eb e2       	ldi	r30, 0x2B	; 43
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	88 23       	and	r24, r24
     d7c:	dc f7       	brge	.-10     	; 0xd74 <MCAL_UART_Receive+0x8>
	return UDR ;
     d7e:	ec e2       	ldi	r30, 0x2C	; 44
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
}
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <MCAL_UART_SndNumberU32>:

void  MCAL_UART_SndNumberU32(u32 NUM)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <MCAL_UART_SndNumberU32+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <MCAL_UART_SndNumberU32+0x8>
     d92:	00 d0       	rcall	.+0      	; 0xd94 <MCAL_UART_SndNumberU32+0xa>
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	6b 83       	std	Y+3, r22	; 0x03
     d9a:	7c 83       	std	Y+4, r23	; 0x04
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	9e 83       	std	Y+6, r25	; 0x06
	u8 *p =&NUM ;
     da0:	ce 01       	movw	r24, r28
     da2:	03 96       	adiw	r24, 0x03	; 3
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01

	MCAL_UART_Send(p[0]);
     da8:	e9 81       	ldd	r30, Y+1	; 0x01
     daa:	fa 81       	ldd	r31, Y+2	; 0x02
     dac:	80 81       	ld	r24, Z
     dae:	0e 94 9c 06 	call	0xd38	; 0xd38 <MCAL_UART_Send>
    MCAL_UART_Send(p[1]);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	fc 01       	movw	r30, r24
     db8:	31 96       	adiw	r30, 0x01	; 1
     dba:	80 81       	ld	r24, Z
     dbc:	0e 94 9c 06 	call	0xd38	; 0xd38 <MCAL_UART_Send>
	MCAL_UART_Send(p[2]);
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	fc 01       	movw	r30, r24
     dc6:	32 96       	adiw	r30, 0x02	; 2
     dc8:	80 81       	ld	r24, Z
     dca:	0e 94 9c 06 	call	0xd38	; 0xd38 <MCAL_UART_Send>
	MCAL_UART_Send(p[3]);
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	fc 01       	movw	r30, r24
     dd4:	33 96       	adiw	r30, 0x03	; 3
     dd6:	80 81       	ld	r24, Z
     dd8:	0e 94 9c 06 	call	0xd38	; 0xd38 <MCAL_UART_Send>
}
     ddc:	26 96       	adiw	r28, 0x06	; 6
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <MCAL_UART_ReceiveNumberU32>:
u32 MCAL_UART_ReceiveNumberU32(void)
{
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <MCAL_UART_ReceiveNumberU32+0xa>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <MCAL_UART_ReceiveNumberU32+0xc>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <MCAL_UART_ReceiveNumberU32+0xe>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	u32 num;
	u8 *p = &num;
     e00:	ce 01       	movw	r24, r28
     e02:	03 96       	adiw	r24, 0x03	; 3
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01

	p[0]=MCAL_UART_Receive();
     e08:	0e 94 b6 06 	call	0xd6c	; 0xd6c <MCAL_UART_Receive>
     e0c:	e9 81       	ldd	r30, Y+1	; 0x01
     e0e:	fa 81       	ldd	r31, Y+2	; 0x02
     e10:	80 83       	st	Z, r24
	p[1]=MCAL_UART_Receive();
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	8c 01       	movw	r16, r24
     e18:	0f 5f       	subi	r16, 0xFF	; 255
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <MCAL_UART_Receive>
     e20:	f8 01       	movw	r30, r16
     e22:	80 83       	st	Z, r24
    p[2]=MCAL_UART_Receive();
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	8c 01       	movw	r16, r24
     e2a:	0e 5f       	subi	r16, 0xFE	; 254
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <MCAL_UART_Receive>
     e32:	f8 01       	movw	r30, r16
     e34:	80 83       	st	Z, r24
	p[3]=MCAL_UART_Receive();
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	8c 01       	movw	r16, r24
     e3c:	0d 5f       	subi	r16, 0xFD	; 253
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	0e 94 b6 06 	call	0xd6c	; 0xd6c <MCAL_UART_Receive>
     e44:	f8 01       	movw	r30, r16
     e46:	80 83       	st	Z, r24

	return num ;
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	ad 81       	ldd	r26, Y+5	; 0x05
     e4e:	be 81       	ldd	r27, Y+6	; 0x06
}
     e50:	bc 01       	movw	r22, r24
     e52:	cd 01       	movw	r24, r26
     e54:	26 96       	adiw	r28, 0x06	; 6
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	08 95       	ret

00000e6a <MCAL_UART_Send_Str>:

void MCAL_UART_Send_Str(u8 *str)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <MCAL_UART_Send_Str+0x6>
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	9b 83       	std	Y+3, r25	; 0x03
     e78:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
     e7a:	19 82       	std	Y+1, r1	; 0x01
     e7c:	0e c0       	rjmp	.+28     	; 0xe9a <MCAL_UART_Send_Str+0x30>
	while(str[i] > 0)
	{
		MCAL_UART_Send(str[i]);
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	9b 81       	ldd	r25, Y+3	; 0x03
     e88:	fc 01       	movw	r30, r24
     e8a:	e2 0f       	add	r30, r18
     e8c:	f3 1f       	adc	r31, r19
     e8e:	80 81       	ld	r24, Z
     e90:	0e 94 9c 06 	call	0xd38	; 0xd38 <MCAL_UART_Send>
		i++;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	89 83       	std	Y+1, r24	; 0x01
}

void MCAL_UART_Send_Str(u8 *str)
{
	u8 i =0;
	while(str[i] > 0)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	fc 01       	movw	r30, r24
     ea6:	e2 0f       	add	r30, r18
     ea8:	f3 1f       	adc	r31, r19
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	39 f7       	brne	.-50     	; 0xe7e <MCAL_UART_Send_Str+0x14>
	{
		MCAL_UART_Send(str[i]);
		i++;
	}
	MCAL_UART_Send('\r');
     eb0:	8d e0       	ldi	r24, 0x0D	; 13
     eb2:	0e 94 9c 06 	call	0xd38	; 0xd38 <MCAL_UART_Send>
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <MCAL_UART_Receive_Str>:
void MCAL_UART_Receive_Str(u8 *str)
{
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <MCAL_UART_Receive_Str+0xa>
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	9b 83       	std	Y+3, r25	; 0x03
     ed4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0 ;
     ed6:	19 82       	std	Y+1, r1	; 0x01
	str[i] = MCAL_UART_Receive();
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	8c 01       	movw	r16, r24
     ee4:	02 0f       	add	r16, r18
     ee6:	13 1f       	adc	r17, r19
     ee8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <MCAL_UART_Receive>
     eec:	f8 01       	movw	r30, r16
     eee:	80 83       	st	Z, r24
     ef0:	0f c0       	rjmp	.+30     	; 0xf10 <MCAL_UART_Receive_Str+0x4e>
	while(str[i]  != '\r')
	{
		 i++ ;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	89 83       	std	Y+1, r24	; 0x01
		 str[i]= MCAL_UART_Receive();
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	8c 01       	movw	r16, r24
     f04:	02 0f       	add	r16, r18
     f06:	13 1f       	adc	r17, r19
     f08:	0e 94 b6 06 	call	0xd6c	; 0xd6c <MCAL_UART_Receive>
     f0c:	f8 01       	movw	r30, r16
     f0e:	80 83       	st	Z, r24
}
void MCAL_UART_Receive_Str(u8 *str)
{
	u8 i =0 ;
	str[i] = MCAL_UART_Receive();
	while(str[i]  != '\r')
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	fc 01       	movw	r30, r24
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	80 81       	ld	r24, Z
     f22:	8d 30       	cpi	r24, 0x0D	; 13
     f24:	31 f7       	brne	.-52     	; 0xef2 <MCAL_UART_Receive_Str+0x30>
	{
		 i++ ;
		 str[i]= MCAL_UART_Receive();
	}
	str[i]='\0';
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	fc 01       	movw	r30, r24
     f32:	e2 0f       	add	r30, r18
     f34:	f3 1f       	adc	r31, r19
     f36:	10 82       	st	Z, r1
}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <MCAL_UART_Receive_perodicCheck>:

u8 MCAL_UART_Receive_perodicCheck( u8 *data)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <MCAL_UART_Receive_perodicCheck+0x6>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA , RXC))
     f58:	eb e2       	ldi	r30, 0x2B	; 43
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 23       	and	r24, r24
     f60:	4c f4       	brge	.+18     	; 0xf74 <MCAL_UART_Receive_perodicCheck+0x2c>
	{
		*data = UDR ;
     f62:	ec e2       	ldi	r30, 0x2C	; 44
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	e9 81       	ldd	r30, Y+1	; 0x01
     f6a:	fa 81       	ldd	r31, Y+2	; 0x02
     f6c:	80 83       	st	Z, r24
		return 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <MCAL_UART_Receive_perodicCheck+0x2e>
	}
	return 0;
     f74:	1b 82       	std	Y+3, r1	; 0x03
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <MCAL_UART_SendNoBlock>:

void MCAL_UART_SendNoBlock(u8 data)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	89 83       	std	Y+1, r24	; 0x01
	UDR = data ;
     f90:	ec e2       	ldi	r30, 0x2C	; 44
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	80 83       	st	Z, r24
}
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <MCAL_UART_ReceiveNoBlock>:
u8 MCAL_UART_ReceiveNoBlock(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	return UDR ;
     fa8:	ec e2       	ldi	r30, 0x2C	; 44
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <MCAL_UART_SendString_Asynch>:

void MCAL_UART_SendString_Asynch(u8 * str)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <MCAL_UART_SendString_Asynch+0x6>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
 	if(flag_send ==1)
     fc2:	80 91 36 01 	lds	r24, 0x0136
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	39 f4       	brne	.+14     	; 0xfd8 <MCAL_UART_SendString_Asynch+0x24>
	 {
		 UART_Interrupt_Enable_TXCIE;
		// TX_str =str ;
		 MCAL_UART_SendNoBlock(str[0]);
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	80 81       	ld	r24, Z
     fd0:	0e 94 c2 07 	call	0xf84	; 0xf84 <MCAL_UART_SendNoBlock>

		 flag_send = 0;
     fd4:	10 92 36 01 	sts	0x0136, r1
	 }
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <ISR>:

void ISR(int USART_TXC_vect)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <ISR+0x6>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
	static u8 i= 1;
	if(TX_str[i] != 1)
     ff0:	20 91 74 01 	lds	r18, 0x0174
     ff4:	30 91 75 01 	lds	r19, 0x0175
     ff8:	80 91 37 01 	lds	r24, 0x0137
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	f9 01       	movw	r30, r18
    1002:	e8 0f       	add	r30, r24
    1004:	f9 1f       	adc	r31, r25
    1006:	80 81       	ld	r24, Z
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	a1 f0       	breq	.+40     	; 0x1034 <ISR+0x52>
	{
		MCAL_UART_SendNoBlock(TX_str[i]);
    100c:	20 91 74 01 	lds	r18, 0x0174
    1010:	30 91 75 01 	lds	r19, 0x0175
    1014:	80 91 37 01 	lds	r24, 0x0137
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	f9 01       	movw	r30, r18
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	80 81       	ld	r24, Z
    1024:	0e 94 c2 07 	call	0xf84	; 0xf84 <MCAL_UART_SendNoBlock>
		i++;
    1028:	80 91 37 01 	lds	r24, 0x0137
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	80 93 37 01 	sts	0x0137, r24
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <ISR+0x5e>
	}
	else
	{
		i=1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 37 01 	sts	0x0137, r24
		flag_send= 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 36 01 	sts	0x0136, r24
	}
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <TIM1_voidInit>:
void (* tim1_callback_ptr)(void);

///////////////////////////////////////
// Normal Mode
void TIM1_voidInit(void)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
    1052:	ec e4       	ldi	r30, 0x4C	; 76
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	11 82       	std	Z+1, r1	; 0x01
    1058:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
    105a:	af e4       	ldi	r26, 0x4F	; 79
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
    1068:	af e4       	ldi	r26, 0x4F	; 79
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ef e4       	ldi	r30, 0x4F	; 79
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8d 7f       	andi	r24, 0xFD	; 253
    1074:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
    1076:	ae e4       	ldi	r26, 0x4E	; 78
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ee e4       	ldi	r30, 0x4E	; 78
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	87 7f       	andi	r24, 0xF7	; 247
    1082:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
    1084:	ae e4       	ldi	r26, 0x4E	; 78
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ee e4       	ldi	r30, 0x4E	; 78
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8f 7e       	andi	r24, 0xEF	; 239
    1090:	8c 93       	st	X, r24


	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
    1092:	ae e4       	ldi	r26, 0x4E	; 78
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ee e4       	ldi	r30, 0x4E	; 78
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8e 7f       	andi	r24, 0xFE	; 254
    109e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
    10a0:	ae e4       	ldi	r26, 0x4E	; 78
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ee e4       	ldi	r30, 0x4E	; 78
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	82 60       	ori	r24, 0x02	; 2
    10ac:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
    10ae:	ae e4       	ldi	r26, 0x4E	; 78
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ee e4       	ldi	r30, 0x4E	; 78
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8b 7f       	andi	r24, 0xFB	; 251
    10ba:	8c 93       	st	X, r24

}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <TIM1_voidICUInit>:

///////////////////////////////////////
// ICU Mode

void TIM1_voidICUInit(void)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
    10ca:	ec e4       	ldi	r30, 0x4C	; 76
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	11 82       	std	Z+1, r1	; 0x01
    10d0:	10 82       	st	Z, r1

	/* Select Normal (OVF) Mode */
	CLEAR_BIT(TCCR1A_Register, WGM10);
    10d2:	af e4       	ldi	r26, 0x4F	; 79
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ef e4       	ldi	r30, 0x4F	; 79
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_Register, WGM11);
    10e0:	af e4       	ldi	r26, 0x4F	; 79
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ef e4       	ldi	r30, 0x4F	; 79
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM12);
    10ee:	ae e4       	ldi	r26, 0x4E	; 78
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ee e4       	ldi	r30, 0x4E	; 78
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	87 7f       	andi	r24, 0xF7	; 247
    10fa:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, WGM13);
    10fc:	ae e4       	ldi	r26, 0x4E	; 78
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ee e4       	ldi	r30, 0x4E	; 78
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8f 7e       	andi	r24, 0xEF	; 239
    1108:	8c 93       	st	X, r24

	/* Enable Input Capture Interrupt */
	SET_BIT(TIMSK_Register, TICIE1);
    110a:	a9 e5       	ldi	r26, 0x59	; 89
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e9 e5       	ldi	r30, 0x59	; 89
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 62       	ori	r24, 0x20	; 32
    1116:	8c 93       	st	X, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
    1118:	ae e4       	ldi	r26, 0x4E	; 78
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	ee e4       	ldi	r30, 0x4E	; 78
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
    1126:	ae e4       	ldi	r26, 0x4E	; 78
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ee e4       	ldi	r30, 0x4E	; 78
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	82 60       	ori	r24, 0x02	; 2
    1132:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
    1134:	ae e4       	ldi	r26, 0x4E	; 78
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ee e4       	ldi	r30, 0x4E	; 78
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8b 7f       	andi	r24, 0xFB	; 251
    1140:	8c 93       	st	X, r24

}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <TIM1_SetEdge>:

void TIM1_SetEdge(u8 edge)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <TIM1_SetEdge+0x6>
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3b 83       	std	Y+3, r19	; 0x03
    115e:	2a 83       	std	Y+2, r18	; 0x02
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	9b 81       	ldd	r25, Y+3	; 0x03
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	69 f0       	breq	.+26     	; 0x1182 <TIM1_SetEdge+0x3a>
    1168:	2a 81       	ldd	r18, Y+2	; 0x02
    116a:	3b 81       	ldd	r19, Y+3	; 0x03
    116c:	21 30       	cpi	r18, 0x01	; 1
    116e:	31 05       	cpc	r19, r1
    1170:	79 f4       	brne	.+30     	; 0x1190 <TIM1_SetEdge+0x48>
	{
	case ICU_EDGE_FALLING: CLEAR_BIT(TCCR1B_Register, ICES1); break;
    1172:	ae e4       	ldi	r26, 0x4E	; 78
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ee e4       	ldi	r30, 0x4E	; 78
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8f 7b       	andi	r24, 0xBF	; 191
    117e:	8c 93       	st	X, r24
    1180:	07 c0       	rjmp	.+14     	; 0x1190 <TIM1_SetEdge+0x48>
	case ICU_EDGE_RISING: SET_BIT(TCCR1B_Register, ICES1); break;
    1182:	ae e4       	ldi	r26, 0x4E	; 78
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ee e4       	ldi	r30, 0x4E	; 78
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 64       	ori	r24, 0x40	; 64
    118e:	8c 93       	st	X, r24
	}
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <TIM1_GetICRValue>:

u16 TIM1_GetICRValue(void)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	return ICR1_Register;
    11a4:	e6 e4       	ldi	r30, 0x46	; 70
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <TIM1_setCallback>:

void TIM1_setCallback(void (* ptr)(void))
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <TIM1_setCallback+0x6>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
	tim1_callback_ptr = ptr;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	90 93 8d 01 	sts	0x018D, r25
    11c8:	80 93 8c 01 	sts	0x018C, r24
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <__vector_6>:


void __vector_6(void)
{
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	4f 93       	push	r20
    11e6:	5f 93       	push	r21
    11e8:	6f 93       	push	r22
    11ea:	7f 93       	push	r23
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
	tim1_callback_ptr();
    1200:	e0 91 8c 01 	lds	r30, 0x018C
    1204:	f0 91 8d 01 	lds	r31, 0x018D
    1208:	09 95       	icall
}
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <TIM1_GetCounterValueUs>:

////////////////////////////////////////////////
/// Normal

u16 TIM1_GetCounterValueUs(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_Register;
    1238:	ec e4       	ldi	r30, 0x4C	; 76
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <TIM1_ClearCounterValue>:

void TIM1_ClearCounterValue(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	TCNT1_Register = 0;
    124e:	ec e4       	ldi	r30, 0x4C	; 76
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	11 82       	std	Z+1, r1	; 0x01
    1254:	10 82       	st	Z, r1
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <TIM1_voidFPWMInit>:


///////////////////////////////////////
// PWM Mode
void TIM1_voidFPWMInit(u16 period_us)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <TIM1_voidFPWMInit+0x6>
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_Register = 0;
    126a:	ec e4       	ldi	r30, 0x4C	; 76
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	11 82       	std	Z+1, r1	; 0x01
    1270:	10 82       	st	Z, r1

	/* Select Mode 14 (Fast PWM) */
	CLEAR_BIT(TCCR1A_Register, WGM10);
    1272:	af e4       	ldi	r26, 0x4F	; 79
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ef e4       	ldi	r30, 0x4F	; 79
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register, WGM11);
    1280:	af e4       	ldi	r26, 0x4F	; 79
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e4       	ldi	r30, 0x4F	; 79
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM12);
    128e:	ae e4       	ldi	r26, 0x4E	; 78
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ee e4       	ldi	r30, 0x4E	; 78
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	88 60       	ori	r24, 0x08	; 8
    129a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, WGM13);
    129c:	ae e4       	ldi	r26, 0x4E	; 78
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ee e4       	ldi	r30, 0x4E	; 78
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 61       	ori	r24, 0x10	; 16
    12a8:	8c 93       	st	X, r24

	/* Select OC1A mode */
	TCCR1A_Register &= ~(0b11 << COM1A0);
    12aa:	af e4       	ldi	r26, 0x4F	; 79
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ef e4       	ldi	r30, 0x4F	; 79
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8f 73       	andi	r24, 0x3F	; 63
    12b6:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1A_MODE << COM1A0;
    12b8:	af e4       	ldi	r26, 0x4F	; 79
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ef e4       	ldi	r30, 0x4F	; 79
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 68       	ori	r24, 0x80	; 128
    12c4:	8c 93       	st	X, r24

	/* Select OC1B mode */
	TCCR1A_Register &= ~(0b11 << COM1B0);
    12c6:	af e4       	ldi	r26, 0x4F	; 79
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ef e4       	ldi	r30, 0x4F	; 79
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 7c       	andi	r24, 0xCF	; 207
    12d2:	8c 93       	st	X, r24
	TCCR1A_Register |= TIM1_PWM_OC1B_MODE << COM1B0;
    12d4:	af e4       	ldi	r26, 0x4F	; 79
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ef e4       	ldi	r30, 0x4F	; 79
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	80 63       	ori	r24, 0x30	; 48
    12e0:	8c 93       	st	X, r24

	ICR1_Register = period_us;
    12e2:	e6 e4       	ldi	r30, 0x46	; 70
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	80 83       	st	Z, r24

	/* Select Pre-scaler */
	CLEAR_BIT(TCCR1B_Register, CS10);
    12ee:	ae e4       	ldi	r26, 0x4E	; 78
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ee e4       	ldi	r30, 0x4E	; 78
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8e 7f       	andi	r24, 0xFE	; 254
    12fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, CS11);
    12fc:	ae e4       	ldi	r26, 0x4E	; 78
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	ee e4       	ldi	r30, 0x4E	; 78
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	82 60       	ori	r24, 0x02	; 2
    1308:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_Register, CS12);
    130a:	ae e4       	ldi	r26, 0x4E	; 78
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ee e4       	ldi	r30, 0x4E	; 78
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8b 7f       	andi	r24, 0xFB	; 251
    1316:	8c 93       	st	X, r24
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <TIM1_setDutyCycle>:

void TIM1_setDutyCycle(u8 channel, u16 value_us)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <TIM1_setDutyCycle+0x6>
    1328:	00 d0       	rcall	.+0      	; 0x132a <TIM1_setDutyCycle+0x8>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	7b 83       	std	Y+3, r23	; 0x03
    1334:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3d 83       	std	Y+5, r19	; 0x05
    133e:	2c 83       	std	Y+4, r18	; 0x04
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <TIM1_setDutyCycle+0x32>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	21 30       	cpi	r18, 0x01	; 1
    134e:	31 05       	cpc	r19, r1
    1350:	41 f0       	breq	.+16     	; 0x1362 <TIM1_setDutyCycle+0x40>
    1352:	0d c0       	rjmp	.+26     	; 0x136e <TIM1_setDutyCycle+0x4c>
	{
	case PWM_OCR1A:	OCR1A_Register = value_us; break;
    1354:	ea e4       	ldi	r30, 0x4A	; 74
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
    1360:	06 c0       	rjmp	.+12     	; 0x136e <TIM1_setDutyCycle+0x4c>
	case PWM_OCR1B:	OCR1B_Register = value_us; break;
    1362:	e8 e4       	ldi	r30, 0x48	; 72
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
	}
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <TIM0_Init>:

void (* func_ptr_ovf)(void);
void (* func_ptr_ctc)(void);

void TIM0_Init(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62

	// Enable Overflow Interrupt
	SET_BIT(TIMSK_Register, TOIE0);
#elif TIM0_MODE == TIM_CTC
	// Normal Mode
	CLEAR_BIT(TCCR0_Register, WGM00);
    1386:	a3 e5       	ldi	r26, 0x53	; 83
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e3 e5       	ldi	r30, 0x53	; 83
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8f 7b       	andi	r24, 0xBF	; 191
    1392:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, WGM01);
    1394:	a3 e5       	ldi	r26, 0x53	; 83
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e3 e5       	ldi	r30, 0x53	; 83
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	8c 93       	st	X, r24

	// Enable CTC Interrupt
	SET_BIT(TIMSK_Register, OCIE0);
    13a2:	a9 e5       	ldi	r26, 0x59	; 89
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e9 e5       	ldi	r30, 0x59	; 89
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	8c 93       	st	X, r24
#endif


}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <TIM0_SetValueUS>:

void TIM0_SetValueUS(u32 us)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <TIM0_SetValueUS+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <TIM0_SetValueUS+0x8>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	6a 83       	std	Y+2, r22	; 0x02
    13c6:	7b 83       	std	Y+3, r23	; 0x03
    13c8:	8c 83       	std	Y+4, r24	; 0x04
    13ca:	9d 83       	std	Y+5, r25	; 0x05
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	32 c0       	rjmp	.+100    	; 0x1436 <TIM0_SetValueUS+0x80>
	{
		if(us%x == 0)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	ac 81       	ldd	r26, Y+4	; 0x04
    13e2:	bd 81       	ldd	r27, Y+5	; 0x05
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	a1 05       	cpc	r26, r1
    13f4:	b1 05       	cpc	r27, r1
    13f6:	e1 f4       	brne	.+56     	; 0x1430 <TIM0_SetValueUS+0x7a>
		{
			OCR0_Register = x;
    13f8:	ec e5       	ldi	r30, 0x5C	; 92
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	80 83       	st	Z, r24
			NoCounts = us/x;
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	ac 81       	ldd	r26, Y+4	; 0x04
    1410:	bd 81       	ldd	r27, Y+5	; 0x05
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
    141a:	da 01       	movw	r26, r20
    141c:	c9 01       	movw	r24, r18
    141e:	80 93 94 01 	sts	0x0194, r24
    1422:	90 93 95 01 	sts	0x0195, r25
    1426:	a0 93 96 01 	sts	0x0196, r26
    142a:	b0 93 97 01 	sts	0x0197, r27
    142e:	06 c0       	rjmp	.+12     	; 0x143c <TIM0_SetValueUS+0x86>
	u32 mod = us%256;
	preload = 256 - mod;

	TCNT0_Register = preload;
#elif TIM0_MODE == TIM_CTC
	for(u8 x = 255; x > 0; x--)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	81 50       	subi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 23       	and	r24, r24
    143a:	59 f6       	brne	.-106    	; 0x13d2 <TIM0_SetValueUS+0x1c>
		}
	}
#endif

	// Set Clock Source (Prescaler: 8)
	CLEAR_BIT(TCCR0_Register, CS00);
    143c:	a3 e5       	ldi	r26, 0x53	; 83
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e3 e5       	ldi	r30, 0x53	; 83
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, CS01);
    144a:	a3 e5       	ldi	r26, 0x53	; 83
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e3 e5       	ldi	r30, 0x53	; 83
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	82 60       	ori	r24, 0x02	; 2
    1456:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    1458:	a3 e5       	ldi	r26, 0x53	; 83
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e3 e5       	ldi	r30, 0x53	; 83
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8b 7f       	andi	r24, 0xFB	; 251
    1464:	8c 93       	st	X, r24
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <TIM0_Disable>:

void TIM0_Disable(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
	// Disable Timer (No clk)
	CLEAR_BIT(TCCR0_Register, CS00);
    147e:	a3 e5       	ldi	r26, 0x53	; 83
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e3 e5       	ldi	r30, 0x53	; 83
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8e 7f       	andi	r24, 0xFE	; 254
    148a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS01);
    148c:	a3 e5       	ldi	r26, 0x53	; 83
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e3 e5       	ldi	r30, 0x53	; 83
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8d 7f       	andi	r24, 0xFD	; 253
    1498:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_Register, CS02);
    149a:	a3 e5       	ldi	r26, 0x53	; 83
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e3 e5       	ldi	r30, 0x53	; 83
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8b 7f       	andi	r24, 0xFB	; 251
    14a6:	8c 93       	st	X, r24
}
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <TIM0_SetOVFCallback>:

void TIM0_SetOVFCallback(void (* ptr)(void))
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <TIM0_SetOVFCallback+0x6>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ovf = ptr;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	90 93 93 01 	sts	0x0193, r25
    14c4:	80 93 92 01 	sts	0x0192, r24
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <TIM0_SetCTCCallback>:

void TIM0_SetCTCCallback(void (* ptr)(void))
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <TIM0_SetCTCCallback+0x6>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
	func_ptr_ctc = ptr;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	90 93 99 01 	sts	0x0199, r25
    14e8:	80 93 98 01 	sts	0x0198, r24
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <__vector_11>:

void __vector_11(void)
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    1520:	20 91 76 01 	lds	r18, 0x0176
    1524:	30 91 77 01 	lds	r19, 0x0177
    1528:	40 91 78 01 	lds	r20, 0x0178
    152c:	50 91 79 01 	lds	r21, 0x0179
    1530:	80 91 94 01 	lds	r24, 0x0194
    1534:	90 91 95 01 	lds	r25, 0x0195
    1538:	a0 91 96 01 	lds	r26, 0x0196
    153c:	b0 91 97 01 	lds	r27, 0x0197
    1540:	28 17       	cp	r18, r24
    1542:	39 07       	cpc	r19, r25
    1544:	4a 07       	cpc	r20, r26
    1546:	5b 07       	cpc	r21, r27
    1548:	c1 f4       	brne	.+48     	; 0x157a <__vector_11+0x84>
	{
		func_ptr_ovf();
    154a:	e0 91 92 01 	lds	r30, 0x0192
    154e:	f0 91 93 01 	lds	r31, 0x0193
    1552:	09 95       	icall
		counter = 0;
    1554:	10 92 76 01 	sts	0x0176, r1
    1558:	10 92 77 01 	sts	0x0177, r1
    155c:	10 92 78 01 	sts	0x0178, r1
    1560:	10 92 79 01 	sts	0x0179, r1
		TCNT0_Register = preload;
    1564:	e2 e5       	ldi	r30, 0x52	; 82
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 91 8e 01 	lds	r24, 0x018E
    156c:	90 91 8f 01 	lds	r25, 0x018F
    1570:	a0 91 90 01 	lds	r26, 0x0190
    1574:	b0 91 91 01 	lds	r27, 0x0191
    1578:	80 83       	st	Z, r24
	}
	counter++;
    157a:	80 91 76 01 	lds	r24, 0x0176
    157e:	90 91 77 01 	lds	r25, 0x0177
    1582:	a0 91 78 01 	lds	r26, 0x0178
    1586:	b0 91 79 01 	lds	r27, 0x0179
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	a1 1d       	adc	r26, r1
    158e:	b1 1d       	adc	r27, r1
    1590:	80 93 76 01 	sts	0x0176, r24
    1594:	90 93 77 01 	sts	0x0177, r25
    1598:	a0 93 78 01 	sts	0x0178, r26
    159c:	b0 93 79 01 	sts	0x0179, r27
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_10>:

void __vector_10(void)
{
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
	static u32 counter = 0;
	if(counter == NoCounts)
    15f0:	20 91 7a 01 	lds	r18, 0x017A
    15f4:	30 91 7b 01 	lds	r19, 0x017B
    15f8:	40 91 7c 01 	lds	r20, 0x017C
    15fc:	50 91 7d 01 	lds	r21, 0x017D
    1600:	80 91 94 01 	lds	r24, 0x0194
    1604:	90 91 95 01 	lds	r25, 0x0195
    1608:	a0 91 96 01 	lds	r26, 0x0196
    160c:	b0 91 97 01 	lds	r27, 0x0197
    1610:	28 17       	cp	r18, r24
    1612:	39 07       	cpc	r19, r25
    1614:	4a 07       	cpc	r20, r26
    1616:	5b 07       	cpc	r21, r27
    1618:	69 f4       	brne	.+26     	; 0x1634 <__vector_10+0x6e>
	{
		func_ptr_ctc();
    161a:	e0 91 98 01 	lds	r30, 0x0198
    161e:	f0 91 99 01 	lds	r31, 0x0199
    1622:	09 95       	icall
		counter = 0;
    1624:	10 92 7a 01 	sts	0x017A, r1
    1628:	10 92 7b 01 	sts	0x017B, r1
    162c:	10 92 7c 01 	sts	0x017C, r1
    1630:	10 92 7d 01 	sts	0x017D, r1
	}
	counter++;
    1634:	80 91 7a 01 	lds	r24, 0x017A
    1638:	90 91 7b 01 	lds	r25, 0x017B
    163c:	a0 91 7c 01 	lds	r26, 0x017C
    1640:	b0 91 7d 01 	lds	r27, 0x017D
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	a1 1d       	adc	r26, r1
    1648:	b1 1d       	adc	r27, r1
    164a:	80 93 7a 01 	sts	0x017A, r24
    164e:	90 93 7b 01 	sts	0x017B, r25
    1652:	a0 93 7c 01 	sts	0x017C, r26
    1656:	b0 93 7d 01 	sts	0x017D, r27
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	ff 91       	pop	r31
    1660:	ef 91       	pop	r30
    1662:	bf 91       	pop	r27
    1664:	af 91       	pop	r26
    1666:	9f 91       	pop	r25
    1668:	8f 91       	pop	r24
    166a:	7f 91       	pop	r23
    166c:	6f 91       	pop	r22
    166e:	5f 91       	pop	r21
    1670:	4f 91       	pop	r20
    1672:	3f 91       	pop	r19
    1674:	2f 91       	pop	r18
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	0f 90       	pop	r0
    167c:	1f 90       	pop	r1
    167e:	18 95       	reti

00001680 <SPI_voidINIT>:

void (*vFunptr)(void)=NULL ;



void SPI_voidINIT(){
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	//choose slave or master mode
#if SPI_MODE==SPI_MODE_MASTER

	SET_BIT(SPCR,SPCR_MSTR);
    1688:	ad e2       	ldi	r26, 0x2D	; 45
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ed e2       	ldi	r30, 0x2D	; 45
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 61       	ori	r24, 0x10	; 16
    1694:	8c 93       	st	X, r24
#elif SPI_MODE==SPI_MODE_SLAVE
	CLEAR_BIT(SPCR,SPCR_MSTR);
#endif

	//choose clock(prescaler)
	SPCR=SPCR&(~(0b11));
    1696:	ad e2       	ldi	r26, 0x2D	; 45
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ed e2       	ldi	r30, 0x2D	; 45
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8c 7f       	andi	r24, 0xFC	; 252
    16a2:	8c 93       	st	X, r24
	SPCR=SPCR|((SPI_CLOCK_PRESCALER)&0b11);
    16a4:	ad e2       	ldi	r26, 0x2D	; 45
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ed e2       	ldi	r30, 0x2D	; 45
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8c 93       	st	X, r24

	SPSR=SPSR&(~(1));
    16b0:	ae e2       	ldi	r26, 0x2E	; 46
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e2       	ldi	r30, 0x2E	; 46
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8e 7f       	andi	r24, 0xFE	; 254
    16bc:	8c 93       	st	X, r24
	SPSR=SPSR|(  (SPI_CLOCK_PRESCALER>>2)&(1)  )   ;
    16be:	ae e2       	ldi	r26, 0x2E	; 46
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ee e2       	ldi	r30, 0x2E	; 46
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8c 93       	st	X, r24
	//choose clock phase and polarity
	if(SPI_CKPOL==SPI_MODE_CPOL_H){
		SET_BIT(SPCR,SPCR_CPOL);
	}
	else{
		CLEAR_BIT(SPCR,SPCR_CPOL);
    16ca:	ad e2       	ldi	r26, 0x2D	; 45
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ed e2       	ldi	r30, 0x2D	; 45
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	87 7f       	andi	r24, 0xF7	; 247
    16d6:	8c 93       	st	X, r24

	if(SPI_CKPH==SPI_MODE_CPPH_SAMPLE){
		SET_BIT(SPCR,SPCR_CPHA);
	}
	else{
		CLEAR_BIT(SPCR,SPCR_CPHA);
    16d8:	ad e2       	ldi	r26, 0x2D	; 45
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	ed e2       	ldi	r30, 0x2D	; 45
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8b 7f       	andi	r24, 0xFB	; 251
    16e4:	8c 93       	st	X, r24
	//choose data direction
	if(SPI_DATA_DIR==SPI_DATA_DIR_LSB){
			SET_BIT(SPCR,SPCR_DORD);
		}
	else{
		CLEAR_BIT(SPCR,SPCR_DORD);
    16e6:	ad e2       	ldi	r26, 0x2D	; 45
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ed e2       	ldi	r30, 0x2D	; 45
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8f 7d       	andi	r24, 0xDF	; 223
    16f2:	8c 93       	st	X, r24
	//choose if you want to enable interrupt
	//its own function


	//enable spi
	SET_BIT(SPCR,SPCR_SPE);
    16f4:	ad e2       	ldi	r26, 0x2D	; 45
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	ed e2       	ldi	r30, 0x2D	; 45
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 64       	ori	r24, 0x40	; 64
    1700:	8c 93       	st	X, r24
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <SPI_voidSend_Receive>:

void SPI_voidSend_Receive(u8 value,u8* retVal){
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <SPI_voidSend_Receive+0x6>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	7b 83       	std	Y+3, r23	; 0x03
    1718:	6a 83       	std	Y+2, r22	; 0x02
	if(retVal!= 0){
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	79 f0       	breq	.+30     	; 0x1740 <SPI_voidSend_Receive+0x38>
		//send value over spi
		SPDR=value;
    1722:	ef e2       	ldi	r30, 0x2F	; 47
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	80 83       	st	Z, r24

		//wait for value to be delevired
		while(!GET_BIT(SPSR,SPSR_SPIF));
    172a:	ee e2       	ldi	r30, 0x2E	; 46
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	88 23       	and	r24, r24
    1732:	dc f7       	brge	.-10     	; 0x172a <SPI_voidSend_Receive+0x22>

		//retrieve data from buffer
		*retVal=SPDR;
    1734:	ef e2       	ldi	r30, 0x2F	; 47
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	ea 81       	ldd	r30, Y+2	; 0x02
    173c:	fb 81       	ldd	r31, Y+3	; 0x03
    173e:	80 83       	st	Z, r24
	else{

	}


}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <SPI_u8receive>:

u8  SPI_u8receive(){
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(SPSR,SPSR_SPIF));
    1754:	ee e2       	ldi	r30, 0x2E	; 46
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 23       	and	r24, r24
    175c:	dc f7       	brge	.-10     	; 0x1754 <SPI_u8receive+0x8>
	return SPDR;
    175e:	ef e2       	ldi	r30, 0x2F	; 47
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <SPI_Enable_Interrupt>:

void SPI_Enable_Interrupt(){
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_SPIE);
    1772:	ad e2       	ldi	r26, 0x2D	; 45
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	ed e2       	ldi	r30, 0x2D	; 45
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	8c 93       	st	X, r24
}
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <SPI_Disable_Interrupt>:

void SPI_Disable_Interrupt(){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SPCR,SPCR_SPIE);
    178e:	ad e2       	ldi	r26, 0x2D	; 45
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ed e2       	ldi	r30, 0x2D	; 45
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8f 77       	andi	r24, 0x7F	; 127
    179a:	8c 93       	st	X, r24
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <SPI_SetCallback>:

void SPI_SetCallback(void(*fptr)(void)){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <SPI_SetCallback+0x6>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
	vFunptr=fptr;
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	90 93 7f 01 	sts	0x017F, r25
    17b8:	80 93 7e 01 	sts	0x017E, r24
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <__vector_12>:

void __vector_12(){
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
	if(vFunptr!=NULL){
    17ce:	80 91 7e 01 	lds	r24, 0x017E
    17d2:	90 91 7f 01 	lds	r25, 0x017F
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	29 f0       	breq	.+10     	; 0x17e4 <__vector_12+0x1e>
		vFunptr();
    17da:	e0 91 7e 01 	lds	r30, 0x017E
    17de:	f0 91 7f 01 	lds	r31, 0x017F
    17e2:	09 95       	icall
	}
}
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <I2C_InitMaster>:
#include "I2C_interface.h"

#include <avr/delay.h>

void I2C_InitMaster(u16 SCL_Clock)
{
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <I2C_InitMaster+0xa>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR ,TWEN);
    17fc:	a6 e5       	ldi	r26, 0x56	; 86
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e6 e5       	ldi	r30, 0x56	; 86
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	84 60       	ori	r24, 0x04	; 4
    1808:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR , TWPS0);
    180a:	a1 e2       	ldi	r26, 0x21	; 33
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e1 e2       	ldi	r30, 0x21	; 33
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8e 7f       	andi	r24, 0xFE	; 254
    1816:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR , TWPS1);
    1818:	a1 e2       	ldi	r26, 0x21	; 33
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e1 e2       	ldi	r30, 0x21	; 33
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8d 7f       	andi	r24, 0xFD	; 253
    1824:	8c 93       	st	X, r24
	TWBR = (u8)((8000000/8*SCL_Clock)-2);
    1826:	00 e2       	ldi	r16, 0x20	; 32
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	cc 01       	movw	r24, r24
    1830:	a0 e0       	ldi	r26, 0x00	; 0
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	20 ee       	ldi	r18, 0xE0	; 224
    1836:	3e e5       	ldi	r19, 0x5E	; 94
    1838:	48 ef       	ldi	r20, 0xF8	; 248
    183a:	5f ef       	ldi	r21, 0xFF	; 255
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <__mulsi3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	80 95       	com	r24
    184a:	90 95       	com	r25
    184c:	a0 95       	com	r26
    184e:	b0 95       	com	r27
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	aa 1f       	adc	r26, r26
    1856:	bb 1f       	adc	r27, r27
    1858:	f8 01       	movw	r30, r16
    185a:	80 83       	st	Z, r24
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <I2C_InitSlave>:

void I2C_InitSlave(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR ,TWEN);
    1872:	a6 e5       	ldi	r26, 0x56	; 86
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e6 e5       	ldi	r30, 0x56	; 86
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	84 60       	ori	r24, 0x04	; 4
    187e:	8c 93       	st	X, r24

	TWAR = I2C_SLAVE_ADRESS <<1;
    1880:	e2 e2       	ldi	r30, 0x22	; 34
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	84 e2       	ldi	r24, 0x24	; 36
    1886:	80 83       	st	Z, r24
}
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <I2C_SendStart>:

u8 I2C_SendStart(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR|=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1896:	a6 e5       	ldi	r26, 0x56	; 86
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e6 e5       	ldi	r30, 0x56	; 86
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	84 6a       	ori	r24, 0xA4	; 164
    18a2:	8c 93       	st	X, r24

	while(GET_BIT(TWCR , TWINT)== 0);
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	dc f7       	brge	.-10     	; 0x18a4 <I2C_SendStart+0x16>
	return TWSR & 0xF8;
    18ae:	e1 e2       	ldi	r30, 0x21	; 33
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 7f       	andi	r24, 0xF8	; 248

}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <I2C_SendRepStart>:

u8 I2C_SendRepStart(void)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(TWCR , TWEN);
    18c4:	a6 e5       	ldi	r26, 0x56	; 86
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e6 e5       	ldi	r30, 0x56	; 86
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8b 7f       	andi	r24, 0xFB	; 251
    18d0:	8c 93       	st	X, r24
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR|=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    18d2:	a6 e5       	ldi	r26, 0x56	; 86
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e6 e5       	ldi	r30, 0x56	; 86
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	84 6a       	ori	r24, 0xA4	; 164
    18de:	8c 93       	st	X, r24

	while(GET_BIT(TWCR , TWINT)== 0);
    18e0:	e6 e5       	ldi	r30, 0x56	; 86
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	88 23       	and	r24, r24
    18e8:	dc f7       	brge	.-10     	; 0x18e0 <I2C_SendRepStart+0x24>
	return TWSR&0xf8;
    18ea:	e1 e2       	ldi	r30, 0x21	; 33
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	88 7f       	andi	r24, 0xF8	; 248

}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <I2C_SendAddress>:
u8 I2C_SendAddress(u8 address , u8 opp)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <I2C_SendAddress+0x6>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	6a 83       	std	Y+2, r22	; 0x02
	TWDR =  (address <<TWA0 )| (opp);
    1906:	e3 e2       	ldi	r30, 0x23	; 35
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	98 2f       	mov	r25, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	89 2b       	or	r24, r25
    191a:	80 83       	st	Z, r24

	TWCR |= (1<<TWINT)|(1<<TWEN);
    191c:	a6 e5       	ldi	r26, 0x56	; 86
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e6 e5       	ldi	r30, 0x56	; 86
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	84 68       	ori	r24, 0x84	; 132
    1928:	8c 93       	st	X, r24
	while(GET_BIT(TWCR , TWINT) == 0);
    192a:	e6 e5       	ldi	r30, 0x56	; 86
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	dc f7       	brge	.-10     	; 0x192a <I2C_SendAddress+0x32>
	return TWSR &0xf8;
    1934:	e1 e2       	ldi	r30, 0x21	; 33
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 7f       	andi	r24, 0xF8	; 248

}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <I2C_SendData>:
u8 I2C_SendData(u8 data)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data ;
    1952:	e3 e2       	ldi	r30, 0x23	; 35
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	80 83       	st	Z, r24

  TWCR |=(1<<TWINT)|(1<<TWEN) ;
    195a:	a6 e5       	ldi	r26, 0x56	; 86
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e6 e5       	ldi	r30, 0x56	; 86
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	84 68       	ori	r24, 0x84	; 132
    1966:	8c 93       	st	X, r24

  while(GET_BIT(TWCR , TWINT)== 0);
    1968:	e6 e5       	ldi	r30, 0x56	; 86
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	88 23       	and	r24, r24
    1970:	dc f7       	brge	.-10     	; 0x1968 <I2C_SendData+0x22>

  return TWSR & 0xf8 ;
    1972:	e1 e2       	ldi	r30, 0x21	; 33
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 7f       	andi	r24, 0xF8	; 248

}
    197a:	0f 90       	pop	r0
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <I2C_SendStop>:
u8 I2C_SendStop(void)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	//if(GET_BIT(TWCR , TWINT)== 0) return 0xFF ;
     TWCR |=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    198a:	a6 e5       	ldi	r26, 0x56	; 86
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e6 e5       	ldi	r30, 0x56	; 86
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	84 69       	ori	r24, 0x94	; 148
    1996:	8c 93       	st	X, r24

    CLEAR_BIT(TWCR,TWSTA);
    1998:	a6 e5       	ldi	r26, 0x56	; 86
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e6 e5       	ldi	r30, 0x56	; 86
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8f 7d       	andi	r24, 0xDF	; 223
    19a4:	8c 93       	st	X, r24
	return TWSR & 0xF8;
    19a6:	e1 e2       	ldi	r30, 0x21	; 33
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	88 7f       	andi	r24, 0xF8	; 248
}
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <I2C_ReceiveWihtAck>:
u8 I2C_ReceiveWihtAck(void)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
  TWCR |=(1<< TWINT)|(1<<TWEA)|(1<<TWEN) ;
    19bc:	a6 e5       	ldi	r26, 0x56	; 86
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e6 e5       	ldi	r30, 0x56	; 86
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	84 6c       	ori	r24, 0xC4	; 196
    19c8:	8c 93       	st	X, r24

  while(GET_BIT(TWCR , TWINT)== 0);
    19ca:	e6 e5       	ldi	r30, 0x56	; 86
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	88 23       	and	r24, r24
    19d2:	dc f7       	brge	.-10     	; 0x19ca <I2C_ReceiveWihtAck+0x16>

  return TWDR ;
    19d4:	e3 e2       	ldi	r30, 0x23	; 35
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <I2C_ReceiveWithoutAck>:
u8 I2C_ReceiveWithoutAck(void)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
	  TWCR |=(1<< TWINT)|(1<<TWEN)  ;
    19e8:	a6 e5       	ldi	r26, 0x56	; 86
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e6 e5       	ldi	r30, 0x56	; 86
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	84 68       	ori	r24, 0x84	; 132
    19f4:	8c 93       	st	X, r24

	  while(GET_BIT(TWCR , TWINT)== 0);
    19f6:	e6 e5       	ldi	r30, 0x56	; 86
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	88 23       	and	r24, r24
    19fe:	dc f7       	brge	.-10     	; 0x19f6 <I2C_ReceiveWithoutAck+0x16>

	  return TWDR ;
    1a00:	e3 e2       	ldi	r30, 0x23	; 35
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
}
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <I2C_SendFram>:

u8 I2C_SendFram(u8 address , u8*buf , u8 len)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	28 97       	sbiw	r28, 0x08	; 8
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	8c 83       	std	Y+4, r24	; 0x04
    1a22:	7e 83       	std	Y+6, r23	; 0x06
    1a24:	6d 83       	std	Y+5, r22	; 0x05
    1a26:	4f 83       	std	Y+7, r20	; 0x07
	u8 state ;
	//send start condition
	state = I2C_SendStart();
    1a28:	0e 94 47 0c 	call	0x188e	; 0x188e <I2C_SendStart>
    1a2c:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_STA) return state ;
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <I2C_SendFram+0x2e>
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 87       	std	Y+8, r24	; 0x08
    1a38:	34 c0       	rjmp	.+104    	; 0x1aa2 <I2C_SendFram+0x96>

	state = I2C_SendAddress(address , I2C_WRITE_OPP);
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <I2C_SendAddress>
    1a42:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_ADDRESS_ACK) return state ;
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 31       	cpi	r24, 0x18	; 24
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <I2C_SendFram+0x44>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	88 87       	std	Y+8, r24	; 0x08
    1a4e:	29 c0       	rjmp	.+82     	; 0x1aa2 <I2C_SendFram+0x96>

	for(int i= 0 ; i<len; i++)
    1a50:	1a 82       	std	Y+2, r1	; 0x02
    1a52:	19 82       	std	Y+1, r1	; 0x01
    1a54:	13 c0       	rjmp	.+38     	; 0x1a7c <I2C_SendFram+0x70>
	{
		state = I2C_SendData(buf[i]);
    1a56:	29 81       	ldd	r18, Y+1	; 0x01
    1a58:	3a 81       	ldd	r19, Y+2	; 0x02
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5e:	fc 01       	movw	r30, r24
    1a60:	e2 0f       	add	r30, r18
    1a62:	f3 1f       	adc	r31, r19
    1a64:	80 81       	ld	r24, Z
    1a66:	0e 94 a3 0c 	call	0x1946	; 0x1946 <I2C_SendData>
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
		if(state != I2C_STAT_DATA_ACK) break ;
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	88 32       	cpi	r24, 0x28	; 40
    1a70:	69 f4       	brne	.+26     	; 0x1a8c <I2C_SendFram+0x80>

	state = I2C_SendAddress(address , I2C_WRITE_OPP);

	if(state != I2C_STAT_ADDRESS_ACK) return state ;

	for(int i= 0 ; i<len; i++)
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	82 17       	cp	r24, r18
    1a88:	93 07       	cpc	r25, r19
    1a8a:	2c f3       	brlt	.-54     	; 0x1a56 <I2C_SendFram+0x4a>
	{
		state = I2C_SendData(buf[i]);
		if(state != I2C_STAT_DATA_ACK) break ;

	}
	 I2C_SendStop();
    1a8c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>
	 CLEAR_BIT(TWCR , TWSTA);
    1a90:	a6 e5       	ldi	r26, 0x56	; 86
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e6 e5       	ldi	r30, 0x56	; 86
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8f 7d       	andi	r24, 0xDF	; 223
    1a9c:	8c 93       	st	X, r24
	return state ;
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	88 87       	std	Y+8, r24	; 0x08
    1aa2:	88 85       	ldd	r24, Y+8	; 0x08
}
    1aa4:	28 96       	adiw	r28, 0x08	; 8
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <GIE_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"


void GIE_Enable(void)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_Register, I_Bit);
    1abe:	af e5       	ldi	r26, 0x5F	; 95
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ef e5       	ldi	r30, 0x5F	; 95
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	8c 93       	st	X, r24
}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <GIE_Disable>:

void GIE_Disable(void)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_Register, I_Bit);
    1ada:	af e5       	ldi	r26, 0x5F	; 95
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ef e5       	ldi	r30, 0x5F	; 95
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 77       	andi	r24, 0x7F	; 127
    1ae6:	8c 93       	st	X, r24
}
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <EXTI_SetMode>:

}
*/

void EXTI_SetMode(u8 L_u8EXTINum, u8 L_u8Mode)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <EXTI_SetMode+0x6>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <EXTI_SetMode+0x8>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	3c 83       	std	Y+4, r19	; 0x04
    1b06:	2b 83       	std	Y+3, r18	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	91 05       	cpc	r25, r1
    1b10:	d9 f0       	breq	.+54     	; 0x1b48 <EXTI_SetMode+0x5a>
    1b12:	2b 81       	ldd	r18, Y+3	; 0x03
    1b14:	3c 81       	ldd	r19, Y+4	; 0x04
    1b16:	23 30       	cpi	r18, 0x03	; 3
    1b18:	31 05       	cpc	r19, r1
    1b1a:	69 f1       	breq	.+90     	; 0x1b76 <EXTI_SetMode+0x88>
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <EXTI_SetMode+0x3a>
    1b26:	44 c0       	rjmp	.+136    	; 0x1bb0 <EXTI_SetMode+0xc2>
	{
	case EXTI0:
		MCUCR_Register &= ~(0b11 << ISC00);
    1b28:	a5 e5       	ldi	r26, 0x55	; 85
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e5       	ldi	r30, 0x55	; 85
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8c 7f       	andi	r24, 0xFC	; 252
    1b34:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC00;
    1b36:	a5 e5       	ldi	r26, 0x55	; 85
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e5 e5       	ldi	r30, 0x55	; 85
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	90 81       	ld	r25, Z
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	89 2b       	or	r24, r25
    1b44:	8c 93       	st	X, r24
    1b46:	34 c0       	rjmp	.+104    	; 0x1bb0 <EXTI_SetMode+0xc2>
		break;
	case EXTI1:
		MCUCR_Register &= ~(0b11 << ISC10);
    1b48:	a5 e5       	ldi	r26, 0x55	; 85
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e5 e5       	ldi	r30, 0x55	; 85
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	83 7f       	andi	r24, 0xF3	; 243
    1b54:	8c 93       	st	X, r24
		MCUCR_Register |= L_u8Mode << ISC10;
    1b56:	a5 e5       	ldi	r26, 0x55	; 85
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e5 e5       	ldi	r30, 0x55	; 85
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	28 2f       	mov	r18, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	82 2b       	or	r24, r18
    1b72:	8c 93       	st	X, r24
    1b74:	1d c0       	rjmp	.+58     	; 0x1bb0 <EXTI_SetMode+0xc2>
		break;
	case EXTI2:
		CLEAR_BIT(MCUCSR_Register, ISC2);
    1b76:	a4 e5       	ldi	r26, 0x54	; 84
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e4 e5       	ldi	r30, 0x54	; 84
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7b       	andi	r24, 0xBF	; 191
    1b82:	8c 93       	st	X, r24
		MCUCSR_Register |= (1 & L_u8Mode) << ISC2;
    1b84:	a4 e5       	ldi	r26, 0x54	; 84
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e4 e5       	ldi	r30, 0x54	; 84
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	28 2f       	mov	r18, r24
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	90 70       	andi	r25, 0x00	; 0
    1b9a:	00 24       	eor	r0, r0
    1b9c:	96 95       	lsr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	07 94       	ror	r0
    1ba2:	96 95       	lsr	r25
    1ba4:	87 95       	ror	r24
    1ba6:	07 94       	ror	r0
    1ba8:	98 2f       	mov	r25, r24
    1baa:	80 2d       	mov	r24, r0
    1bac:	82 2b       	or	r24, r18
    1bae:	8c 93       	st	X, r24
		break;
	}
}
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <EXTI_Enable>:


void EXTI_Enable(u8 L_u8EXTINum)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <EXTI_Enable+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3b 83       	std	Y+3, r19	; 0x03
    1bd4:	2a 83       	std	Y+2, r18	; 0x02
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	91 05       	cpc	r25, r1
    1bde:	91 f0       	breq	.+36     	; 0x1c04 <EXTI_Enable+0x46>
    1be0:	2a 81       	ldd	r18, Y+2	; 0x02
    1be2:	3b 81       	ldd	r19, Y+3	; 0x03
    1be4:	23 30       	cpi	r18, 0x03	; 3
    1be6:	31 05       	cpc	r19, r1
    1be8:	a9 f0       	breq	.+42     	; 0x1c14 <EXTI_Enable+0x56>
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	b9 f4       	brne	.+46     	; 0x1c22 <EXTI_Enable+0x64>
	{
	case EXTI0:	SET_BIT(GICR_Register, INT0); break;
    1bf4:	ab e5       	ldi	r26, 0x5B	; 91
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	eb e5       	ldi	r30, 0x5B	; 91
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	80 64       	ori	r24, 0x40	; 64
    1c00:	8c 93       	st	X, r24
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <EXTI_Enable+0x64>
	case EXTI1:	SET_BIT(GICR_Register, INT1); break;
    1c04:	ab e5       	ldi	r26, 0x5B	; 91
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	eb e5       	ldi	r30, 0x5B	; 91
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 68       	ori	r24, 0x80	; 128
    1c10:	8c 93       	st	X, r24
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <EXTI_Enable+0x64>
	case EXTI2:	SET_BIT(GICR_Register, INT2); break;
    1c14:	ab e5       	ldi	r26, 0x5B	; 91
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	eb e5       	ldi	r30, 0x5B	; 91
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 62       	ori	r24, 0x20	; 32
    1c20:	8c 93       	st	X, r24
	}
}
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <EXTI_Disable>:


void EXTI_Disable(u8 L_u8EXTINum)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <EXTI_Disable+0x6>
    1c34:	0f 92       	push	r0
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTINum)
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	3b 83       	std	Y+3, r19	; 0x03
    1c44:	2a 83       	std	Y+2, r18	; 0x02
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	91 f0       	breq	.+36     	; 0x1c74 <EXTI_Disable+0x46>
    1c50:	2a 81       	ldd	r18, Y+2	; 0x02
    1c52:	3b 81       	ldd	r19, Y+3	; 0x03
    1c54:	23 30       	cpi	r18, 0x03	; 3
    1c56:	31 05       	cpc	r19, r1
    1c58:	a9 f0       	breq	.+42     	; 0x1c84 <EXTI_Disable+0x56>
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	b9 f4       	brne	.+46     	; 0x1c92 <EXTI_Disable+0x64>
	{
	case EXTI0:	CLEAR_BIT(GICR_Register, INT0); break;
    1c64:	ab e5       	ldi	r26, 0x5B	; 91
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	eb e5       	ldi	r30, 0x5B	; 91
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8f 7b       	andi	r24, 0xBF	; 191
    1c70:	8c 93       	st	X, r24
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <EXTI_Disable+0x64>
	case EXTI1:	CLEAR_BIT(GICR_Register, INT1); break;
    1c74:	ab e5       	ldi	r26, 0x5B	; 91
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	eb e5       	ldi	r30, 0x5B	; 91
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f 77       	andi	r24, 0x7F	; 127
    1c80:	8c 93       	st	X, r24
    1c82:	07 c0       	rjmp	.+14     	; 0x1c92 <EXTI_Disable+0x64>
	case EXTI2:	CLEAR_BIT(GICR_Register, INT2); break;
    1c84:	ab e5       	ldi	r26, 0x5B	; 91
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	eb e5       	ldi	r30, 0x5B	; 91
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8f 7d       	andi	r24, 0xDF	; 223
    1c90:	8c 93       	st	X, r24
	}
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <EXTI_SetCallback>:


void EXTI_SetCallback(u8 L_u8EXTINum, void (* ptr)())
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <EXTI_SetCallback+0x6>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <EXTI_SetCallback+0x8>
    1ca6:	0f 92       	push	r0
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	7b 83       	std	Y+3, r23	; 0x03
    1cb0:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8EXTINum)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3d 83       	std	Y+5, r19	; 0x05
    1cba:	2c 83       	std	Y+4, r18	; 0x04
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	89 f0       	breq	.+34     	; 0x1ce8 <EXTI_SetCallback+0x4a>
    1cc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cca:	23 30       	cpi	r18, 0x03	; 3
    1ccc:	31 05       	cpc	r19, r1
    1cce:	99 f0       	breq	.+38     	; 0x1cf6 <EXTI_SetCallback+0x58>
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <EXTI_SetCallback+0x64>
	{
	case EXTI0: callback_ptr1 = ptr; break;
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	90 93 9b 01 	sts	0x019B, r25
    1ce2:	80 93 9a 01 	sts	0x019A, r24
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <EXTI_SetCallback+0x64>
	case EXTI1: callback_ptr2 = ptr; break;
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	90 93 9d 01 	sts	0x019D, r25
    1cf0:	80 93 9c 01 	sts	0x019C, r24
    1cf4:	06 c0       	rjmp	.+12     	; 0x1d02 <EXTI_SetCallback+0x64>
	case EXTI2: callback_ptr3 = ptr; break;
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	90 93 9f 01 	sts	0x019F, r25
    1cfe:	80 93 9e 01 	sts	0x019E, r24
	}
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <__vector_1>:

void __vector_1(void)
{
    1d12:	1f 92       	push	r1
    1d14:	0f 92       	push	r0
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	0f 92       	push	r0
    1d1a:	11 24       	eor	r1, r1
    1d1c:	2f 93       	push	r18
    1d1e:	3f 93       	push	r19
    1d20:	4f 93       	push	r20
    1d22:	5f 93       	push	r21
    1d24:	6f 93       	push	r22
    1d26:	7f 93       	push	r23
    1d28:	8f 93       	push	r24
    1d2a:	9f 93       	push	r25
    1d2c:	af 93       	push	r26
    1d2e:	bf 93       	push	r27
    1d30:	ef 93       	push	r30
    1d32:	ff 93       	push	r31
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	callback_ptr1();
    1d3c:	e0 91 9a 01 	lds	r30, 0x019A
    1d40:	f0 91 9b 01 	lds	r31, 0x019B
    1d44:	09 95       	icall
}
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	ff 91       	pop	r31
    1d4c:	ef 91       	pop	r30
    1d4e:	bf 91       	pop	r27
    1d50:	af 91       	pop	r26
    1d52:	9f 91       	pop	r25
    1d54:	8f 91       	pop	r24
    1d56:	7f 91       	pop	r23
    1d58:	6f 91       	pop	r22
    1d5a:	5f 91       	pop	r21
    1d5c:	4f 91       	pop	r20
    1d5e:	3f 91       	pop	r19
    1d60:	2f 91       	pop	r18
    1d62:	0f 90       	pop	r0
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	0f 90       	pop	r0
    1d68:	1f 90       	pop	r1
    1d6a:	18 95       	reti

00001d6c <__vector_2>:

void __vector_2(void)
{
    1d6c:	1f 92       	push	r1
    1d6e:	0f 92       	push	r0
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	0f 92       	push	r0
    1d74:	11 24       	eor	r1, r1
    1d76:	2f 93       	push	r18
    1d78:	3f 93       	push	r19
    1d7a:	4f 93       	push	r20
    1d7c:	5f 93       	push	r21
    1d7e:	6f 93       	push	r22
    1d80:	7f 93       	push	r23
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
	callback_ptr2();
    1d96:	e0 91 9c 01 	lds	r30, 0x019C
    1d9a:	f0 91 9d 01 	lds	r31, 0x019D
    1d9e:	09 95       	icall
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	ff 91       	pop	r31
    1da6:	ef 91       	pop	r30
    1da8:	bf 91       	pop	r27
    1daa:	af 91       	pop	r26
    1dac:	9f 91       	pop	r25
    1dae:	8f 91       	pop	r24
    1db0:	7f 91       	pop	r23
    1db2:	6f 91       	pop	r22
    1db4:	5f 91       	pop	r21
    1db6:	4f 91       	pop	r20
    1db8:	3f 91       	pop	r19
    1dba:	2f 91       	pop	r18
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <__vector_3>:

void __vector_3(void)
{
    1dc6:	1f 92       	push	r1
    1dc8:	0f 92       	push	r0
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	0f 92       	push	r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	2f 93       	push	r18
    1dd2:	3f 93       	push	r19
    1dd4:	4f 93       	push	r20
    1dd6:	5f 93       	push	r21
    1dd8:	6f 93       	push	r22
    1dda:	7f 93       	push	r23
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
    1de0:	af 93       	push	r26
    1de2:	bf 93       	push	r27
    1de4:	ef 93       	push	r30
    1de6:	ff 93       	push	r31
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	callback_ptr3();
    1df0:	e0 91 9e 01 	lds	r30, 0x019E
    1df4:	f0 91 9f 01 	lds	r31, 0x019F
    1df8:	09 95       	icall
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	bf 91       	pop	r27
    1e04:	af 91       	pop	r26
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	7f 91       	pop	r23
    1e0c:	6f 91       	pop	r22
    1e0e:	5f 91       	pop	r21
    1e10:	4f 91       	pop	r20
    1e12:	3f 91       	pop	r19
    1e14:	2f 91       	pop	r18
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <DIO_u8SetPinValue>:

#include "DIO_private.h"
#include "DIO_interface.h"

u8 DIO_u8SetPinValue(u8 L_u8Port, u8 L_u8Pin, u8 L_u8Value)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	28 97       	sbiw	r28, 0x08	; 8
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	6a 83       	std	Y+2, r22	; 0x02
    1e38:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Value == HIGH)
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <DIO_u8SetPinValue+0x22>
    1e40:	73 c0       	rjmp	.+230    	; 0x1f28 <DIO_u8SetPinValue+0x108>
	{
		switch(L_u8Port)
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	38 87       	std	Y+8, r19	; 0x08
    1e4a:	2f 83       	std	Y+7, r18	; 0x07
    1e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4e:	98 85       	ldd	r25, Y+8	; 0x08
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	91 05       	cpc	r25, r1
    1e54:	51 f1       	breq	.+84     	; 0x1eaa <DIO_u8SetPinValue+0x8a>
    1e56:	2f 81       	ldd	r18, Y+7	; 0x07
    1e58:	38 85       	ldd	r19, Y+8	; 0x08
    1e5a:	23 30       	cpi	r18, 0x03	; 3
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	34 f4       	brge	.+12     	; 0x1e6c <DIO_u8SetPinValue+0x4c>
    1e60:	8f 81       	ldd	r24, Y+7	; 0x07
    1e62:	98 85       	ldd	r25, Y+8	; 0x08
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	61 f0       	breq	.+24     	; 0x1e82 <DIO_u8SetPinValue+0x62>
    1e6a:	5b c0       	rjmp	.+182    	; 0x1f22 <DIO_u8SetPinValue+0x102>
    1e6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e6e:	38 85       	ldd	r19, Y+8	; 0x08
    1e70:	23 30       	cpi	r18, 0x03	; 3
    1e72:	31 05       	cpc	r19, r1
    1e74:	71 f1       	breq	.+92     	; 0x1ed2 <DIO_u8SetPinValue+0xb2>
    1e76:	8f 81       	ldd	r24, Y+7	; 0x07
    1e78:	98 85       	ldd	r25, Y+8	; 0x08
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	e9 f1       	breq	.+122    	; 0x1efa <DIO_u8SetPinValue+0xda>
    1e80:	50 c0       	rjmp	.+160    	; 0x1f22 <DIO_u8SetPinValue+0x102>
		{
		case PORTA: SET_BIT(PORTA_Register, L_u8Pin); break;
    1e82:	ab e3       	ldi	r26, 0x3B	; 59
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	eb e3       	ldi	r30, 0x3B	; 59
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <DIO_u8SetPinValue+0x80>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <DIO_u8SetPinValue+0x7c>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	be c0       	rjmp	.+380    	; 0x2026 <DIO_u8SetPinValue+0x206>
		case PORTB: SET_BIT(PORTB_Register, L_u8Pin); break;
    1eaa:	a8 e3       	ldi	r26, 0x38	; 56
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e8 e3       	ldi	r30, 0x38	; 56
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <DIO_u8SetPinValue+0xa8>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <DIO_u8SetPinValue+0xa4>
    1ecc:	84 2b       	or	r24, r20
    1ece:	8c 93       	st	X, r24
    1ed0:	aa c0       	rjmp	.+340    	; 0x2026 <DIO_u8SetPinValue+0x206>
		case PORTC: SET_BIT(PORTC_Register, L_u8Pin); break;
    1ed2:	a5 e3       	ldi	r26, 0x35	; 53
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e5 e3       	ldi	r30, 0x35	; 53
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	48 2f       	mov	r20, r24
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	02 2e       	mov	r0, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <DIO_u8SetPinValue+0xd0>
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	0a 94       	dec	r0
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <DIO_u8SetPinValue+0xcc>
    1ef4:	84 2b       	or	r24, r20
    1ef6:	8c 93       	st	X, r24
    1ef8:	96 c0       	rjmp	.+300    	; 0x2026 <DIO_u8SetPinValue+0x206>
		case PORTD: SET_BIT(PORTD_Register, L_u8Pin); break;
    1efa:	a2 e3       	ldi	r26, 0x32	; 50
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e2 e3       	ldi	r30, 0x32	; 50
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	48 2f       	mov	r20, r24
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 2e       	mov	r0, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_u8SetPinValue+0xf8>
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	0a 94       	dec	r0
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <DIO_u8SetPinValue+0xf4>
    1f1c:	84 2b       	or	r24, r20
    1f1e:	8c 93       	st	X, r24
    1f20:	82 c0       	rjmp	.+260    	; 0x2026 <DIO_u8SetPinValue+0x206>
		default: return DIO_ERROR; break;
    1f22:	9f ef       	ldi	r25, 0xFF	; 255
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	80 c0       	rjmp	.+256    	; 0x2028 <DIO_u8SetPinValue+0x208>
		}
	}
	else if(L_u8Value == LOW)
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	88 23       	and	r24, r24
    1f2c:	09 f0       	breq	.+2      	; 0x1f30 <DIO_u8SetPinValue+0x110>
    1f2e:	78 c0       	rjmp	.+240    	; 0x2020 <DIO_u8SetPinValue+0x200>
	{
		switch(L_u8Port)
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	3d 83       	std	Y+5, r19	; 0x05
    1f38:	2c 83       	std	Y+4, r18	; 0x04
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	91 05       	cpc	r25, r1
    1f42:	61 f1       	breq	.+88     	; 0x1f9c <DIO_u8SetPinValue+0x17c>
    1f44:	2c 81       	ldd	r18, Y+4	; 0x04
    1f46:	3d 81       	ldd	r19, Y+5	; 0x05
    1f48:	23 30       	cpi	r18, 0x03	; 3
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	34 f4       	brge	.+12     	; 0x1f5a <DIO_u8SetPinValue+0x13a>
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	9d 81       	ldd	r25, Y+5	; 0x05
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	91 05       	cpc	r25, r1
    1f56:	69 f0       	breq	.+26     	; 0x1f72 <DIO_u8SetPinValue+0x152>
    1f58:	60 c0       	rjmp	.+192    	; 0x201a <DIO_u8SetPinValue+0x1fa>
    1f5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5e:	23 30       	cpi	r18, 0x03	; 3
    1f60:	31 05       	cpc	r19, r1
    1f62:	89 f1       	breq	.+98     	; 0x1fc6 <DIO_u8SetPinValue+0x1a6>
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <DIO_u8SetPinValue+0x150>
    1f6e:	40 c0       	rjmp	.+128    	; 0x1ff0 <DIO_u8SetPinValue+0x1d0>
    1f70:	54 c0       	rjmp	.+168    	; 0x201a <DIO_u8SetPinValue+0x1fa>
		{
		case PORTA: CLEAR_BIT(PORTA_Register, L_u8Pin); break;
    1f72:	ab e3       	ldi	r26, 0x3B	; 59
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	eb e3       	ldi	r30, 0x3B	; 59
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <DIO_u8SetPinValue+0x170>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <DIO_u8SetPinValue+0x16c>
    1f94:	80 95       	com	r24
    1f96:	84 23       	and	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	45 c0       	rjmp	.+138    	; 0x2026 <DIO_u8SetPinValue+0x206>
		case PORTB: CLEAR_BIT(PORTB_Register, L_u8Pin); break;
    1f9c:	a8 e3       	ldi	r26, 0x38	; 56
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e8 e3       	ldi	r30, 0x38	; 56
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <DIO_u8SetPinValue+0x19a>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <DIO_u8SetPinValue+0x196>
    1fbe:	80 95       	com	r24
    1fc0:	84 23       	and	r24, r20
    1fc2:	8c 93       	st	X, r24
    1fc4:	30 c0       	rjmp	.+96     	; 0x2026 <DIO_u8SetPinValue+0x206>
		case PORTC: CLEAR_BIT(PORTC_Register, L_u8Pin); break;
    1fc6:	a5 e3       	ldi	r26, 0x35	; 53
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e5 e3       	ldi	r30, 0x35	; 53
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 2e       	mov	r0, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <DIO_u8SetPinValue+0x1c4>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <DIO_u8SetPinValue+0x1c0>
    1fe8:	80 95       	com	r24
    1fea:	84 23       	and	r24, r20
    1fec:	8c 93       	st	X, r24
    1fee:	1b c0       	rjmp	.+54     	; 0x2026 <DIO_u8SetPinValue+0x206>
		case PORTD: CLEAR_BIT(PORTD_Register, L_u8Pin); break;
    1ff0:	a2 e3       	ldi	r26, 0x32	; 50
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e2 e3       	ldi	r30, 0x32	; 50
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	48 2f       	mov	r20, r24
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	02 2e       	mov	r0, r18
    2008:	02 c0       	rjmp	.+4      	; 0x200e <DIO_u8SetPinValue+0x1ee>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	0a 94       	dec	r0
    2010:	e2 f7       	brpl	.-8      	; 0x200a <DIO_u8SetPinValue+0x1ea>
    2012:	80 95       	com	r24
    2014:	84 23       	and	r24, r20
    2016:	8c 93       	st	X, r24
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <DIO_u8SetPinValue+0x206>
		default: return DIO_ERROR; break;
    201a:	9f ef       	ldi	r25, 0xFF	; 255
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <DIO_u8SetPinValue+0x208>
		}
	}
	else
	{
		return DIO_ERROR;
    2020:	2f ef       	ldi	r18, 0xFF	; 255
    2022:	2e 83       	std	Y+6, r18	; 0x06
    2024:	01 c0       	rjmp	.+2      	; 0x2028 <DIO_u8SetPinValue+0x208>
	}
	return DIO_OK;
    2026:	1e 82       	std	Y+6, r1	; 0x06
    2028:	8e 81       	ldd	r24, Y+6	; 0x06

}
    202a:	28 96       	adiw	r28, 0x08	; 8
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 L_u8Port, u8 L_u8Pin)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <DIO_u8GetPinValue+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <DIO_u8GetPinValue+0x8>
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	8a 83       	std	Y+2, r24	; 0x02
    204c:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Result;
	switch(L_u8Port)
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	3d 83       	std	Y+5, r19	; 0x05
    2056:	2c 83       	std	Y+4, r18	; 0x04
    2058:	4c 81       	ldd	r20, Y+4	; 0x04
    205a:	5d 81       	ldd	r21, Y+5	; 0x05
    205c:	42 30       	cpi	r20, 0x02	; 2
    205e:	51 05       	cpc	r21, r1
    2060:	41 f1       	breq	.+80     	; 0x20b2 <DIO_u8GetPinValue+0x76>
    2062:	8c 81       	ldd	r24, Y+4	; 0x04
    2064:	9d 81       	ldd	r25, Y+5	; 0x05
    2066:	83 30       	cpi	r24, 0x03	; 3
    2068:	91 05       	cpc	r25, r1
    206a:	34 f4       	brge	.+12     	; 0x2078 <DIO_u8GetPinValue+0x3c>
    206c:	2c 81       	ldd	r18, Y+4	; 0x04
    206e:	3d 81       	ldd	r19, Y+5	; 0x05
    2070:	21 30       	cpi	r18, 0x01	; 1
    2072:	31 05       	cpc	r19, r1
    2074:	61 f0       	breq	.+24     	; 0x208e <DIO_u8GetPinValue+0x52>
    2076:	53 c0       	rjmp	.+166    	; 0x211e <DIO_u8GetPinValue+0xe2>
    2078:	4c 81       	ldd	r20, Y+4	; 0x04
    207a:	5d 81       	ldd	r21, Y+5	; 0x05
    207c:	43 30       	cpi	r20, 0x03	; 3
    207e:	51 05       	cpc	r21, r1
    2080:	51 f1       	breq	.+84     	; 0x20d6 <DIO_u8GetPinValue+0x9a>
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	9d 81       	ldd	r25, Y+5	; 0x05
    2086:	84 30       	cpi	r24, 0x04	; 4
    2088:	91 05       	cpc	r25, r1
    208a:	b9 f1       	breq	.+110    	; 0x20fa <DIO_u8GetPinValue+0xbe>
    208c:	48 c0       	rjmp	.+144    	; 0x211e <DIO_u8GetPinValue+0xe2>
	{
	case PORTA: L_u8Result= GET_BIT(PINA_Register, L_u8Pin); break;
    208e:	e9 e3       	ldi	r30, 0x39	; 57
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a9 01       	movw	r20, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <DIO_u8GetPinValue+0x6a>
    20a2:	55 95       	asr	r21
    20a4:	47 95       	ror	r20
    20a6:	8a 95       	dec	r24
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <DIO_u8GetPinValue+0x66>
    20aa:	ca 01       	movw	r24, r20
    20ac:	81 70       	andi	r24, 0x01	; 1
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	38 c0       	rjmp	.+112    	; 0x2122 <DIO_u8GetPinValue+0xe6>
	case PORTB: L_u8Result= GET_BIT(PINB_Register, L_u8Pin); break;
    20b2:	e6 e3       	ldi	r30, 0x36	; 54
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a9 01       	movw	r20, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <DIO_u8GetPinValue+0x8e>
    20c6:	55 95       	asr	r21
    20c8:	47 95       	ror	r20
    20ca:	8a 95       	dec	r24
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <DIO_u8GetPinValue+0x8a>
    20ce:	ca 01       	movw	r24, r20
    20d0:	81 70       	andi	r24, 0x01	; 1
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	26 c0       	rjmp	.+76     	; 0x2122 <DIO_u8GetPinValue+0xe6>
	case PORTC: L_u8Result= GET_BIT(PINC_Register, L_u8Pin); break;
    20d6:	e3 e3       	ldi	r30, 0x33	; 51
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	88 2f       	mov	r24, r24
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a9 01       	movw	r20, r18
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <DIO_u8GetPinValue+0xb2>
    20ea:	55 95       	asr	r21
    20ec:	47 95       	ror	r20
    20ee:	8a 95       	dec	r24
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <DIO_u8GetPinValue+0xae>
    20f2:	ca 01       	movw	r24, r20
    20f4:	81 70       	andi	r24, 0x01	; 1
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	14 c0       	rjmp	.+40     	; 0x2122 <DIO_u8GetPinValue+0xe6>
	case PORTD: L_u8Result= GET_BIT(PIND_Register, L_u8Pin); break;
    20fa:	e0 e3       	ldi	r30, 0x30	; 48
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a9 01       	movw	r20, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_u8GetPinValue+0xd6>
    210e:	55 95       	asr	r21
    2110:	47 95       	ror	r20
    2112:	8a 95       	dec	r24
    2114:	e2 f7       	brpl	.-8      	; 0x210e <DIO_u8GetPinValue+0xd2>
    2116:	ca 01       	movw	r24, r20
    2118:	81 70       	andi	r24, 0x01	; 1
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_u8GetPinValue+0xe6>
	default: L_u8Result = DIO_ERROR;
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_u8Result;
    2122:	89 81       	ldd	r24, Y+1	; 0x01
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 L_u8Port, u8 L_u8Pin, u8 L_u8Direction)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	28 97       	sbiw	r28, 0x08	; 8
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	6a 83       	std	Y+2, r22	; 0x02
    214c:	4b 83       	std	Y+3, r20	; 0x03
	if(L_u8Direction == OUTPUT)
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	09 f0       	breq	.+2      	; 0x2156 <DIO_u8SetPinDirection+0x22>
    2154:	73 c0       	rjmp	.+230    	; 0x223c <DIO_u8SetPinDirection+0x108>
		{
			switch(L_u8Port)
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	38 87       	std	Y+8, r19	; 0x08
    215e:	2f 83       	std	Y+7, r18	; 0x07
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	91 05       	cpc	r25, r1
    2168:	51 f1       	breq	.+84     	; 0x21be <DIO_u8SetPinDirection+0x8a>
    216a:	2f 81       	ldd	r18, Y+7	; 0x07
    216c:	38 85       	ldd	r19, Y+8	; 0x08
    216e:	23 30       	cpi	r18, 0x03	; 3
    2170:	31 05       	cpc	r19, r1
    2172:	34 f4       	brge	.+12     	; 0x2180 <DIO_u8SetPinDirection+0x4c>
    2174:	8f 81       	ldd	r24, Y+7	; 0x07
    2176:	98 85       	ldd	r25, Y+8	; 0x08
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	91 05       	cpc	r25, r1
    217c:	61 f0       	breq	.+24     	; 0x2196 <DIO_u8SetPinDirection+0x62>
    217e:	5b c0       	rjmp	.+182    	; 0x2236 <DIO_u8SetPinDirection+0x102>
    2180:	2f 81       	ldd	r18, Y+7	; 0x07
    2182:	38 85       	ldd	r19, Y+8	; 0x08
    2184:	23 30       	cpi	r18, 0x03	; 3
    2186:	31 05       	cpc	r19, r1
    2188:	71 f1       	breq	.+92     	; 0x21e6 <DIO_u8SetPinDirection+0xb2>
    218a:	8f 81       	ldd	r24, Y+7	; 0x07
    218c:	98 85       	ldd	r25, Y+8	; 0x08
    218e:	84 30       	cpi	r24, 0x04	; 4
    2190:	91 05       	cpc	r25, r1
    2192:	e9 f1       	breq	.+122    	; 0x220e <DIO_u8SetPinDirection+0xda>
    2194:	50 c0       	rjmp	.+160    	; 0x2236 <DIO_u8SetPinDirection+0x102>
			{
			case PORTA: SET_BIT(DDRA_Register, L_u8Pin); break;
    2196:	aa e3       	ldi	r26, 0x3A	; 58
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	ea e3       	ldi	r30, 0x3A	; 58
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <DIO_u8SetPinDirection+0x80>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <DIO_u8SetPinDirection+0x7c>
    21b8:	84 2b       	or	r24, r20
    21ba:	8c 93       	st	X, r24
    21bc:	be c0       	rjmp	.+380    	; 0x233a <DIO_u8SetPinDirection+0x206>
			case PORTB: SET_BIT(DDRB_Register, L_u8Pin); break;
    21be:	a7 e3       	ldi	r26, 0x37	; 55
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e7 e3       	ldi	r30, 0x37	; 55
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	48 2f       	mov	r20, r24
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	02 2e       	mov	r0, r18
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <DIO_u8SetPinDirection+0xa8>
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	0a 94       	dec	r0
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <DIO_u8SetPinDirection+0xa4>
    21e0:	84 2b       	or	r24, r20
    21e2:	8c 93       	st	X, r24
    21e4:	aa c0       	rjmp	.+340    	; 0x233a <DIO_u8SetPinDirection+0x206>
			case PORTC: SET_BIT(DDRC_Register, L_u8Pin); break;
    21e6:	a4 e3       	ldi	r26, 0x34	; 52
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e4 e3       	ldi	r30, 0x34	; 52
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	48 2f       	mov	r20, r24
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	02 2e       	mov	r0, r18
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <DIO_u8SetPinDirection+0xd0>
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	0a 94       	dec	r0
    2206:	e2 f7       	brpl	.-8      	; 0x2200 <DIO_u8SetPinDirection+0xcc>
    2208:	84 2b       	or	r24, r20
    220a:	8c 93       	st	X, r24
    220c:	96 c0       	rjmp	.+300    	; 0x233a <DIO_u8SetPinDirection+0x206>
			case PORTD: SET_BIT(DDRD_Register, L_u8Pin); break;
    220e:	a1 e3       	ldi	r26, 0x31	; 49
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e1 e3       	ldi	r30, 0x31	; 49
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	48 2f       	mov	r20, r24
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 2e       	mov	r0, r18
    2226:	02 c0       	rjmp	.+4      	; 0x222c <DIO_u8SetPinDirection+0xf8>
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <DIO_u8SetPinDirection+0xf4>
    2230:	84 2b       	or	r24, r20
    2232:	8c 93       	st	X, r24
    2234:	82 c0       	rjmp	.+260    	; 0x233a <DIO_u8SetPinDirection+0x206>
			default: return DIO_ERROR; break;
    2236:	9f ef       	ldi	r25, 0xFF	; 255
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	80 c0       	rjmp	.+256    	; 0x233c <DIO_u8SetPinDirection+0x208>
			}
		}
		else if(L_u8Direction == INPUT)
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	88 23       	and	r24, r24
    2240:	09 f0       	breq	.+2      	; 0x2244 <DIO_u8SetPinDirection+0x110>
    2242:	78 c0       	rjmp	.+240    	; 0x2334 <DIO_u8SetPinDirection+0x200>
		{
			switch(L_u8Port)
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3d 83       	std	Y+5, r19	; 0x05
    224c:	2c 83       	std	Y+4, r18	; 0x04
    224e:	8c 81       	ldd	r24, Y+4	; 0x04
    2250:	9d 81       	ldd	r25, Y+5	; 0x05
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	91 05       	cpc	r25, r1
    2256:	61 f1       	breq	.+88     	; 0x22b0 <DIO_u8SetPinDirection+0x17c>
    2258:	2c 81       	ldd	r18, Y+4	; 0x04
    225a:	3d 81       	ldd	r19, Y+5	; 0x05
    225c:	23 30       	cpi	r18, 0x03	; 3
    225e:	31 05       	cpc	r19, r1
    2260:	34 f4       	brge	.+12     	; 0x226e <DIO_u8SetPinDirection+0x13a>
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	91 05       	cpc	r25, r1
    226a:	69 f0       	breq	.+26     	; 0x2286 <DIO_u8SetPinDirection+0x152>
    226c:	60 c0       	rjmp	.+192    	; 0x232e <DIO_u8SetPinDirection+0x1fa>
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	3d 81       	ldd	r19, Y+5	; 0x05
    2272:	23 30       	cpi	r18, 0x03	; 3
    2274:	31 05       	cpc	r19, r1
    2276:	89 f1       	breq	.+98     	; 0x22da <DIO_u8SetPinDirection+0x1a6>
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	91 05       	cpc	r25, r1
    2280:	09 f4       	brne	.+2      	; 0x2284 <DIO_u8SetPinDirection+0x150>
    2282:	40 c0       	rjmp	.+128    	; 0x2304 <DIO_u8SetPinDirection+0x1d0>
    2284:	54 c0       	rjmp	.+168    	; 0x232e <DIO_u8SetPinDirection+0x1fa>
			{
			case PORTA: CLEAR_BIT(DDRA_Register, L_u8Pin); break;
    2286:	aa e3       	ldi	r26, 0x3A	; 58
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	ea e3       	ldi	r30, 0x3A	; 58
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	48 2f       	mov	r20, r24
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 2e       	mov	r0, r18
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <DIO_u8SetPinDirection+0x170>
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	0a 94       	dec	r0
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <DIO_u8SetPinDirection+0x16c>
    22a8:	80 95       	com	r24
    22aa:	84 23       	and	r24, r20
    22ac:	8c 93       	st	X, r24
    22ae:	45 c0       	rjmp	.+138    	; 0x233a <DIO_u8SetPinDirection+0x206>
			case PORTB: CLEAR_BIT(DDRB_Register, L_u8Pin); break;
    22b0:	a7 e3       	ldi	r26, 0x37	; 55
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e7 e3       	ldi	r30, 0x37	; 55
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	48 2f       	mov	r20, r24
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 2e       	mov	r0, r18
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <DIO_u8SetPinDirection+0x19a>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	0a 94       	dec	r0
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <DIO_u8SetPinDirection+0x196>
    22d2:	80 95       	com	r24
    22d4:	84 23       	and	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	30 c0       	rjmp	.+96     	; 0x233a <DIO_u8SetPinDirection+0x206>
			case PORTC: CLEAR_BIT(DDRC_Register, L_u8Pin); break;
    22da:	a4 e3       	ldi	r26, 0x34	; 52
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e4 e3       	ldi	r30, 0x34	; 52
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 2e       	mov	r0, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <DIO_u8SetPinDirection+0x1c4>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0a 94       	dec	r0
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <DIO_u8SetPinDirection+0x1c0>
    22fc:	80 95       	com	r24
    22fe:	84 23       	and	r24, r20
    2300:	8c 93       	st	X, r24
    2302:	1b c0       	rjmp	.+54     	; 0x233a <DIO_u8SetPinDirection+0x206>
			case PORTD: CLEAR_BIT(DDRD_Register, L_u8Pin); break;
    2304:	a1 e3       	ldi	r26, 0x31	; 49
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e1 e3       	ldi	r30, 0x31	; 49
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	48 2f       	mov	r20, r24
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_u8SetPinDirection+0x1ee>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_u8SetPinDirection+0x1ea>
    2326:	80 95       	com	r24
    2328:	84 23       	and	r24, r20
    232a:	8c 93       	st	X, r24
    232c:	06 c0       	rjmp	.+12     	; 0x233a <DIO_u8SetPinDirection+0x206>
			default: return DIO_ERROR; break;
    232e:	9f ef       	ldi	r25, 0xFF	; 255
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	04 c0       	rjmp	.+8      	; 0x233c <DIO_u8SetPinDirection+0x208>
			}
		}
		else
		{
			return DIO_ERROR;
    2334:	2f ef       	ldi	r18, 0xFF	; 255
    2336:	2e 83       	std	Y+6, r18	; 0x06
    2338:	01 c0       	rjmp	.+2      	; 0x233c <DIO_u8SetPinDirection+0x208>
		}
		return DIO_OK;
    233a:	1e 82       	std	Y+6, r1	; 0x06
    233c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    233e:	28 96       	adiw	r28, 0x08	; 8
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 L_u8Port, u8 L_u8Value)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <DIO_u8SetPortValue+0x6>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <DIO_u8SetPortValue+0x8>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	3d 83       	std	Y+5, r19	; 0x05
    236a:	2c 83       	std	Y+4, r18	; 0x04
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	9d 81       	ldd	r25, Y+5	; 0x05
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	91 05       	cpc	r25, r1
    2374:	d9 f0       	breq	.+54     	; 0x23ac <DIO_u8SetPortValue+0x5c>
    2376:	2c 81       	ldd	r18, Y+4	; 0x04
    2378:	3d 81       	ldd	r19, Y+5	; 0x05
    237a:	23 30       	cpi	r18, 0x03	; 3
    237c:	31 05       	cpc	r19, r1
    237e:	34 f4       	brge	.+12     	; 0x238c <DIO_u8SetPortValue+0x3c>
    2380:	8c 81       	ldd	r24, Y+4	; 0x04
    2382:	9d 81       	ldd	r25, Y+5	; 0x05
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	61 f0       	breq	.+24     	; 0x23a2 <DIO_u8SetPortValue+0x52>
    238a:	1f c0       	rjmp	.+62     	; 0x23ca <DIO_u8SetPortValue+0x7a>
    238c:	2c 81       	ldd	r18, Y+4	; 0x04
    238e:	3d 81       	ldd	r19, Y+5	; 0x05
    2390:	23 30       	cpi	r18, 0x03	; 3
    2392:	31 05       	cpc	r19, r1
    2394:	81 f0       	breq	.+32     	; 0x23b6 <DIO_u8SetPortValue+0x66>
    2396:	8c 81       	ldd	r24, Y+4	; 0x04
    2398:	9d 81       	ldd	r25, Y+5	; 0x05
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	91 05       	cpc	r25, r1
    239e:	81 f0       	breq	.+32     	; 0x23c0 <DIO_u8SetPortValue+0x70>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <DIO_u8SetPortValue+0x7a>
	{
		case PORTA: PORTA_Register = L_u8Value; break;
    23a2:	eb e3       	ldi	r30, 0x3B	; 59
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	80 83       	st	Z, r24
    23aa:	12 c0       	rjmp	.+36     	; 0x23d0 <DIO_u8SetPortValue+0x80>
		case PORTB: PORTB_Register = L_u8Value; break;
    23ac:	e8 e3       	ldi	r30, 0x38	; 56
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	80 83       	st	Z, r24
    23b4:	0d c0       	rjmp	.+26     	; 0x23d0 <DIO_u8SetPortValue+0x80>
		case PORTC: PORTC_Register = L_u8Value; break;
    23b6:	e5 e3       	ldi	r30, 0x35	; 53
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	80 83       	st	Z, r24
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <DIO_u8SetPortValue+0x80>
		case PORTD: PORTD_Register = L_u8Value; break;
    23c0:	e2 e3       	ldi	r30, 0x32	; 50
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	80 83       	st	Z, r24
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <DIO_u8SetPortValue+0x80>
		default: return DIO_ERROR; break;
    23ca:	9f ef       	ldi	r25, 0xFF	; 255
    23cc:	9b 83       	std	Y+3, r25	; 0x03
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <DIO_u8SetPortValue+0x82>
	}
	return DIO_OK;
    23d0:	1b 82       	std	Y+3, r1	; 0x03
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 L_u8Port, u8 L_u8Direction)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <DIO_u8SetPortDirection+0x6>
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <DIO_u8SetPortDirection+0x8>
    23ec:	0f 92       	push	r0
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8Port)
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	3d 83       	std	Y+5, r19	; 0x05
    23fe:	2c 83       	std	Y+4, r18	; 0x04
    2400:	8c 81       	ldd	r24, Y+4	; 0x04
    2402:	9d 81       	ldd	r25, Y+5	; 0x05
    2404:	82 30       	cpi	r24, 0x02	; 2
    2406:	91 05       	cpc	r25, r1
    2408:	d9 f0       	breq	.+54     	; 0x2440 <DIO_u8SetPortDirection+0x5c>
    240a:	2c 81       	ldd	r18, Y+4	; 0x04
    240c:	3d 81       	ldd	r19, Y+5	; 0x05
    240e:	23 30       	cpi	r18, 0x03	; 3
    2410:	31 05       	cpc	r19, r1
    2412:	34 f4       	brge	.+12     	; 0x2420 <DIO_u8SetPortDirection+0x3c>
    2414:	8c 81       	ldd	r24, Y+4	; 0x04
    2416:	9d 81       	ldd	r25, Y+5	; 0x05
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	61 f0       	breq	.+24     	; 0x2436 <DIO_u8SetPortDirection+0x52>
    241e:	1f c0       	rjmp	.+62     	; 0x245e <DIO_u8SetPortDirection+0x7a>
    2420:	2c 81       	ldd	r18, Y+4	; 0x04
    2422:	3d 81       	ldd	r19, Y+5	; 0x05
    2424:	23 30       	cpi	r18, 0x03	; 3
    2426:	31 05       	cpc	r19, r1
    2428:	81 f0       	breq	.+32     	; 0x244a <DIO_u8SetPortDirection+0x66>
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	84 30       	cpi	r24, 0x04	; 4
    2430:	91 05       	cpc	r25, r1
    2432:	81 f0       	breq	.+32     	; 0x2454 <DIO_u8SetPortDirection+0x70>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <DIO_u8SetPortDirection+0x7a>
	{
		case PORTA: DDRA_Register = L_u8Direction; break;
    2436:	ea e3       	ldi	r30, 0x3A	; 58
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	80 83       	st	Z, r24
    243e:	12 c0       	rjmp	.+36     	; 0x2464 <DIO_u8SetPortDirection+0x80>
		case PORTB: DDRB_Register = L_u8Direction; break;
    2440:	e7 e3       	ldi	r30, 0x37	; 55
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	80 83       	st	Z, r24
    2448:	0d c0       	rjmp	.+26     	; 0x2464 <DIO_u8SetPortDirection+0x80>
		case PORTC: DDRC_Register = L_u8Direction; break;
    244a:	e4 e3       	ldi	r30, 0x34	; 52
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	80 83       	st	Z, r24
    2452:	08 c0       	rjmp	.+16     	; 0x2464 <DIO_u8SetPortDirection+0x80>
		case PORTD: DDRD_Register = L_u8Direction; break;
    2454:	e1 e3       	ldi	r30, 0x31	; 49
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	80 83       	st	Z, r24
    245c:	03 c0       	rjmp	.+6      	; 0x2464 <DIO_u8SetPortDirection+0x80>
		default: return DIO_ERROR; break;
    245e:	9f ef       	ldi	r25, 0xFF	; 255
    2460:	9b 83       	std	Y+3, r25	; 0x03
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <DIO_u8SetPortDirection+0x82>
	}
	return DIO_OK;
    2464:	1b 82       	std	Y+3, r1	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <ADC_Init>:
#include "ADC_interface.h"



void ADC_Init(void)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <ADC_Init+0x6>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	u8 ADMUX_Temp =0;
    2482:	1a 82       	std	Y+2, r1	; 0x02
	u8 ADCSRA_Temp = 0;
    2484:	19 82       	std	Y+1, r1	; 0x01

	/* Set Adjust Value */
	ADMUX_Temp |= (ADC_ADJUST << ADLAR);

	/* Set Reference Value */
	ADMUX_Temp |= (ADC_REF << REFS0);
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	80 64       	ori	r24, 0x40	; 64
    248a:	8a 83       	std	Y+2, r24	; 0x02

	/* Write to Register */
	ADMUX_Register = ADMUX_Temp;
    248c:	e7 e2       	ldi	r30, 0x27	; 39
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	80 83       	st	Z, r24

	/* Set Pre-scaler value */
	ADCSRA_Temp |= (ADC_PSC << ADPS0);
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	83 60       	ori	r24, 0x03	; 3
    2498:	89 83       	std	Y+1, r24	; 0x01

	/* Enable Register */
	SET_BIT(ADCSRA_Temp, ADEN);
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	80 68       	ori	r24, 0x80	; 128
    249e:	89 83       	std	Y+1, r24	; 0x01

	/* Write to Register */
	ADCSRA_Register = ADCSRA_Temp;
    24a0:	e6 e2       	ldi	r30, 0x26	; 38
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	80 83       	st	Z, r24
}
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <ADC_StartConversion>:


u16 ADC_StartConversion(u8 L_u8Channel)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	0f 92       	push	r0
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	89 83       	std	Y+1, r24	; 0x01
	/* Clear MUX bits */
	ADMUX_Register &= ~ADMUX_MUX_MASK;
    24be:	a7 e2       	ldi	r26, 0x27	; 39
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e7 e2       	ldi	r30, 0x27	; 39
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	80 7e       	andi	r24, 0xE0	; 224
    24ca:	8c 93       	st	X, r24

	/* Select Channel */
	ADMUX_Register |= (L_u8Channel << MUX0);
    24cc:	a7 e2       	ldi	r26, 0x27	; 39
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e7 e2       	ldi	r30, 0x27	; 39
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	90 81       	ld	r25, Z
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	89 2b       	or	r24, r25
    24da:	8c 93       	st	X, r24

	/* Start Conversion */
	SET_BIT(ADCSRA_Register, ADSC);
    24dc:	a6 e2       	ldi	r26, 0x26	; 38
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e6 e2       	ldi	r30, 0x26	; 38
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 64       	ori	r24, 0x40	; 64
    24e8:	8c 93       	st	X, r24


	/* Wait for ADC to finish conversion */
	while(GET_BIT(ADCSRA_Register, ADIF) == 0)
    24ea:	e6 e2       	ldi	r30, 0x26	; 38
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	82 95       	swap	r24
    24f2:	8f 70       	andi	r24, 0x0F	; 15
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	81 70       	andi	r24, 0x01	; 1
    24fa:	90 70       	andi	r25, 0x00	; 0
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	a9 f3       	breq	.-22     	; 0x24ea <ADC_StartConversion+0x38>
	{
		/* Wait for ADC to finish */
	}

	/* Clear ADIF Flag */
	SET_BIT(ADCSRA_Register, ADIF);
    2500:	a6 e2       	ldi	r26, 0x26	; 38
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e6 e2       	ldi	r30, 0x26	; 38
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	80 61       	ori	r24, 0x10	; 16
    250c:	8c 93       	st	X, r24


	return ADCDATA_Register;
    250e:	e4 e2       	ldi	r30, 0x24	; 36
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
}
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <Stepper_Init>:
#include "Stepper_interface.h"

static u8 current_pattern = 0;

void Stepper_Init(void)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <Stepper_Init+0x6>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i<NUM_OF_COILS; i++)
    2528:	1a 82       	std	Y+2, r1	; 0x02
    252a:	19 82       	std	Y+1, r1	; 0x01
    252c:	1a c0       	rjmp	.+52     	; 0x2562 <Stepper_Init+0x44>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	fc 01       	movw	r30, r24
    2538:	e8 5c       	subi	r30, 0xC8	; 200
    253a:	fe 4f       	sbci	r31, 0xFE	; 254
    253c:	20 81       	ld	r18, Z
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	fc 01       	movw	r30, r24
    2548:	e7 5c       	subi	r30, 0xC7	; 199
    254a:	fe 4f       	sbci	r31, 0xFE	; 254
    254c:	90 81       	ld	r25, Z
    254e:	82 2f       	mov	r24, r18
    2550:	69 2f       	mov	r22, r25
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>

static u8 current_pattern = 0;

void Stepper_Init(void)
{
	for(int i=0; i<NUM_OF_COILS; i++)
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	01 96       	adiw	r24, 0x01	; 1
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	84 30       	cpi	r24, 0x04	; 4
    2568:	91 05       	cpc	r25, r1
    256a:	08 f3       	brcs	.-62     	; 0x252e <Stepper_Init+0x10>
	{
		DIO_u8SetPinDirection(coils[i].port, coils[i].pin, OUTPUT);
	}

}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <Stepper_StepCW>:

void Stepper_StepCW(void)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	0f 92       	push	r0
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
	current_pattern++;
    2580:	80 91 80 01 	lds	r24, 0x0180
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	80 93 80 01 	sts	0x0180, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    258a:	19 82       	std	Y+1, r1	; 0x01
    258c:	30 c0       	rjmp	.+96     	; 0x25ee <Stepper_StepCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	fc 01       	movw	r30, r24
    259a:	e8 5c       	subi	r30, 0xC8	; 200
    259c:	fe 4f       	sbci	r31, 0xFE	; 254
    259e:	40 81       	ld	r20, Z
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	fc 01       	movw	r30, r24
    25ac:	e7 5c       	subi	r30, 0xC7	; 199
    25ae:	fe 4f       	sbci	r31, 0xFE	; 254
    25b0:	50 81       	ld	r21, Z
    25b2:	80 91 80 01 	lds	r24, 0x0180
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	fc 01       	movw	r30, r24
    25bc:	e0 5a       	subi	r30, 0xA0	; 160
    25be:	fe 4f       	sbci	r31, 0xFE	; 254
    25c0:	80 81       	ld	r24, Z
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	88 2f       	mov	r24, r24
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	b9 01       	movw	r22, r18
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <Stepper_StepCW+0x5e>
    25d0:	75 95       	asr	r23
    25d2:	67 95       	ror	r22
    25d4:	8a 95       	dec	r24
    25d6:	e2 f7       	brpl	.-8      	; 0x25d0 <Stepper_StepCW+0x5a>
    25d8:	cb 01       	movw	r24, r22
    25da:	98 2f       	mov	r25, r24
    25dc:	91 70       	andi	r25, 0x01	; 1
    25de:	84 2f       	mov	r24, r20
    25e0:	65 2f       	mov	r22, r21
    25e2:	49 2f       	mov	r20, r25
    25e4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
}

void Stepper_StepCW(void)
{
	current_pattern++;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	84 30       	cpi	r24, 0x04	; 4
    25f2:	68 f2       	brcs	.-102    	; 0x258e <Stepper_StepCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 0;
    25f4:	80 91 80 01 	lds	r24, 0x0180
    25f8:	88 30       	cpi	r24, 0x08	; 8
    25fa:	10 f0       	brcs	.+4      	; 0x2600 <Stepper_StepCW+0x8a>
    25fc:	10 92 80 01 	sts	0x0180, r1
}
    2600:	0f 90       	pop	r0
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <Stepper_StepCCW>:

void Stepper_StepCCW(void)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	current_pattern--;
    2612:	80 91 80 01 	lds	r24, 0x0180
    2616:	81 50       	subi	r24, 0x01	; 1
    2618:	80 93 80 01 	sts	0x0180, r24
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    261c:	19 82       	std	Y+1, r1	; 0x01
    261e:	30 c0       	rjmp	.+96     	; 0x2680 <Stepper_StepCCW+0x78>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	88 2f       	mov	r24, r24
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	fc 01       	movw	r30, r24
    262c:	e8 5c       	subi	r30, 0xC8	; 200
    262e:	fe 4f       	sbci	r31, 0xFE	; 254
    2630:	40 81       	ld	r20, Z
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	fc 01       	movw	r30, r24
    263e:	e7 5c       	subi	r30, 0xC7	; 199
    2640:	fe 4f       	sbci	r31, 0xFE	; 254
    2642:	50 81       	ld	r21, Z
    2644:	80 91 80 01 	lds	r24, 0x0180
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	fc 01       	movw	r30, r24
    264e:	e0 5a       	subi	r30, 0xA0	; 160
    2650:	fe 4f       	sbci	r31, 0xFE	; 254
    2652:	80 81       	ld	r24, Z
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	b9 01       	movw	r22, r18
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <Stepper_StepCCW+0x5e>
    2662:	75 95       	asr	r23
    2664:	67 95       	ror	r22
    2666:	8a 95       	dec	r24
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <Stepper_StepCCW+0x5a>
    266a:	cb 01       	movw	r24, r22
    266c:	98 2f       	mov	r25, r24
    266e:	91 70       	andi	r25, 0x01	; 1
    2670:	84 2f       	mov	r24, r20
    2672:	65 2f       	mov	r22, r21
    2674:	49 2f       	mov	r20, r25
    2676:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
}

void Stepper_StepCCW(void)
{
	current_pattern--;
	for(u8 i = 0; i<NUM_OF_COILS; i++)
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	68 f2       	brcs	.-102    	; 0x2620 <Stepper_StepCCW+0x18>
	{
		DIO_u8SetPinValue(coils[i].port, coils[i].pin, GET_BIT(sequence_arr[current_pattern], i));
	}
	if(current_pattern > 7) current_pattern = 7;
    2686:	80 91 80 01 	lds	r24, 0x0180
    268a:	88 30       	cpi	r24, 0x08	; 8
    268c:	18 f0       	brcs	.+6      	; 0x2694 <Stepper_StepCCW+0x8c>
    268e:	87 e0       	ldi	r24, 0x07	; 7
    2690:	80 93 80 01 	sts	0x0180, r24
}
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <SevenSegment_voidInit>:
#include "SS_config.h"
#include "SS_interface.h"


void SevenSegment_voidInit()
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(SEVEN_SEGMENT1_PORT, 0xFF);
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	6f ef       	ldi	r22, 0xFF	; 255
    26a8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_u8SetPortValue>
}
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <SevenSegment_voidSetValue>:

void SevenSegment_voidSetValue(u8 L_u8UnitNo, u8 L_u8Value)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <SevenSegment_voidSetValue+0x6>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	6a 83       	std	Y+2, r22	; 0x02
	switch(L_u8UnitNo)
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	59 f4       	brne	.+22     	; 0x26e8 <SevenSegment_voidSetValue+0x2e>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, digits[L_u8Value]);break;
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	fc 01       	movw	r30, r24
    26da:	e8 59       	subi	r30, 0x98	; 152
    26dc:	fe 4f       	sbci	r31, 0xFE	; 254
    26de:	90 81       	ld	r25, Z
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	69 2f       	mov	r22, r25
    26e4:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_u8SetPortValue>
	}
}
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <SevenSegment_voidClear>:

void SevenSegment_voidClear(u8 L_u8UnitNo)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	0f 92       	push	r0
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8UnitNo)
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	21 f4       	brne	.+8      	; 0x2710 <SevenSegment_voidClear+0x1e>
	{
	case SEVEN_SEGMENT_UNIT1: DIO_u8SetPortValue(SEVEN_SEGMENT1_PORT, 0x00);break;
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_u8SetPortValue>
	}
}
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <Servo_Init>:
#include "Servo_private.h"
#include "Servo_config.h"
#include "Servo_interface.h"

void Servo_Init(void)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTD, PIN5, OUTPUT);
    2720:	84 e0       	ldi	r24, 0x04	; 4
    2722:	65 e0       	ldi	r22, 0x05	; 5
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN4, OUTPUT);
    272a:	84 e0       	ldi	r24, 0x04	; 4
    272c:	64 e0       	ldi	r22, 0x04	; 4
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	TIM1_voidFPWMInit(SERVO_PERIOD_US);
    2734:	80 e2       	ldi	r24, 0x20	; 32
    2736:	9e e4       	ldi	r25, 0x4E	; 78
    2738:	0e 94 2e 09 	call	0x125c	; 0x125c <TIM1_voidFPWMInit>
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <Servo_SetAngle>:

void Servo_SetAngle(u8 servo, s8 angle)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	28 97       	sbiw	r28, 0x08	; 8
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	cd bf       	out	0x3d, r28	; 61
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	6e 83       	std	Y+6, r22	; 0x06
	u32 tmp = (angle + (s8) 90);
    275a:	8e 81       	ldd	r24, Y+6	; 0x06
    275c:	99 27       	eor	r25, r25
    275e:	87 fd       	sbrc	r24, 7
    2760:	90 95       	com	r25
    2762:	86 5a       	subi	r24, 0xA6	; 166
    2764:	9f 4f       	sbci	r25, 0xFF	; 255
    2766:	aa 27       	eor	r26, r26
    2768:	97 fd       	sbrc	r25, 7
    276a:	a0 95       	com	r26
    276c:	ba 2f       	mov	r27, r26
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	ab 83       	std	Y+3, r26	; 0x03
    2774:	bc 83       	std	Y+4, r27	; 0x04
	tmp = (tmp * 1000)/180;
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	ab 81       	ldd	r26, Y+3	; 0x03
    277c:	bc 81       	ldd	r27, Y+4	; 0x04
    277e:	28 ee       	ldi	r18, 0xE8	; 232
    2780:	33 e0       	ldi	r19, 0x03	; 3
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <__mulsi3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	24 eb       	ldi	r18, 0xB4	; 180
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
    27a2:	da 01       	movw	r26, r20
    27a4:	c9 01       	movw	r24, r18
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	ab 83       	std	Y+3, r26	; 0x03
    27ac:	bc 83       	std	Y+4, r27	; 0x04

	switch(servo)
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	38 87       	std	Y+8, r19	; 0x08
    27b6:	2f 83       	std	Y+7, r18	; 0x07
    27b8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ba:	98 85       	ldd	r25, Y+8	; 0x08
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	31 f0       	breq	.+12     	; 0x27cc <Servo_SetAngle+0x8a>
    27c0:	2f 81       	ldd	r18, Y+7	; 0x07
    27c2:	38 85       	ldd	r19, Y+8	; 0x08
    27c4:	21 30       	cpi	r18, 0x01	; 1
    27c6:	31 05       	cpc	r19, r1
    27c8:	59 f0       	breq	.+22     	; 0x27e0 <Servo_SetAngle+0x9e>
    27ca:	13 c0       	rjmp	.+38     	; 0x27f2 <Servo_SetAngle+0xb0>
	{
	case SERVO1: TIM1_setDutyCycle(SERVO1_CH, 1000 + ((u16) tmp)); break;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	9c 01       	movw	r18, r24
    27d2:	28 51       	subi	r18, 0x18	; 24
    27d4:	3c 4f       	sbci	r19, 0xFC	; 252
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	b9 01       	movw	r22, r18
    27da:	0e 94 91 09 	call	0x1322	; 0x1322 <TIM1_setDutyCycle>
    27de:	09 c0       	rjmp	.+18     	; 0x27f2 <Servo_SetAngle+0xb0>
	case SERVO2: TIM1_setDutyCycle(SERVO2_CH, 1000 + ((u16) tmp)); break;
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	9c 01       	movw	r18, r24
    27e6:	28 51       	subi	r18, 0x18	; 24
    27e8:	3c 4f       	sbci	r19, 0xFC	; 252
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	b9 01       	movw	r22, r18
    27ee:	0e 94 91 09 	call	0x1322	; 0x1322 <TIM1_setDutyCycle>
	}

}
    27f2:	28 96       	adiw	r28, 0x08	; 8
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <Motor_Init>:
#include "Motor_config.h"
#include "Motor_interface.h"
#include <util/delay.h>

void Motor_Init(void)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(MOTOR_CCW_PORT, MOTOR_CCW_PIN, OUTPUT);
    280c:	83 e0       	ldi	r24, 0x03	; 3
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_CW_PORT, MOTOR_CW_PIN, OUTPUT);
    2816:	83 e0       	ldi	r24, 0x03	; 3
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	Motor_Stop();
    2820:	0e 94 32 15 	call	0x2a64	; 0x2a64 <Motor_Stop>
}
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <Motor_SetDirection>:
void Motor_SetDirection(u8 L_u8Direction)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	6f 97       	sbiw	r28, 0x1f	; 31
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(L_u8Direction)
    2840:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	3f 8f       	std	Y+31, r19	; 0x1f
    2848:	2e 8f       	std	Y+30, r18	; 0x1e
    284a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    284c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	39 f0       	breq	.+14     	; 0x2860 <Motor_SetDirection+0x36>
    2852:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2854:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2856:	21 30       	cpi	r18, 0x01	; 1
    2858:	31 05       	cpc	r19, r1
    285a:	09 f4       	brne	.+2      	; 0x285e <Motor_SetDirection+0x34>
    285c:	7e c0       	rjmp	.+252    	; 0x295a <Motor_SetDirection+0x130>
    285e:	f9 c0       	rjmp	.+498    	; 0x2a52 <Motor_SetDirection+0x228>
	{
	case MOTOR_CW:
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    2860:	83 e0       	ldi	r24, 0x03	; 3
    2862:	61 e0       	ldi	r22, 0x01	; 1
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	89 8f       	std	Y+25, r24	; 0x19
    2874:	9a 8f       	std	Y+26, r25	; 0x1a
    2876:	ab 8f       	std	Y+27, r26	; 0x1b
    2878:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	69 8d       	ldd	r22, Y+25	; 0x19
    287c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    287e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a ef       	ldi	r20, 0xFA	; 250
    2888:	54 e4       	ldi	r21, 0x44	; 68
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8d 8b       	std	Y+21, r24	; 0x15
    2894:	9e 8b       	std	Y+22, r25	; 0x16
    2896:	af 8b       	std	Y+23, r26	; 0x17
    2898:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    289a:	6d 89       	ldd	r22, Y+21	; 0x15
    289c:	7e 89       	ldd	r23, Y+22	; 0x16
    289e:	8f 89       	ldd	r24, Y+23	; 0x17
    28a0:	98 8d       	ldd	r25, Y+24	; 0x18
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <Motor_SetDirection+0x92>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9c 8b       	std	Y+20, r25	; 0x14
    28b8:	8b 8b       	std	Y+19, r24	; 0x13
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <Motor_SetDirection+0x110>
	else if (__tmp > 65535)
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <Motor_SetDirection+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	69 8d       	ldd	r22, Y+25	; 0x19
    28d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9c 8b       	std	Y+20, r25	; 0x14
    28fa:	8b 8b       	std	Y+19, r24	; 0x13
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <Motor_SetDirection+0xf2>
    28fe:	88 ec       	ldi	r24, 0xC8	; 200
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9a 8b       	std	Y+18, r25	; 0x12
    2904:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2906:	89 89       	ldd	r24, Y+17	; 0x11
    2908:	9a 89       	ldd	r25, Y+18	; 0x12
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <Motor_SetDirection+0xe0>
    290e:	9a 8b       	std	Y+18, r25	; 0x12
    2910:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	8b 89       	ldd	r24, Y+19	; 0x13
    2914:	9c 89       	ldd	r25, Y+20	; 0x14
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	9c 8b       	std	Y+20, r25	; 0x14
    291a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <Motor_SetDirection+0xd4>
    2924:	14 c0       	rjmp	.+40     	; 0x294e <Motor_SetDirection+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	6d 89       	ldd	r22, Y+21	; 0x15
    2928:	7e 89       	ldd	r23, Y+22	; 0x16
    292a:	8f 89       	ldd	r24, Y+23	; 0x17
    292c:	98 8d       	ldd	r25, Y+24	; 0x18
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9c 8b       	std	Y+20, r25	; 0x14
    2938:	8b 8b       	std	Y+19, r24	; 0x13
    293a:	8b 89       	ldd	r24, Y+19	; 0x13
    293c:	9c 89       	ldd	r25, Y+20	; 0x14
    293e:	98 8b       	std	Y+16, r25	; 0x10
    2940:	8f 87       	std	Y+15, r24	; 0x0f
    2942:	8f 85       	ldd	r24, Y+15	; 0x0f
    2944:	98 89       	ldd	r25, Y+16	; 0x10
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <Motor_SetDirection+0x11c>
    294a:	98 8b       	std	Y+16, r25	; 0x10
    294c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, HIGH);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2958:	7c c0       	rjmp	.+248    	; 0x2a52 <Motor_SetDirection+0x228>
		break;
	case MOTOR_CCW:
		DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e8       	ldi	r26, 0x80	; 128
    296a:	bf e3       	ldi	r27, 0x3F	; 63
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <Motor_SetDirection+0x18c>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <Motor_SetDirection+0x20a>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <Motor_SetDirection+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <Motor_SetDirection+0x1ec>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <Motor_SetDirection+0x1da>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <Motor_SetDirection+0x1ce>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <Motor_SetDirection+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <Motor_SetDirection+0x216>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, HIGH);
    2a48:	83 e0       	ldi	r24, 0x03	; 3
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	41 e0       	ldi	r20, 0x01	; 1
    2a4e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
		break;
	}
}
    2a52:	6f 96       	adiw	r28, 0x1f	; 31
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <Motor_Stop>:
void Motor_Stop(void)
{
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_CCW_PORT, MOTOR_CCW_PIN, LOW);
    2a6c:	83 e0       	ldi	r24, 0x03	; 3
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_CW_PORT, MOTOR_CW_PIN, LOW);
    2a76:	83 e0       	ldi	r24, 0x03	; 3
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
}
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <LED_voidInit>:

#include "LED_interface.h"
#include "LED_private.h"

void LED_voidInit(u8 L_u8led)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <LED_voidInit+0x6>
    2a8c:	0f 92       	push	r0
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led)
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	3b 83       	std	Y+3, r19	; 0x03
    2a9c:	2a 83       	std	Y+2, r18	; 0x02
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa2:	82 30       	cpi	r24, 0x02	; 2
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	31 f1       	breq	.+76     	; 0x2af4 <LED_voidInit+0x6e>
    2aa8:	2a 81       	ldd	r18, Y+2	; 0x02
    2aaa:	3b 81       	ldd	r19, Y+3	; 0x03
    2aac:	23 30       	cpi	r18, 0x03	; 3
    2aae:	31 05       	cpc	r19, r1
    2ab0:	54 f4       	brge	.+20     	; 0x2ac6 <LED_voidInit+0x40>
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	89 f0       	breq	.+34     	; 0x2adc <LED_voidInit+0x56>
    2aba:	2a 81       	ldd	r18, Y+2	; 0x02
    2abc:	3b 81       	ldd	r19, Y+3	; 0x03
    2abe:	21 30       	cpi	r18, 0x01	; 1
    2ac0:	31 05       	cpc	r19, r1
    2ac2:	91 f0       	breq	.+36     	; 0x2ae8 <LED_voidInit+0x62>
    2ac4:	28 c0       	rjmp	.+80     	; 0x2b16 <LED_voidInit+0x90>
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aca:	83 30       	cpi	r24, 0x03	; 3
    2acc:	91 05       	cpc	r25, r1
    2ace:	c1 f0       	breq	.+48     	; 0x2b00 <LED_voidInit+0x7a>
    2ad0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ad2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ad4:	24 30       	cpi	r18, 0x04	; 4
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	c9 f0       	breq	.+50     	; 0x2b0c <LED_voidInit+0x86>
    2ada:	1d c0       	rjmp	.+58     	; 0x2b16 <LED_voidInit+0x90>
	{
	case LED1 :DIO_u8SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT); break ;
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	66 e0       	ldi	r22, 0x06	; 6
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
    2ae6:	17 c0       	rjmp	.+46     	; 0x2b16 <LED_voidInit+0x90>
	case LED2 :DIO_u8SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT); break ;
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	67 e0       	ldi	r22, 0x07	; 7
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
    2af2:	11 c0       	rjmp	.+34     	; 0x2b16 <LED_voidInit+0x90>
	case LED3 :DIO_u8SetPinDirection(LED3_PORT, LED3_PIN, OUTPUT); break ;
    2af4:	83 e0       	ldi	r24, 0x03	; 3
    2af6:	67 e0       	ldi	r22, 0x07	; 7
    2af8:	41 e0       	ldi	r20, 0x01	; 1
    2afa:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
    2afe:	0b c0       	rjmp	.+22     	; 0x2b16 <LED_voidInit+0x90>
	case LED4 :DIO_u8SetPinDirection(LED4_PORT, LED4_PIN, OUTPUT); break ;
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	63 e0       	ldi	r22, 0x03	; 3
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
    2b0a:	05 c0       	rjmp	.+10     	; 0x2b16 <LED_voidInit+0x90>
	case LED5 :DIO_u8SetPinDirection(LED5_PORT, LED5_PIN, OUTPUT); break ;
    2b0c:	83 e0       	ldi	r24, 0x03	; 3
    2b0e:	64 e0       	ldi	r22, 0x04	; 4
    2b10:	41 e0       	ldi	r20, 0x01	; 1
    2b12:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	}
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <LED_voidSetLEDHigh>:
void LED_voidSetLEDHigh(u8 L_u8led)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <LED_voidSetLEDHigh+0x6>
    2b28:	0f 92       	push	r0
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	3b 83       	std	Y+3, r19	; 0x03
    2b38:	2a 83       	std	Y+2, r18	; 0x02
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	82 30       	cpi	r24, 0x02	; 2
    2b40:	91 05       	cpc	r25, r1
    2b42:	31 f1       	breq	.+76     	; 0x2b90 <LED_voidSetLEDHigh+0x6e>
    2b44:	2a 81       	ldd	r18, Y+2	; 0x02
    2b46:	3b 81       	ldd	r19, Y+3	; 0x03
    2b48:	23 30       	cpi	r18, 0x03	; 3
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	54 f4       	brge	.+20     	; 0x2b62 <LED_voidSetLEDHigh+0x40>
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	9b 81       	ldd	r25, Y+3	; 0x03
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	89 f0       	breq	.+34     	; 0x2b78 <LED_voidSetLEDHigh+0x56>
    2b56:	2a 81       	ldd	r18, Y+2	; 0x02
    2b58:	3b 81       	ldd	r19, Y+3	; 0x03
    2b5a:	21 30       	cpi	r18, 0x01	; 1
    2b5c:	31 05       	cpc	r19, r1
    2b5e:	91 f0       	breq	.+36     	; 0x2b84 <LED_voidSetLEDHigh+0x62>
    2b60:	28 c0       	rjmp	.+80     	; 0x2bb2 <LED_voidSetLEDHigh+0x90>
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	9b 81       	ldd	r25, Y+3	; 0x03
    2b66:	83 30       	cpi	r24, 0x03	; 3
    2b68:	91 05       	cpc	r25, r1
    2b6a:	c1 f0       	breq	.+48     	; 0x2b9c <LED_voidSetLEDHigh+0x7a>
    2b6c:	2a 81       	ldd	r18, Y+2	; 0x02
    2b6e:	3b 81       	ldd	r19, Y+3	; 0x03
    2b70:	24 30       	cpi	r18, 0x04	; 4
    2b72:	31 05       	cpc	r19, r1
    2b74:	c9 f0       	breq	.+50     	; 0x2ba8 <LED_voidSetLEDHigh+0x86>
    2b76:	1d c0       	rjmp	.+58     	; 0x2bb2 <LED_voidSetLEDHigh+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, HIGH); break;
    2b78:	83 e0       	ldi	r24, 0x03	; 3
    2b7a:	66 e0       	ldi	r22, 0x06	; 6
    2b7c:	41 e0       	ldi	r20, 0x01	; 1
    2b7e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2b82:	17 c0       	rjmp	.+46     	; 0x2bb2 <LED_voidSetLEDHigh+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, HIGH); break;
    2b84:	83 e0       	ldi	r24, 0x03	; 3
    2b86:	67 e0       	ldi	r22, 0x07	; 7
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2b8e:	11 c0       	rjmp	.+34     	; 0x2bb2 <LED_voidSetLEDHigh+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, HIGH); break;
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	67 e0       	ldi	r22, 0x07	; 7
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2b9a:	0b c0       	rjmp	.+22     	; 0x2bb2 <LED_voidSetLEDHigh+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, HIGH); break;
    2b9c:	83 e0       	ldi	r24, 0x03	; 3
    2b9e:	63 e0       	ldi	r22, 0x03	; 3
    2ba0:	41 e0       	ldi	r20, 0x01	; 1
    2ba2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2ba6:	05 c0       	rjmp	.+10     	; 0x2bb2 <LED_voidSetLEDHigh+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, HIGH); break;
    2ba8:	83 e0       	ldi	r24, 0x03	; 3
    2baa:	64 e0       	ldi	r22, 0x04	; 4
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
	}
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <LED_voidSetLEDLow>:
void LED_voidSetLEDLow(u8 L_u8led)
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <LED_voidSetLEDLow+0x6>
    2bc4:	0f 92       	push	r0
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8led){
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	3b 83       	std	Y+3, r19	; 0x03
    2bd4:	2a 83       	std	Y+2, r18	; 0x02
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	82 30       	cpi	r24, 0x02	; 2
    2bdc:	91 05       	cpc	r25, r1
    2bde:	31 f1       	breq	.+76     	; 0x2c2c <LED_voidSetLEDLow+0x6e>
    2be0:	2a 81       	ldd	r18, Y+2	; 0x02
    2be2:	3b 81       	ldd	r19, Y+3	; 0x03
    2be4:	23 30       	cpi	r18, 0x03	; 3
    2be6:	31 05       	cpc	r19, r1
    2be8:	54 f4       	brge	.+20     	; 0x2bfe <LED_voidSetLEDLow+0x40>
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	9b 81       	ldd	r25, Y+3	; 0x03
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	89 f0       	breq	.+34     	; 0x2c14 <LED_voidSetLEDLow+0x56>
    2bf2:	2a 81       	ldd	r18, Y+2	; 0x02
    2bf4:	3b 81       	ldd	r19, Y+3	; 0x03
    2bf6:	21 30       	cpi	r18, 0x01	; 1
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	91 f0       	breq	.+36     	; 0x2c20 <LED_voidSetLEDLow+0x62>
    2bfc:	28 c0       	rjmp	.+80     	; 0x2c4e <LED_voidSetLEDLow+0x90>
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	83 30       	cpi	r24, 0x03	; 3
    2c04:	91 05       	cpc	r25, r1
    2c06:	c1 f0       	breq	.+48     	; 0x2c38 <LED_voidSetLEDLow+0x7a>
    2c08:	2a 81       	ldd	r18, Y+2	; 0x02
    2c0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c0c:	24 30       	cpi	r18, 0x04	; 4
    2c0e:	31 05       	cpc	r19, r1
    2c10:	c9 f0       	breq	.+50     	; 0x2c44 <LED_voidSetLEDLow+0x86>
    2c12:	1d c0       	rjmp	.+58     	; 0x2c4e <LED_voidSetLEDLow+0x90>
	case LED1: DIO_u8SetPinValue(LED1_PORT, LED1_PIN, LOW); break;
    2c14:	83 e0       	ldi	r24, 0x03	; 3
    2c16:	66 e0       	ldi	r22, 0x06	; 6
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2c1e:	17 c0       	rjmp	.+46     	; 0x2c4e <LED_voidSetLEDLow+0x90>
	case LED2: DIO_u8SetPinValue(LED2_PORT, LED2_PIN, LOW); break;
    2c20:	83 e0       	ldi	r24, 0x03	; 3
    2c22:	67 e0       	ldi	r22, 0x07	; 7
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2c2a:	11 c0       	rjmp	.+34     	; 0x2c4e <LED_voidSetLEDLow+0x90>
	case LED3: DIO_u8SetPinValue(LED3_PORT, LED3_PIN, LOW); break;
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	67 e0       	ldi	r22, 0x07	; 7
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2c36:	0b c0       	rjmp	.+22     	; 0x2c4e <LED_voidSetLEDLow+0x90>
	case LED4: DIO_u8SetPinValue(LED4_PORT, LED4_PIN, LOW); break;
    2c38:	83 e0       	ldi	r24, 0x03	; 3
    2c3a:	63 e0       	ldi	r22, 0x03	; 3
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2c42:	05 c0       	rjmp	.+10     	; 0x2c4e <LED_voidSetLEDLow+0x90>
	case LED5: DIO_u8SetPinValue(LED5_PORT, LED5_PIN, LOW); break;
    2c44:	83 e0       	ldi	r24, 0x03	; 3
    2c46:	64 e0       	ldi	r22, 0x04	; 4
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
	}
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <HLCD_voidinit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include <util/delay.h>

void HLCD_voidinit()
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	aa 97       	sbiw	r28, 0x2a	; 42
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_DATA_PORT ,OUTPUT);
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RS_PIN ,OUTPUT);
    2c76:	83 e0       	ldi	r24, 0x03	; 3
    2c78:	62 e0       	ldi	r22, 0x02	; 2
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_RW_PIN ,OUTPUT);
    2c80:	83 e0       	ldi	r24, 0x03	; 3
    2c82:	63 e0       	ldi	r22, 0x03	; 3
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CONTROL_PORT ,LCD_E_PIN ,OUTPUT);
    2c8a:	83 e0       	ldi	r24, 0x03	; 3
    2c8c:	64 e0       	ldi	r22, 0x04	; 4
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a0 ef       	ldi	r26, 0xF0	; 240
    2c9a:	b1 e4       	ldi	r27, 0x41	; 65
    2c9c:	8f a3       	std	Y+39, r24	; 0x27
    2c9e:	98 a7       	std	Y+40, r25	; 0x28
    2ca0:	a9 a7       	std	Y+41, r26	; 0x29
    2ca2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    2caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a ef       	ldi	r20, 0xFA	; 250
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8b a3       	std	Y+35, r24	; 0x23
    2cbe:	9c a3       	std	Y+36, r25	; 0x24
    2cc0:	ad a3       	std	Y+37, r26	; 0x25
    2cc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cca:	9e a1       	ldd	r25, Y+38	; 0x26
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <HLCD_voidinit+0x8c>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9a a3       	std	Y+34, r25	; 0x22
    2ce2:	89 a3       	std	Y+33, r24	; 0x21
    2ce4:	3f c0       	rjmp	.+126    	; 0x2d64 <HLCD_voidinit+0x10a>
	else if (__tmp > 65535)
    2ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cea:	8d a1       	ldd	r24, Y+37	; 0x25
    2cec:	9e a1       	ldd	r25, Y+38	; 0x26
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	4c f5       	brge	.+82     	; 0x2d50 <HLCD_voidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfe:	6f a1       	ldd	r22, Y+39	; 0x27
    2d00:	78 a5       	ldd	r23, Y+40	; 0x28
    2d02:	89 a5       	ldd	r24, Y+41	; 0x29
    2d04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e2       	ldi	r20, 0x20	; 32
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9a a3       	std	Y+34, r25	; 0x22
    2d24:	89 a3       	std	Y+33, r24	; 0x21
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <HLCD_voidinit+0xec>
    2d28:	88 ec       	ldi	r24, 0xC8	; 200
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	98 a3       	std	Y+32, r25	; 0x20
    2d2e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d32:	98 a1       	ldd	r25, Y+32	; 0x20
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <HLCD_voidinit+0xda>
    2d38:	98 a3       	std	Y+32, r25	; 0x20
    2d3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9a a3       	std	Y+34, r25	; 0x22
    2d44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	89 a1       	ldd	r24, Y+33	; 0x21
    2d48:	9a a1       	ldd	r25, Y+34	; 0x22
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <HLCD_voidinit+0xce>
    2d4e:	14 c0       	rjmp	.+40     	; 0x2d78 <HLCD_voidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	6b a1       	ldd	r22, Y+35	; 0x23
    2d52:	7c a1       	ldd	r23, Y+36	; 0x24
    2d54:	8d a1       	ldd	r24, Y+37	; 0x25
    2d56:	9e a1       	ldd	r25, Y+38	; 0x26
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9a a3       	std	Y+34, r25	; 0x22
    2d62:	89 a3       	std	Y+33, r24	; 0x21
    2d64:	89 a1       	ldd	r24, Y+33	; 0x21
    2d66:	9a a1       	ldd	r25, Y+34	; 0x22
    2d68:	9e 8f       	std	Y+30, r25	; 0x1e
    2d6a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <HLCD_voidinit+0x116>
    2d74:	9e 8f       	std	Y+30, r25	; 0x1e
    2d76:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);
	HLCD_voidCommand(LCD_Function_set1);
    2d78:	88 e3       	ldi	r24, 0x38	; 56
    2d7a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
	//_delay_ms(1);
	HLCD_voidCommand(LCD_Display_Mode2);
    2d7e:	8d e0       	ldi	r24, 0x0D	; 13
    2d80:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 e8       	ldi	r26, 0x80	; 128
    2d8a:	bf e3       	ldi	r27, 0x3F	; 63
    2d8c:	89 8f       	std	Y+25, r24	; 0x19
    2d8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2d90:	ab 8f       	std	Y+27, r26	; 0x1b
    2d92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	69 8d       	ldd	r22, Y+25	; 0x19
    2d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a ef       	ldi	r20, 0xFA	; 250
    2da2:	54 e4       	ldi	r21, 0x44	; 68
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8d 8b       	std	Y+21, r24	; 0x15
    2dae:	9e 8b       	std	Y+22, r25	; 0x16
    2db0:	af 8b       	std	Y+23, r26	; 0x17
    2db2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2db4:	6d 89       	ldd	r22, Y+21	; 0x15
    2db6:	7e 89       	ldd	r23, Y+22	; 0x16
    2db8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dba:	98 8d       	ldd	r25, Y+24	; 0x18
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <HLCD_voidinit+0x17c>
		__ticks = 1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9c 8b       	std	Y+20, r25	; 0x14
    2dd2:	8b 8b       	std	Y+19, r24	; 0x13
    2dd4:	3f c0       	rjmp	.+126    	; 0x2e54 <HLCD_voidinit+0x1fa>
	else if (__tmp > 65535)
    2dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dda:	8f 89       	ldd	r24, Y+23	; 0x17
    2ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	4f e7       	ldi	r20, 0x7F	; 127
    2de4:	57 e4       	ldi	r21, 0x47	; 71
    2de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dea:	18 16       	cp	r1, r24
    2dec:	4c f5       	brge	.+82     	; 0x2e40 <HLCD_voidinit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dee:	69 8d       	ldd	r22, Y+25	; 0x19
    2df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e2       	ldi	r20, 0x20	; 32
    2dfc:	51 e4       	ldi	r21, 0x41	; 65
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	bc 01       	movw	r22, r24
    2e08:	cd 01       	movw	r24, r26
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9c 8b       	std	Y+20, r25	; 0x14
    2e14:	8b 8b       	std	Y+19, r24	; 0x13
    2e16:	0f c0       	rjmp	.+30     	; 0x2e36 <HLCD_voidinit+0x1dc>
    2e18:	88 ec       	ldi	r24, 0xC8	; 200
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9a 8b       	std	Y+18, r25	; 0x12
    2e1e:	89 8b       	std	Y+17, r24	; 0x11
    2e20:	89 89       	ldd	r24, Y+17	; 0x11
    2e22:	9a 89       	ldd	r25, Y+18	; 0x12
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <HLCD_voidinit+0x1ca>
    2e28:	9a 8b       	std	Y+18, r25	; 0x12
    2e2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	9c 8b       	std	Y+20, r25	; 0x14
    2e34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e36:	8b 89       	ldd	r24, Y+19	; 0x13
    2e38:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	69 f7       	brne	.-38     	; 0x2e18 <HLCD_voidinit+0x1be>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <HLCD_voidinit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e40:	6d 89       	ldd	r22, Y+21	; 0x15
    2e42:	7e 89       	ldd	r23, Y+22	; 0x16
    2e44:	8f 89       	ldd	r24, Y+23	; 0x17
    2e46:	98 8d       	ldd	r25, Y+24	; 0x18
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9c 8b       	std	Y+20, r25	; 0x14
    2e52:	8b 8b       	std	Y+19, r24	; 0x13
    2e54:	8b 89       	ldd	r24, Y+19	; 0x13
    2e56:	9c 89       	ldd	r25, Y+20	; 0x14
    2e58:	98 8b       	std	Y+16, r25	; 0x10
    2e5a:	8f 87       	std	Y+15, r24	; 0x0f
    2e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5e:	98 89       	ldd	r25, Y+16	; 0x10
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <HLCD_voidinit+0x206>
    2e64:	98 8b       	std	Y+16, r25	; 0x10
    2e66:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_voidCommand(LCD_Clear_Screen);
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	a0 e0       	ldi	r26, 0x00	; 0
    2e74:	b0 e4       	ldi	r27, 0x40	; 64
    2e76:	8b 87       	std	Y+11, r24	; 0x0b
    2e78:	9c 87       	std	Y+12, r25	; 0x0c
    2e7a:	ad 87       	std	Y+13, r26	; 0x0d
    2e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a ef       	ldi	r20, 0xFA	; 250
    2e8c:	54 e4       	ldi	r21, 0x44	; 68
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	8f 83       	std	Y+7, r24	; 0x07
    2e98:	98 87       	std	Y+8, r25	; 0x08
    2e9a:	a9 87       	std	Y+9, r26	; 0x09
    2e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea0:	78 85       	ldd	r23, Y+8	; 0x08
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e8       	ldi	r20, 0x80	; 128
    2eac:	5f e3       	ldi	r21, 0x3F	; 63
    2eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb2:	88 23       	and	r24, r24
    2eb4:	2c f4       	brge	.+10     	; 0x2ec0 <HLCD_voidinit+0x266>
		__ticks = 1;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	3f c0       	rjmp	.+126    	; 0x2f3e <HLCD_voidinit+0x2e4>
	else if (__tmp > 65535)
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	4c f5       	brge	.+82     	; 0x2f2a <HLCD_voidinit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e 83       	std	Y+6, r25	; 0x06
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <HLCD_voidinit+0x2c6>
    2f02:	88 ec       	ldi	r24, 0xC8	; 200
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <HLCD_voidinit+0x2b4>
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	69 f7       	brne	.-38     	; 0x2f02 <HLCD_voidinit+0x2a8>
    2f28:	14 c0       	rjmp	.+40     	; 0x2f52 <HLCD_voidinit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9e 83       	std	Y+6, r25	; 0x06
    2f3c:	8d 83       	std	Y+5, r24	; 0x05
    2f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f40:	9e 81       	ldd	r25, Y+6	; 0x06
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <HLCD_voidinit+0x2f0>
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidCommand(LCD_Entry_Mode1);
    2f52:	86 e0       	ldi	r24, 0x06	; 6
    2f54:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>

    HLCD_voidCommand(LCD_DISP_ON_CURSOR);
    2f58:	8e e0       	ldi	r24, 0x0E	; 14
    2f5a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
    HLCD_voidCommand(LCD_DISP_ON);
    2f5e:	8c e0       	ldi	r24, 0x0C	; 12
    2f60:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
}
    2f64:	aa 96       	adiw	r28, 0x2a	; 42
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <HLCD_voidCommand>:

void HLCD_voidCommand(u8 command)
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	0f 92       	push	r0
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,LOW );
    2f82:	83 e0       	ldi	r24, 0x03	; 3
    2f84:	62 e0       	ldi	r22, 0x02	; 2
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW );
    2f8c:	83 e0       	ldi	r24, 0x03	; 3
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT ,command );
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	69 81       	ldd	r22, Y+1	; 0x01
    2f9a:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    2f9e:	0e 94 e5 17 	call	0x2fca	; 0x2fca <HLCD_voidSendPulse>
}
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <HLCD_voidSetDDRAM_Address>:
void HLCD_voidSetDDRAM_Address(u8 address)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	0f 92       	push	r0
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(address,7);
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	80 68       	ori	r24, 0x80	; 128
    2fba:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidCommand(address);
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
}
    2fc2:	0f 90       	pop	r0
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <HLCD_voidSendPulse>:

void static HLCD_voidSendPulse(void)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	6c 97       	sbiw	r28, 0x1c	; 28
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,HIGH);
    2fde:	83 e0       	ldi	r24, 0x03	; 3
    2fe0:	64 e0       	ldi	r22, 0x04	; 4
    2fe2:	41 e0       	ldi	r20, 0x01	; 1
    2fe4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a0 e8       	ldi	r26, 0x80	; 128
    2fee:	bf e3       	ldi	r27, 0x3F	; 63
    2ff0:	89 8f       	std	Y+25, r24	; 0x19
    2ff2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	4a ef       	ldi	r20, 0xFA	; 250
    3006:	54 e4       	ldi	r21, 0x44	; 68
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8d 8b       	std	Y+21, r24	; 0x15
    3012:	9e 8b       	std	Y+22, r25	; 0x16
    3014:	af 8b       	std	Y+23, r26	; 0x17
    3016:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3018:	6d 89       	ldd	r22, Y+21	; 0x15
    301a:	7e 89       	ldd	r23, Y+22	; 0x16
    301c:	8f 89       	ldd	r24, Y+23	; 0x17
    301e:	98 8d       	ldd	r25, Y+24	; 0x18
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <HLCD_voidSendPulse+0x70>
		__ticks = 1;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9c 8b       	std	Y+20, r25	; 0x14
    3036:	8b 8b       	std	Y+19, r24	; 0x13
    3038:	3f c0       	rjmp	.+126    	; 0x30b8 <HLCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    303a:	6d 89       	ldd	r22, Y+21	; 0x15
    303c:	7e 89       	ldd	r23, Y+22	; 0x16
    303e:	8f 89       	ldd	r24, Y+23	; 0x17
    3040:	98 8d       	ldd	r25, Y+24	; 0x18
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	4c f5       	brge	.+82     	; 0x30a4 <HLCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3052:	69 8d       	ldd	r22, Y+25	; 0x19
    3054:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9c 8b       	std	Y+20, r25	; 0x14
    3078:	8b 8b       	std	Y+19, r24	; 0x13
    307a:	0f c0       	rjmp	.+30     	; 0x309a <HLCD_voidSendPulse+0xd0>
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9a 8b       	std	Y+18, r25	; 0x12
    3082:	89 8b       	std	Y+17, r24	; 0x11
    3084:	89 89       	ldd	r24, Y+17	; 0x11
    3086:	9a 89       	ldd	r25, Y+18	; 0x12
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <HLCD_voidSendPulse+0xbe>
    308c:	9a 8b       	std	Y+18, r25	; 0x12
    308e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	8b 89       	ldd	r24, Y+19	; 0x13
    3092:	9c 89       	ldd	r25, Y+20	; 0x14
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	9c 8b       	std	Y+20, r25	; 0x14
    3098:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	8b 89       	ldd	r24, Y+19	; 0x13
    309c:	9c 89       	ldd	r25, Y+20	; 0x14
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <HLCD_voidSendPulse+0xb2>
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <HLCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	6d 89       	ldd	r22, Y+21	; 0x15
    30a6:	7e 89       	ldd	r23, Y+22	; 0x16
    30a8:	8f 89       	ldd	r24, Y+23	; 0x17
    30aa:	98 8d       	ldd	r25, Y+24	; 0x18
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
    30b8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ba:	9c 89       	ldd	r25, Y+20	; 0x14
    30bc:	98 8b       	std	Y+16, r25	; 0x10
    30be:	8f 87       	std	Y+15, r24	; 0x0f
    30c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c2:	98 89       	ldd	r25, Y+16	; 0x10
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <HLCD_voidSendPulse+0xfa>
    30c8:	98 8b       	std	Y+16, r25	; 0x10
    30ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_CONTROL_PORT ,LCD_E_PIN ,LOW);
    30cc:	83 e0       	ldi	r24, 0x03	; 3
    30ce:	64 e0       	ldi	r22, 0x04	; 4
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	a0 e8       	ldi	r26, 0x80	; 128
    30dc:	bf e3       	ldi	r27, 0x3F	; 63
    30de:	8b 87       	std	Y+11, r24	; 0x0b
    30e0:	9c 87       	std	Y+12, r25	; 0x0c
    30e2:	ad 87       	std	Y+13, r26	; 0x0d
    30e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	4a ef       	ldi	r20, 0xFA	; 250
    30f4:	54 e4       	ldi	r21, 0x44	; 68
    30f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	8f 83       	std	Y+7, r24	; 0x07
    3100:	98 87       	std	Y+8, r25	; 0x08
    3102:	a9 87       	std	Y+9, r26	; 0x09
    3104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e8       	ldi	r20, 0x80	; 128
    3114:	5f e3       	ldi	r21, 0x3F	; 63
    3116:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    311a:	88 23       	and	r24, r24
    311c:	2c f4       	brge	.+10     	; 0x3128 <HLCD_voidSendPulse+0x15e>
		__ticks = 1;
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	3f c0       	rjmp	.+126    	; 0x31a6 <HLCD_voidSendPulse+0x1dc>
	else if (__tmp > 65535)
    3128:	6f 81       	ldd	r22, Y+7	; 0x07
    312a:	78 85       	ldd	r23, Y+8	; 0x08
    312c:	89 85       	ldd	r24, Y+9	; 0x09
    312e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	3f ef       	ldi	r19, 0xFF	; 255
    3134:	4f e7       	ldi	r20, 0x7F	; 127
    3136:	57 e4       	ldi	r21, 0x47	; 71
    3138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    313c:	18 16       	cp	r1, r24
    313e:	4c f5       	brge	.+82     	; 0x3192 <HLCD_voidSendPulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3140:	6b 85       	ldd	r22, Y+11	; 0x0b
    3142:	7c 85       	ldd	r23, Y+12	; 0x0c
    3144:	8d 85       	ldd	r24, Y+13	; 0x0d
    3146:	9e 85       	ldd	r25, Y+14	; 0x0e
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e2       	ldi	r20, 0x20	; 32
    314e:	51 e4       	ldi	r21, 0x41	; 65
    3150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9e 83       	std	Y+6, r25	; 0x06
    3166:	8d 83       	std	Y+5, r24	; 0x05
    3168:	0f c0       	rjmp	.+30     	; 0x3188 <HLCD_voidSendPulse+0x1be>
    316a:	88 ec       	ldi	r24, 0xC8	; 200
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <HLCD_voidSendPulse+0x1ac>
    317a:	9c 83       	std	Y+4, r25	; 0x04
    317c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	9e 83       	std	Y+6, r25	; 0x06
    3186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	9e 81       	ldd	r25, Y+6	; 0x06
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	69 f7       	brne	.-38     	; 0x316a <HLCD_voidSendPulse+0x1a0>
    3190:	14 c0       	rjmp	.+40     	; 0x31ba <HLCD_voidSendPulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3192:	6f 81       	ldd	r22, Y+7	; 0x07
    3194:	78 85       	ldd	r23, Y+8	; 0x08
    3196:	89 85       	ldd	r24, Y+9	; 0x09
    3198:	9a 85       	ldd	r25, Y+10	; 0x0a
    319a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	9e 83       	std	Y+6, r25	; 0x06
    31a4:	8d 83       	std	Y+5, r24	; 0x05
    31a6:	8d 81       	ldd	r24, Y+5	; 0x05
    31a8:	9e 81       	ldd	r25, Y+6	; 0x06
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <HLCD_voidSendPulse+0x1e8>
    31b6:	9a 83       	std	Y+2, r25	; 0x02
    31b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    31ba:	6c 96       	adiw	r28, 0x1c	; 28
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <HLCD_SendData>:

void HLCD_SendData(u8 data)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	0f 92       	push	r0
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RS_PIN ,HIGH);
    31d8:	83 e0       	ldi	r24, 0x03	; 3
    31da:	62 e0       	ldi	r22, 0x02	; 2
    31dc:	41 e0       	ldi	r20, 0x01	; 1
    31de:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT , LCD_RW_PIN ,LOW);
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	63 e0       	ldi	r22, 0x03	; 3
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_DATA_PORT ,data);
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	69 81       	ldd	r22, Y+1	; 0x01
    31f0:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_u8SetPortValue>

	HLCD_voidSendPulse();
    31f4:	0e 94 e5 17 	call	0x2fca	; 0x2fca <HLCD_voidSendPulse>
}
    31f8:	0f 90       	pop	r0
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <HLCD_PrintString>:

void HLCD_PrintString(u8 *string)
{
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	00 d0       	rcall	.+0      	; 0x3206 <HLCD_PrintString+0x6>
    3206:	00 d0       	rcall	.+0      	; 0x3208 <HLCD_PrintString+0x8>
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	9c 83       	std	Y+4, r25	; 0x04
    320e:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    3210:	1a 82       	std	Y+2, r1	; 0x02
    3212:	19 82       	std	Y+1, r1	; 0x01
    3214:	26 c0       	rjmp	.+76     	; 0x3262 <HLCD_PrintString+0x62>
	while (*string > 0) {
		count++;
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	01 96       	adiw	r24, 0x01	; 1
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
		HLCD_SendData(*string++);
    3220:	eb 81       	ldd	r30, Y+3	; 0x03
    3222:	fc 81       	ldd	r31, Y+4	; 0x04
    3224:	20 81       	ld	r18, Z
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	9c 83       	std	Y+4, r25	; 0x04
    322e:	8b 83       	std	Y+3, r24	; 0x03
    3230:	82 2f       	mov	r24, r18
    3232:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HLCD_SendData>
		if (count == 16) {
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	80 31       	cpi	r24, 0x10	; 16
    323c:	91 05       	cpc	r25, r1
    323e:	21 f4       	brne	.+8      	; 0x3248 <HLCD_PrintString+0x48>
			HLCD_voidSetDDRAM_Address(0x40);
    3240:	80 e4       	ldi	r24, 0x40	; 64
    3242:	0e 94 d5 17 	call	0x2faa	; 0x2faa <HLCD_voidSetDDRAM_Address>
    3246:	0d c0       	rjmp	.+26     	; 0x3262 <HLCD_PrintString+0x62>
		} else if (count == 32) {
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	9a 81       	ldd	r25, Y+2	; 0x02
    324c:	80 32       	cpi	r24, 0x20	; 32
    324e:	91 05       	cpc	r25, r1
    3250:	41 f4       	brne	.+16     	; 0x3262 <HLCD_PrintString+0x62>
			HLCD_voidCommand(LCD_Clear_Screen);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
			HLCD_voidSetDDRAM_Address(0);
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	0e 94 d5 17 	call	0x2faa	; 0x2faa <HLCD_voidSetDDRAM_Address>
			count = 0;
    325e:	1a 82       	std	Y+2, r1	; 0x02
    3260:	19 82       	std	Y+1, r1	; 0x01
}

void HLCD_PrintString(u8 *string)
{
	int count = 0;
	while (*string > 0) {
    3262:	eb 81       	ldd	r30, Y+3	; 0x03
    3264:	fc 81       	ldd	r31, Y+4	; 0x04
    3266:	80 81       	ld	r24, Z
    3268:	88 23       	and	r24, r24
    326a:	a9 f6       	brne	.-86     	; 0x3216 <HLCD_PrintString+0x16>
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_voidSetDDRAM_Address(0);
			count = 0;
		}
	}
}
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <LCD_display_number>:

void LCD_display_number(int number)
{
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
    3282:	27 97       	sbiw	r28, 0x07	; 7
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	de bf       	out	0x3e, r29	; 62
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	cd bf       	out	0x3d, r28	; 61
    328e:	9f 83       	std	Y+7, r25	; 0x07
    3290:	8e 83       	std	Y+6, r24	; 0x06
	char str[5];

	itoa(number , str ,10);
    3292:	8e 81       	ldd	r24, Y+6	; 0x06
    3294:	9f 81       	ldd	r25, Y+7	; 0x07
    3296:	9e 01       	movw	r18, r28
    3298:	2f 5f       	subi	r18, 0xFF	; 255
    329a:	3f 4f       	sbci	r19, 0xFF	; 255
    329c:	b9 01       	movw	r22, r18
    329e:	4a e0       	ldi	r20, 0x0A	; 10
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <itoa>
	HLCD_PrintString(str);
    32a6:	ce 01       	movw	r24, r28
    32a8:	01 96       	adiw	r24, 0x01	; 1
    32aa:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
}
    32ae:	27 96       	adiw	r28, 0x07	; 7
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <HLCD_GOTO_XY>:

void HLCD_GOTO_XY(u8 line, u8 position) {
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <HLCD_GOTO_XY+0x6>
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	89 83       	std	Y+1, r24	; 0x01
    32cc:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1) {
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	81 30       	cpi	r24, 0x01	; 1
    32d2:	39 f4       	brne	.+14     	; 0x32e2 <HLCD_GOTO_XY+0x22>
		if (position < 16 && position >= 0) {
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	80 31       	cpi	r24, 0x10	; 16
    32d8:	20 f4       	brcc	.+8      	; 0x32e2 <HLCD_GOTO_XY+0x22>
			HLCD_voidSetDDRAM_Address(LCD_FIRST_ROW + position-1);
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	81 58       	subi	r24, 0x81	; 129
    32de:	0e 94 d5 17 	call	0x2faa	; 0x2faa <HLCD_voidSetDDRAM_Address>
		}
	}
	if (line == 2) {
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	82 30       	cpi	r24, 0x02	; 2
    32e6:	39 f4       	brne	.+14     	; 0x32f6 <HLCD_GOTO_XY+0x36>
		if (position < 16 && position >= 0) {
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	80 31       	cpi	r24, 0x10	; 16
    32ec:	20 f4       	brcc	.+8      	; 0x32f6 <HLCD_GOTO_XY+0x36>
			HLCD_voidSetDDRAM_Address(LCD_SECOND_ROW + position -1);
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	81 54       	subi	r24, 0x41	; 65
    32f2:	0e 94 d5 17 	call	0x2faa	; 0x2faa <HLCD_voidSetDDRAM_Address>
		}
	}
}
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <Keypad_init>:
#include "KeyPade_interface.h"
#include "KeyPade_private.h"


void Keypad_init()
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(KeyPade_PORT , R1 ,INPUT);
    3308:	82 e0       	ldi	r24, 0x02	; 2
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R1 ,HIGH);
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R2 ,INPUT);
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	61 e0       	ldi	r22, 0x01	; 1
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R2 ,HIGH);
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R3 ,INPUT);
    3330:	82 e0       	ldi	r24, 0x02	; 2
    3332:	62 e0       	ldi	r22, 0x02	; 2
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R3 ,HIGH);
    333a:	82 e0       	ldi	r24, 0x02	; 2
    333c:	62 e0       	ldi	r22, 0x02	; 2
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , R4 ,INPUT);
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	63 e0       	ldi	r22, 0x03	; 3
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KeyPade_PORT , R4 ,HIGH);
    334e:	82 e0       	ldi	r24, 0x02	; 2
    3350:	63 e0       	ldi	r22, 0x03	; 3
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KeyPade_PORT , C1 ,OUTPUT);
    3358:	82 e0       	ldi	r24, 0x02	; 2
    335a:	64 e0       	ldi	r22, 0x04	; 4
    335c:	41 e0       	ldi	r20, 0x01	; 1
    335e:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C2 ,OUTPUT);
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	65 e0       	ldi	r22, 0x05	; 5
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C3 ,OUTPUT);
    336c:	82 e0       	ldi	r24, 0x02	; 2
    336e:	66 e0       	ldi	r22, 0x06	; 6
    3370:	41 e0       	ldi	r20, 0x01	; 1
    3372:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(KeyPade_PORT , C4 ,OUTPUT);
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	67 e0       	ldi	r22, 0x07	; 7
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>


}
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <Keypad_getkey>:

u8 Keypad_getkey(void)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <Keypad_getkey+0x6>
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
	for(u8 COL = 0 ; COL<4 ;COL++)
    3392:	1a 82       	std	Y+2, r1	; 0x02
    3394:	60 c0       	rjmp	.+192    	; 0x3456 <Keypad_getkey+0xd0>
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	fc 01       	movw	r30, r24
    33a2:	e8 5b       	subi	r30, 0xB8	; 184
    33a4:	fe 4f       	sbci	r31, 0xFE	; 254
    33a6:	80 81       	ld	r24, Z
    33a8:	91 81       	ldd	r25, Z+1	; 0x01
    33aa:	98 2f       	mov	r25, r24
    33ac:	82 e0       	ldi	r24, 0x02	; 2
    33ae:	69 2f       	mov	r22, r25
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

		for(u8 ROW = 0 ; ROW<4 ;ROW++)
    33b6:	19 82       	std	Y+1, r1	; 0x01
    33b8:	38 c0       	rjmp	.+112    	; 0x342a <Keypad_getkey+0xa4>
		{
			if(DIO_u8GetPinValue(KeyPade_PORT ,Key_padRow[ROW])==0)
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	88 2f       	mov	r24, r24
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	fc 01       	movw	r30, r24
    33c6:	e0 5c       	subi	r30, 0xC0	; 192
    33c8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ca:	80 81       	ld	r24, Z
    33cc:	91 81       	ldd	r25, Z+1	; 0x01
    33ce:	98 2f       	mov	r25, r24
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	69 2f       	mov	r22, r25
    33d4:	0e 94 1e 10 	call	0x203c	; 0x203c <DIO_u8GetPinValue>
    33d8:	88 23       	and	r24, r24
    33da:	21 f5       	brne	.+72     	; 0x3424 <Keypad_getkey+0x9e>
			{
				while(DIO_u8GetPinValue(KeyPade_PORT ,Key_padRow[ROW])==0);
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	88 2f       	mov	r24, r24
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	88 0f       	add	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	fc 01       	movw	r30, r24
    33e8:	e0 5c       	subi	r30, 0xC0	; 192
    33ea:	fe 4f       	sbci	r31, 0xFE	; 254
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	98 2f       	mov	r25, r24
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	69 2f       	mov	r22, r25
    33f6:	0e 94 1e 10 	call	0x203c	; 0x203c <DIO_u8GetPinValue>
    33fa:	88 23       	and	r24, r24
    33fc:	79 f3       	breq	.-34     	; 0x33dc <Keypad_getkey+0x56>
				return digit[ROW][COL] ;
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	48 2f       	mov	r20, r24
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	ca 01       	movw	r24, r20
    340c:	88 0f       	add	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	82 0f       	add	r24, r18
    3416:	93 1f       	adc	r25, r19
    3418:	fc 01       	movw	r30, r24
    341a:	e0 5b       	subi	r30, 0xB0	; 176
    341c:	fe 4f       	sbci	r31, 0xFE	; 254
    341e:	80 81       	ld	r24, Z
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	1f c0       	rjmp	.+62     	; 0x3462 <Keypad_getkey+0xdc>
{
	for(u8 COL = 0 ; COL<4 ;COL++)
	{
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,LOW);

		for(u8 ROW = 0 ; ROW<4 ;ROW++)
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	8f 5f       	subi	r24, 0xFF	; 255
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	84 30       	cpi	r24, 0x04	; 4
    342e:	28 f2       	brcs	.-118    	; 0x33ba <Keypad_getkey+0x34>
			{
				while(DIO_u8GetPinValue(KeyPade_PORT ,Key_padRow[ROW])==0);
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
    3430:	8a 81       	ldd	r24, Y+2	; 0x02
    3432:	88 2f       	mov	r24, r24
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	fc 01       	movw	r30, r24
    343c:	e8 5b       	subi	r30, 0xB8	; 184
    343e:	fe 4f       	sbci	r31, 0xFE	; 254
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	98 2f       	mov	r25, r24
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	69 2f       	mov	r22, r25
    344a:	41 e0       	ldi	r20, 0x01	; 1
    344c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

}

u8 Keypad_getkey(void)
{
	for(u8 COL = 0 ; COL<4 ;COL++)
    3450:	8a 81       	ldd	r24, Y+2	; 0x02
    3452:	8f 5f       	subi	r24, 0xFF	; 255
    3454:	8a 83       	std	Y+2, r24	; 0x02
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	84 30       	cpi	r24, 0x04	; 4
    345a:	08 f4       	brcc	.+2      	; 0x345e <Keypad_getkey+0xd8>
    345c:	9c cf       	rjmp	.-200    	; 0x3396 <Keypad_getkey+0x10>
				return digit[ROW][COL] ;
			}
		}
		DIO_u8SetPinValue(KeyPade_PORT , Key_padCol[COL] ,HIGH);
	}
	return -1;
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	8b 83       	std	Y+3, r24	; 0x03
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <ICU_Init>:
#include "ICU_private.h"
#include "ICU_config.h"
#include "ICU_interface.h"

void ICU_Init(void)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
#if ICU_EXTI_CHANNEL == EXTI0
	DIO_u8SetPinDirection(PORTD, PIN2, INPUT);
    3478:	84 e0       	ldi	r24, 0x04	; 4
    347a:	62 e0       	ldi	r22, 0x02	; 2
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTD, PIN3, INPUT);
#elif ICU_EXTI_CHANNEL == EXTI2
	DIO_u8SetPinDirection(PORTB, PIN2, INPUT);
#endif

	EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	63 e0       	ldi	r22, 0x03	; 3
    3486:	0e 94 77 0d 	call	0x1aee	; 0x1aee <EXTI_SetMode>
	EXTI_SetCallback(ICU_EXTI_CHANNEL, EXTI_Callback);
    348a:	28 e9       	ldi	r18, 0x98	; 152
    348c:	3a e1       	ldi	r19, 0x1A	; 26
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	b9 01       	movw	r22, r18
    3492:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <EXTI_SetCallback>
	EXTI_Enable(ICU_EXTI_CHANNEL);
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <EXTI_Enable>

	TIM1_voidInit();
    349c:	0e 94 25 08 	call	0x104a	; 0x104a <TIM1_voidInit>
	TIM1_ClearCounterValue();
    34a0:	0e 94 23 09 	call	0x1246	; 0x1246 <TIM1_ClearCounterValue>
}
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <ICU_GetOnTimeUs>:

u16 ICU_GetOnTimeUs(void)
{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
	return t_on;
    34b2:	80 91 81 01 	lds	r24, 0x0181
    34b6:	90 91 82 01 	lds	r25, 0x0182
}
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	08 95       	ret

000034c0 <ICU_GetPeriodUs>:

u16 ICU_GetPeriodUs(void)
{
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
	return period;
    34c8:	80 91 83 01 	lds	r24, 0x0183
    34cc:	90 91 84 01 	lds	r25, 0x0184
}
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <ICU_GetDutyCycle>:

u8 ICU_GetDutyCycle(void)
{
    34d6:	ef 92       	push	r14
    34d8:	ff 92       	push	r15
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
	return (((u32)t_on * 100) / period);
    34e6:	80 91 81 01 	lds	r24, 0x0181
    34ea:	90 91 82 01 	lds	r25, 0x0182
    34ee:	cc 01       	movw	r24, r24
    34f0:	a0 e0       	ldi	r26, 0x00	; 0
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	24 e6       	ldi	r18, 0x64	; 100
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	50 e0       	ldi	r21, 0x00	; 0
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <__mulsi3>
    3504:	7b 01       	movw	r14, r22
    3506:	8c 01       	movw	r16, r24
    3508:	80 91 83 01 	lds	r24, 0x0183
    350c:	90 91 84 01 	lds	r25, 0x0184
    3510:	9c 01       	movw	r18, r24
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	c8 01       	movw	r24, r16
    3518:	b7 01       	movw	r22, r14
    351a:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
    351e:	da 01       	movw	r26, r20
    3520:	c9 01       	movw	r24, r18
}
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
    352a:	ff 90       	pop	r15
    352c:	ef 90       	pop	r14
    352e:	08 95       	ret

00003530 <EXTI_Callback>:

void EXTI_Callback(void)
{
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	00 d0       	rcall	.+0      	; 0x3536 <EXTI_Callback+0x6>
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
	static u8 state = ICU_STATE_WAIT_FOR_RISINGEDGE1;

	switch(state)
    353a:	80 91 85 01 	lds	r24, 0x0185
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	3a 83       	std	Y+2, r19	; 0x02
    3544:	29 83       	std	Y+1, r18	; 0x01
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	81 30       	cpi	r24, 0x01	; 1
    354c:	91 05       	cpc	r25, r1
    354e:	99 f0       	breq	.+38     	; 0x3576 <EXTI_Callback+0x46>
    3550:	29 81       	ldd	r18, Y+1	; 0x01
    3552:	3a 81       	ldd	r19, Y+2	; 0x02
    3554:	22 30       	cpi	r18, 0x02	; 2
    3556:	31 05       	cpc	r19, r1
    3558:	e1 f0       	breq	.+56     	; 0x3592 <EXTI_Callback+0x62>
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	21 f5       	brne	.+72     	; 0x35aa <EXTI_Callback+0x7a>
	{
	case ICU_STATE_WAIT_FOR_RISINGEDGE1:
		TIM1_ClearCounterValue();
    3562:	0e 94 23 09 	call	0x1246	; 0x1246 <TIM1_ClearCounterValue>
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_FALLING);
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	62 e0       	ldi	r22, 0x02	; 2
    356a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <EXTI_SetMode>
		state = ICU_STATE_WAIT_FOR_FALLINGEDGE;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 93 85 01 	sts	0x0185, r24
    3574:	1a c0       	rjmp	.+52     	; 0x35aa <EXTI_Callback+0x7a>
		break;
	case ICU_STATE_WAIT_FOR_FALLINGEDGE:
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	63 e0       	ldi	r22, 0x03	; 3
    357a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <EXTI_SetMode>
		t_on = TIM1_GetCounterValueUs();
    357e:	0e 94 18 09 	call	0x1230	; 0x1230 <TIM1_GetCounterValueUs>
    3582:	90 93 82 01 	sts	0x0182, r25
    3586:	80 93 81 01 	sts	0x0181, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE2;
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	80 93 85 01 	sts	0x0185, r24
    3590:	0c c0       	rjmp	.+24     	; 0x35aa <EXTI_Callback+0x7a>
		break;
	case ICU_STATE_WAIT_FOR_RISINGEDGE2:
		EXTI_SetMode(ICU_EXTI_CHANNEL, EXTI_MODE_RISING);
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	63 e0       	ldi	r22, 0x03	; 3
    3596:	0e 94 77 0d 	call	0x1aee	; 0x1aee <EXTI_SetMode>
		period = TIM1_GetCounterValueUs();
    359a:	0e 94 18 09 	call	0x1230	; 0x1230 <TIM1_GetCounterValueUs>
    359e:	90 93 84 01 	sts	0x0184, r25
    35a2:	80 93 83 01 	sts	0x0183, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE1;
    35a6:	10 92 85 01 	sts	0x0185, r1
		break;
	}
}
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <EEPROM_Init>:
#include "EEPROM_config.h"
#include "EEPROM_interface.h"


void EEPROM_Init()
{
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTC , PIN0 , INPUT);
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	40 e0       	ldi	r20, 0x00	; 0
    35c2:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTC , PIN1 , INPUT);
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(PORTC , PIN0 , LOW);
    35d0:	83 e0       	ldi	r24, 0x03	; 3
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORTC , PIN1 , LOW);
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	61 e0       	ldi	r22, 0x01	; 1
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	I2C_InitMaster(10000);
    35e4:	80 e1       	ldi	r24, 0x10	; 16
    35e6:	97 e2       	ldi	r25, 0x27	; 39
    35e8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <I2C_InitMaster>

}
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <EEPROM_SendByte>:
u8 EEPROM_SendByte(u8 byte ,u16 Address)
{
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	27 97       	sbiw	r28, 0x07	; 7
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	8c 83       	std	Y+4, r24	; 0x04
    3608:	7e 83       	std	Y+6, r23	; 0x06
    360a:	6d 83       	std	Y+5, r22	; 0x05
	u8 state = 1 ;
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	8b 83       	std	Y+3, r24	; 0x03
	//1 0 1 0 A2 DA1 DA2  RW
	u8 DevAddress  =((0b1010<<4) |(EEPROM_A2_VAL <<3 )|(((Address >> 8)&3)<<1)&(~1));
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
    3614:	89 2f       	mov	r24, r25
    3616:	99 27       	eor	r25, r25
    3618:	83 70       	andi	r24, 0x03	; 3
    361a:	88 0f       	add	r24, r24
    361c:	80 6a       	ori	r24, 0xA0	; 160
    361e:	8a 83       	std	Y+2, r24	; 0x02
	u8 DaAdress = ((u8)Address );
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	89 83       	std	Y+1, r24	; 0x01

	//send start
	state = I2C_SendStart();
    3624:	0e 94 47 0c 	call	0x188e	; 0x188e <I2C_SendStart>
    3628:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_STA) return state ;
    362a:	8b 81       	ldd	r24, Y+3	; 0x03
    362c:	88 30       	cpi	r24, 0x08	; 8
    362e:	19 f0       	breq	.+6      	; 0x3636 <EEPROM_SendByte+0x44>
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	8f 83       	std	Y+7, r24	; 0x07
    3634:	2c c0       	rjmp	.+88     	; 0x368e <EEPROM_SendByte+0x9c>
	//send device address

	DevAddress >>= 1 ;
    3636:	8a 81       	ldd	r24, Y+2	; 0x02
    3638:	86 95       	lsr	r24
    363a:	8a 83       	std	Y+2, r24	; 0x02
	state = I2C_SendAddress(DevAddress , I2C_WRITE_OPP);
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	60 e0       	ldi	r22, 0x00	; 0
    3640:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <I2C_SendAddress>
    3644:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_ADDRESS_ACK)
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	88 31       	cpi	r24, 0x18	; 24
    364a:	29 f0       	breq	.+10     	; 0x3656 <EEPROM_SendByte+0x64>
	{
		I2C_SendStop();
    364c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>
		return state ;
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	8f 83       	std	Y+7, r24	; 0x07
    3654:	1c c0       	rjmp	.+56     	; 0x368e <EEPROM_SendByte+0x9c>
	}

	state = I2C_SendData(DaAdress);
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	0e 94 a3 0c 	call	0x1946	; 0x1946 <I2C_SendData>
    365c:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_DATA_ACK)
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
    3660:	88 32       	cpi	r24, 0x28	; 40
    3662:	29 f0       	breq	.+10     	; 0x366e <EEPROM_SendByte+0x7c>
	{
		I2C_SendStop();
    3664:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>
		return state ;
    3668:	8b 81       	ldd	r24, Y+3	; 0x03
    366a:	8f 83       	std	Y+7, r24	; 0x07
    366c:	10 c0       	rjmp	.+32     	; 0x368e <EEPROM_SendByte+0x9c>
	}

	state = I2C_SendData(byte);
    366e:	8c 81       	ldd	r24, Y+4	; 0x04
    3670:	0e 94 a3 0c 	call	0x1946	; 0x1946 <I2C_SendData>
    3674:	8b 83       	std	Y+3, r24	; 0x03
	if(state != I2C_STAT_DATA_ACK)
    3676:	8b 81       	ldd	r24, Y+3	; 0x03
    3678:	88 32       	cpi	r24, 0x28	; 40
    367a:	29 f0       	breq	.+10     	; 0x3686 <EEPROM_SendByte+0x94>
	{
		I2C_SendStop();
    367c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>
		return state ;
    3680:	8b 81       	ldd	r24, Y+3	; 0x03
    3682:	8f 83       	std	Y+7, r24	; 0x07
    3684:	04 c0       	rjmp	.+8      	; 0x368e <EEPROM_SendByte+0x9c>
	}

	I2C_SendStop();
    3686:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>

	return state ;
    368a:	8b 81       	ldd	r24, Y+3	; 0x03
    368c:	8f 83       	std	Y+7, r24	; 0x07
    368e:	8f 81       	ldd	r24, Y+7	; 0x07

}
    3690:	27 96       	adiw	r28, 0x07	; 7
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	08 95       	ret

000036a2 <EEPROM_SendFram>:

u8 EEPROM_SendFram(u8 byte ,u16 Address)
{
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	27 97       	sbiw	r28, 0x07	; 7
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	8d 83       	std	Y+5, r24	; 0x05
    36b8:	7f 83       	std	Y+7, r23	; 0x07
    36ba:	6e 83       	std	Y+6, r22	; 0x06
	u8 state =1;
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	8a 83       	std	Y+2, r24	; 0x02
	u8 DevAddress  =((0b1010<<4) |(EEPROM_A2_VAL <<3 )|(((Address >> 8)&3)<<1)&(~1));
    36c0:	8e 81       	ldd	r24, Y+6	; 0x06
    36c2:	9f 81       	ldd	r25, Y+7	; 0x07
    36c4:	89 2f       	mov	r24, r25
    36c6:	99 27       	eor	r25, r25
    36c8:	83 70       	andi	r24, 0x03	; 3
    36ca:	88 0f       	add	r24, r24
    36cc:	80 6a       	ori	r24, 0xA0	; 160
    36ce:	89 83       	std	Y+1, r24	; 0x01

	u8 arr[2] = {0} ;
    36d0:	1c 82       	std	Y+4, r1	; 0x04
    36d2:	1b 82       	std	Y+3, r1	; 0x03

	arr[0] = (u8)Address ;
    36d4:	8e 81       	ldd	r24, Y+6	; 0x06
    36d6:	8b 83       	std	Y+3, r24	; 0x03
	arr[1]= byte ;
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	8c 83       	std	Y+4, r24	; 0x04

	state = I2C_SendFram((DevAddress>>1) , arr ,2);
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	86 95       	lsr	r24
    36e0:	9e 01       	movw	r18, r28
    36e2:	2d 5f       	subi	r18, 0xFD	; 253
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	b9 01       	movw	r22, r18
    36e8:	42 e0       	ldi	r20, 0x02	; 2
    36ea:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <I2C_SendFram>
    36ee:	8a 83       	std	Y+2, r24	; 0x02

	return state ;
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36f2:	27 96       	adiw	r28, 0x07	; 7
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	cf 91       	pop	r28
    3700:	df 91       	pop	r29
    3702:	08 95       	ret

00003704 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 *buff ,u16 Address)
{
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	28 97       	sbiw	r28, 0x08	; 8
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	9d 83       	std	Y+5, r25	; 0x05
    371a:	8c 83       	std	Y+4, r24	; 0x04
    371c:	7f 83       	std	Y+7, r23	; 0x07
    371e:	6e 83       	std	Y+6, r22	; 0x06
	u8 state = 1 ;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	8b 83       	std	Y+3, r24	; 0x03
	//1 0 1 0 A2 DA1 DA2  RW
	u8 DevAddress  =((0b1010<<4) |(EEPROM_A2_VAL <<3 )|(((Address >> 8)&3)<<1)&(~1));
    3724:	8e 81       	ldd	r24, Y+6	; 0x06
    3726:	9f 81       	ldd	r25, Y+7	; 0x07
    3728:	89 2f       	mov	r24, r25
    372a:	99 27       	eor	r25, r25
    372c:	83 70       	andi	r24, 0x03	; 3
    372e:	88 0f       	add	r24, r24
    3730:	80 6a       	ori	r24, 0xA0	; 160
    3732:	8a 83       	std	Y+2, r24	; 0x02
	u8 DaAdress = ((u8)Address );
    3734:	8e 81       	ldd	r24, Y+6	; 0x06
    3736:	89 83       	std	Y+1, r24	; 0x01

	//send start
	I2C_SendStart();
    3738:	0e 94 47 0c 	call	0x188e	; 0x188e <I2C_SendStart>

	//send device address

	DevAddress >>= 1 ;
    373c:	8a 81       	ldd	r24, Y+2	; 0x02
    373e:	86 95       	lsr	r24
    3740:	8a 83       	std	Y+2, r24	; 0x02
	state = I2C_SendAddress(DevAddress , I2C_WRITE_OPP);
    3742:	8a 81       	ldd	r24, Y+2	; 0x02
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <I2C_SendAddress>
    374a:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_ADDRESS_ACK)
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	88 31       	cpi	r24, 0x18	; 24
    3750:	29 f0       	breq	.+10     	; 0x375c <EEPROM_ReadByte+0x58>
	{
		I2C_SendStop();
    3752:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>
		return state ;
    3756:	8b 81       	ldd	r24, Y+3	; 0x03
    3758:	88 87       	std	Y+8, r24	; 0x08
    375a:	22 c0       	rjmp	.+68     	; 0x37a0 <EEPROM_ReadByte+0x9c>
	}

	state = I2C_SendData(DaAdress);
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <I2C_SendData>
    3762:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_DATA_ACK)
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	88 32       	cpi	r24, 0x28	; 40
    3768:	29 f0       	breq	.+10     	; 0x3774 <EEPROM_ReadByte+0x70>
	{
		I2C_SendStop();
    376a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>
		return state ;
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	88 87       	std	Y+8, r24	; 0x08
    3772:	16 c0       	rjmp	.+44     	; 0x37a0 <EEPROM_ReadByte+0x9c>
	}

	//DevAddress >>= 1 ;

	state = I2C_SendRepStart();
    3774:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <I2C_SendRepStart>
    3778:	8b 83       	std	Y+3, r24	; 0x03

	if(state != I2C_STAT_STA) return state ;
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	88 30       	cpi	r24, 0x08	; 8
    377e:	19 f0       	breq	.+6      	; 0x3786 <EEPROM_ReadByte+0x82>
    3780:	8b 81       	ldd	r24, Y+3	; 0x03
    3782:	88 87       	std	Y+8, r24	; 0x08
    3784:	0d c0       	rjmp	.+26     	; 0x37a0 <EEPROM_ReadByte+0x9c>


	state = I2C_SendAddress(DevAddress , I2C_READ_OPP);
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	61 e0       	ldi	r22, 0x01	; 1
    378a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <I2C_SendAddress>
    378e:	8b 83       	std	Y+3, r24	; 0x03


	*buff = I2C_ReceiveWithoutAck();
    3790:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_ReceiveWithoutAck>
    3794:	ec 81       	ldd	r30, Y+4	; 0x04
    3796:	fd 81       	ldd	r31, Y+5	; 0x05
    3798:	80 83       	st	Z, r24

	I2C_SendStop();
    379a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SendStop>

	return 0 ;
    379e:	18 86       	std	Y+8, r1	; 0x08
    37a0:	88 85       	ldd	r24, Y+8	; 0x08

}
    37a2:	28 96       	adiw	r28, 0x08	; 8
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	08 95       	ret

000037b4 <Button_voidInit>:
#include "Button_private.h"
#include "Button_config.h"
#include "Button_interface.h"

void Button_voidInit()
{
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(BUTTON1_PORT, BUTTON1_PIN, INPUT);
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	63 e0       	ldi	r22, 0x03	; 3
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
	DIO_PULLUP_PIN(BUTTON1_PORT, BUTTON1_PIN);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	63 e0       	ldi	r22, 0x03	; 3
    37ca:	41 e0       	ldi	r20, 0x01	; 1
    37cc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
}
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <Button_u8GetStatus>:

u8 Button_u8GetStatus(u8 L_u8ButtonNo)
{
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	00 d0       	rcall	.+0      	; 0x37dc <Button_u8GetStatus+0x6>
    37dc:	0f 92       	push	r0
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
    37e2:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8ButtonNo)
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	88 2f       	mov	r24, r24
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	81 30       	cpi	r24, 0x01	; 1
    37ec:	91 05       	cpc	r25, r1
    37ee:	69 f4       	brne	.+26     	; 0x380a <Button_u8GetStatus+0x34>
	{
	case BUTTON1: return DIO_u8GetPinValue(BUTTON1_PORT, BUTTON1_PIN)? BUTTON_RELEASED:BUTTON_PRESSED;
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	63 e0       	ldi	r22, 0x03	; 3
    37f4:	0e 94 1e 10 	call	0x203c	; 0x203c <DIO_u8GetPinValue>
    37f8:	8b 83       	std	Y+3, r24	; 0x03
    37fa:	8b 81       	ldd	r24, Y+3	; 0x03
    37fc:	88 23       	and	r24, r24
    37fe:	11 f0       	breq	.+4      	; 0x3804 <Button_u8GetStatus+0x2e>
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	8b 83       	std	Y+3, r24	; 0x03
    3804:	8b 81       	ldd	r24, Y+3	; 0x03
    3806:	8a 83       	std	Y+2, r24	; 0x02
    3808:	02 c0       	rjmp	.+4      	; 0x380e <Button_u8GetStatus+0x38>
	}
	return DIO_ERROR;
    380a:	8f ef       	ldi	r24, 0xFF	; 255
    380c:	8a 83       	std	Y+2, r24	; 0x02
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <Button_voidWaitForButton>:

void Button_voidWaitForButton(u8 L_u8ButtonNo)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	0f 92       	push	r0
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8ButtonNo)
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	88 2f       	mov	r24, r24
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	81 30       	cpi	r24, 0x01	; 1
    3830:	91 05       	cpc	r25, r1
    3832:	31 f4       	brne	.+12     	; 0x3840 <Button_voidWaitForButton+0x24>
	{
	case BUTTON1: while(DIO_u8GetPinValue(BUTTON1_PORT, BUTTON1_PIN) == HIGH);break;
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	63 e0       	ldi	r22, 0x03	; 3
    3838:	0e 94 1e 10 	call	0x203c	; 0x203c <DIO_u8GetPinValue>
    383c:	81 30       	cpi	r24, 0x01	; 1
    383e:	d1 f3       	breq	.-12     	; 0x3834 <Button_voidWaitForButton+0x18>
	}
}
    3840:	0f 90       	pop	r0
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <Bluetooth_Init>:
#include "Bluetooth_interface.h"
#include "Bluetooth_private.h"


void Bluetooth_Init(void)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	2c 97       	sbiw	r28, 0x0c	; 12
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
	UART_config UART_CFG ;
	UART_CFG.BaudRate  = UART_BaudRate_9600 ;
    385c:	80 e8       	ldi	r24, 0x80	; 128
    385e:	95 e2       	ldi	r25, 0x25	; 37
    3860:	a0 e0       	ldi	r26, 0x00	; 0
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	8a 83       	std	Y+2, r24	; 0x02
    3866:	9b 83       	std	Y+3, r25	; 0x03
    3868:	ac 83       	std	Y+4, r26	; 0x04
    386a:	bd 83       	std	Y+5, r27	; 0x05
	UART_CFG.data_size = UART_data_Size_8B ;
    386c:	84 e0       	ldi	r24, 0x04	; 4
    386e:	8e 83       	std	Y+6, r24	; 0x06
	UART_CFG.IRQ_Enable= UART_Interrupt_Enable_NONE ;
    3870:	19 86       	std	Y+9, r1	; 0x09
	UART_CFG.P_IRQ_CallBack = NULL ;
    3872:	1c 86       	std	Y+12, r1	; 0x0c
    3874:	1b 86       	std	Y+11, r1	; 0x0b
	UART_CFG.parity =UART_Parity_NONE ;
    3876:	1f 82       	std	Y+7, r1	; 0x07
	UART_CFG.Speed_Mode = UART_Speed_Mode_Normal ;
    3878:	1a 86       	std	Y+10, r1	; 0x0a
	UART_CFG.StopBit = UART_StopBits_1 ;
    387a:	18 86       	std	Y+8, r1	; 0x08
	UART_CFG.USART_Mode = UART_Mode_TX_AND_RX ;
    387c:	88 e1       	ldi	r24, 0x18	; 24
    387e:	89 83       	std	Y+1, r24	; 0x01
    MCAL_UART_init(UART1 , &UART_CFG);
    3880:	89 e2       	ldi	r24, 0x29	; 41
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	9e 01       	movw	r18, r28
    3886:	2f 5f       	subi	r18, 0xFF	; 255
    3888:	3f 4f       	sbci	r19, 0xFF	; 255
    388a:	b9 01       	movw	r22, r18
    388c:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_UART_init>

}
    3890:	2c 96       	adiw	r28, 0x0c	; 12
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <Bluetooth_SendData>:
void Bluetooth_SendData(u8 data)
{
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	0f 92       	push	r0
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	89 83       	std	Y+1, r24	; 0x01
	MCAL_UART_Send(data);
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	0e 94 9c 06 	call	0xd38	; 0xd38 <MCAL_UART_Send>
}
    38b4:	0f 90       	pop	r0
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <Bluetooth_RecieveData>:
u8 Bluetooth_RecieveData()
{
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
	return MCAL_UART_Receive();
    38c4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <MCAL_UART_Receive>
}
    38c8:	cf 91       	pop	r28
    38ca:	df 91       	pop	r29
    38cc:	08 95       	ret

000038ce <BUZZER_voidInit>:

#include "BUZZER_interface.h"
#include "BUZZER_private.h"

void BUZZER_voidInit(u8 L_u8Buzzer)
{
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <BUZZER_voidInit+0x6>
    38d4:	0f 92       	push	r0
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8Buzzer)
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	28 2f       	mov	r18, r24
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	3b 83       	std	Y+3, r19	; 0x03
    38e4:	2a 83       	std	Y+2, r18	; 0x02
    38e6:	8a 81       	ldd	r24, Y+2	; 0x02
    38e8:	9b 81       	ldd	r25, Y+3	; 0x03
    38ea:	81 30       	cpi	r24, 0x01	; 1
    38ec:	91 05       	cpc	r25, r1
    38ee:	31 f0       	breq	.+12     	; 0x38fc <BUZZER_voidInit+0x2e>
    38f0:	2a 81       	ldd	r18, Y+2	; 0x02
    38f2:	3b 81       	ldd	r19, Y+3	; 0x03
    38f4:	22 30       	cpi	r18, 0x02	; 2
    38f6:	31 05       	cpc	r19, r1
    38f8:	39 f0       	breq	.+14     	; 0x3908 <BUZZER_voidInit+0x3a>
    38fa:	0b c0       	rjmp	.+22     	; 0x3912 <BUZZER_voidInit+0x44>
	{
	case BUZZER1 :DIO_u8SetPinDirection(BUZZER1_PORT, BUZZER1_PIN, OUTPUT); break ;
    38fc:	84 e0       	ldi	r24, 0x04	; 4
    38fe:	62 e0       	ldi	r22, 0x02	; 2
    3900:	41 e0       	ldi	r20, 0x01	; 1
    3902:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>
    3906:	05 c0       	rjmp	.+10     	; 0x3912 <BUZZER_voidInit+0x44>
	case BUZZER2 :DIO_u8SetPinDirection(BUZZER2_PORT, BUZZER2_PIN, OUTPUT); break ;
    3908:	84 e0       	ldi	r24, 0x04	; 4
    390a:	63 e0       	ldi	r22, 0x03	; 3
    390c:	41 e0       	ldi	r20, 0x01	; 1
    390e:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_u8SetPinDirection>

	}
}
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	08 95       	ret

0000391e <BUZZER_voidSetBuzzerHigh>:
void BUZZER_voidSetBuzzerHigh(u8 L_u8Buzzer)
{
    391e:	df 93       	push	r29
    3920:	cf 93       	push	r28
    3922:	00 d0       	rcall	.+0      	; 0x3924 <BUZZER_voidSetBuzzerHigh+0x6>
    3924:	0f 92       	push	r0
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8Buzzer){
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	3b 83       	std	Y+3, r19	; 0x03
    3934:	2a 83       	std	Y+2, r18	; 0x02
    3936:	8a 81       	ldd	r24, Y+2	; 0x02
    3938:	9b 81       	ldd	r25, Y+3	; 0x03
    393a:	81 30       	cpi	r24, 0x01	; 1
    393c:	91 05       	cpc	r25, r1
    393e:	31 f0       	breq	.+12     	; 0x394c <BUZZER_voidSetBuzzerHigh+0x2e>
    3940:	2a 81       	ldd	r18, Y+2	; 0x02
    3942:	3b 81       	ldd	r19, Y+3	; 0x03
    3944:	22 30       	cpi	r18, 0x02	; 2
    3946:	31 05       	cpc	r19, r1
    3948:	39 f0       	breq	.+14     	; 0x3958 <BUZZER_voidSetBuzzerHigh+0x3a>
    394a:	0b c0       	rjmp	.+22     	; 0x3962 <BUZZER_voidSetBuzzerHigh+0x44>
	case BUZZER1: DIO_u8SetPinValue(BUZZER1_PORT, BUZZER1_PIN, HIGH); break;
    394c:	84 e0       	ldi	r24, 0x04	; 4
    394e:	62 e0       	ldi	r22, 0x02	; 2
    3950:	41 e0       	ldi	r20, 0x01	; 1
    3952:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    3956:	05 c0       	rjmp	.+10     	; 0x3962 <BUZZER_voidSetBuzzerHigh+0x44>
	case BUZZER2: DIO_u8SetPinValue(BUZZER2_PORT, BUZZER2_PIN, HIGH); break;
    3958:	84 e0       	ldi	r24, 0x04	; 4
    395a:	63 e0       	ldi	r22, 0x03	; 3
    395c:	41 e0       	ldi	r20, 0x01	; 1
    395e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	}
}
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <BUZZER_voidSetBuzzerLow>:
void BUZZER_voidSetBuzzerLow(u8 L_u8Buzzer)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	00 d0       	rcall	.+0      	; 0x3974 <BUZZER_voidSetBuzzerLow+0x6>
    3974:	0f 92       	push	r0
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8Buzzer){
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	3b 83       	std	Y+3, r19	; 0x03
    3984:	2a 83       	std	Y+2, r18	; 0x02
    3986:	8a 81       	ldd	r24, Y+2	; 0x02
    3988:	9b 81       	ldd	r25, Y+3	; 0x03
    398a:	81 30       	cpi	r24, 0x01	; 1
    398c:	91 05       	cpc	r25, r1
    398e:	31 f0       	breq	.+12     	; 0x399c <BUZZER_voidSetBuzzerLow+0x2e>
    3990:	2a 81       	ldd	r18, Y+2	; 0x02
    3992:	3b 81       	ldd	r19, Y+3	; 0x03
    3994:	22 30       	cpi	r18, 0x02	; 2
    3996:	31 05       	cpc	r19, r1
    3998:	39 f0       	breq	.+14     	; 0x39a8 <BUZZER_voidSetBuzzerLow+0x3a>
    399a:	0b c0       	rjmp	.+22     	; 0x39b2 <BUZZER_voidSetBuzzerLow+0x44>
	case BUZZER1: DIO_u8SetPinValue(BUZZER1_PORT, BUZZER1_PIN, LOW); break;
    399c:	84 e0       	ldi	r24, 0x04	; 4
    399e:	62 e0       	ldi	r22, 0x02	; 2
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>
    39a6:	05 c0       	rjmp	.+10     	; 0x39b2 <BUZZER_voidSetBuzzerLow+0x44>
	case BUZZER2: DIO_u8SetPinValue(BUZZER2_PORT, BUZZER2_PIN, LOW); break;
    39a8:	84 e0       	ldi	r24, 0x04	; 4
    39aa:	63 e0       	ldi	r22, 0x03	; 3
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8SetPinValue>

	}
}
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	cf 91       	pop	r28
    39ba:	df 91       	pop	r29
    39bc:	08 95       	ret

000039be <Get_Password>:


u8  byte= 0 ,address = 0;
u8 data ;
void Get_Password()
{
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	0f 92       	push	r0
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
	byte = 0 ;
    39c8:	10 92 8a 01 	sts	0x018A, r1
	PASSWORD = 0 ;
    39cc:	10 92 86 01 	sts	0x0186, r1
    39d0:	10 92 87 01 	sts	0x0187, r1
    39d4:	10 92 88 01 	sts	0x0188, r1
    39d8:	10 92 89 01 	sts	0x0189, r1
	u8 data ;
	address++ ;
    39dc:	80 91 8b 01 	lds	r24, 0x018B
    39e0:	8f 5f       	subi	r24, 0xFF	; 255
    39e2:	80 93 8b 01 	sts	0x018B, r24
    39e6:	51 c0       	rjmp	.+162    	; 0x3a8a <Get_Password+0xcc>
	while(data != '='&& data !=0x0D)
	{
		//data = Keypad_getkey();
		data = Bluetooth_RecieveData();
    39e8:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <Bluetooth_RecieveData>
    39ec:	89 83       	std	Y+1, r24	; 0x01
		if(data != -1 && data != '=' && data !=0x0D)
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	8d 33       	cpi	r24, 0x3D	; 61
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <Get_Password+0x38>
    39f4:	4a c0       	rjmp	.+148    	; 0x3a8a <Get_Password+0xcc>
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	8d 30       	cpi	r24, 0x0D	; 13
    39fa:	09 f4       	brne	.+2      	; 0x39fe <Get_Password+0x40>
    39fc:	46 c0       	rjmp	.+140    	; 0x3a8a <Get_Password+0xcc>
		{
			HLCD_SendData('*');
    39fe:	8a e2       	ldi	r24, 0x2A	; 42
    3a00:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HLCD_SendData>
			data-=48 ;
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	80 53       	subi	r24, 0x30	; 48
    3a08:	89 83       	std	Y+1, r24	; 0x01
			EEPROM_SendByte(data ,address);
    3a0a:	80 91 8b 01 	lds	r24, 0x018B
    3a0e:	28 2f       	mov	r18, r24
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	b9 01       	movw	r22, r18
    3a16:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <EEPROM_SendByte>
			PASSWORD+=data ;
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	28 2f       	mov	r18, r24
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e0       	ldi	r20, 0x00	; 0
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	80 91 86 01 	lds	r24, 0x0186
    3a28:	90 91 87 01 	lds	r25, 0x0187
    3a2c:	a0 91 88 01 	lds	r26, 0x0188
    3a30:	b0 91 89 01 	lds	r27, 0x0189
    3a34:	82 0f       	add	r24, r18
    3a36:	93 1f       	adc	r25, r19
    3a38:	a4 1f       	adc	r26, r20
    3a3a:	b5 1f       	adc	r27, r21
    3a3c:	80 93 86 01 	sts	0x0186, r24
    3a40:	90 93 87 01 	sts	0x0187, r25
    3a44:	a0 93 88 01 	sts	0x0188, r26
    3a48:	b0 93 89 01 	sts	0x0189, r27
			PASSWORD*=10;
    3a4c:	80 91 86 01 	lds	r24, 0x0186
    3a50:	90 91 87 01 	lds	r25, 0x0187
    3a54:	a0 91 88 01 	lds	r26, 0x0188
    3a58:	b0 91 89 01 	lds	r27, 0x0189
    3a5c:	2a e0       	ldi	r18, 0x0A	; 10
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e0       	ldi	r20, 0x00	; 0
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <__mulsi3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	80 93 86 01 	sts	0x0186, r24
    3a74:	90 93 87 01 	sts	0x0187, r25
    3a78:	a0 93 88 01 	sts	0x0188, r26
    3a7c:	b0 93 89 01 	sts	0x0189, r27
			address++ ;
    3a80:	80 91 8b 01 	lds	r24, 0x018B
    3a84:	8f 5f       	subi	r24, 0xFF	; 255
    3a86:	80 93 8b 01 	sts	0x018B, r24
{
	byte = 0 ;
	PASSWORD = 0 ;
	u8 data ;
	address++ ;
	while(data != '='&& data !=0x0D)
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	8d 33       	cpi	r24, 0x3D	; 61
    3a8e:	21 f0       	breq	.+8      	; 0x3a98 <Get_Password+0xda>
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	8d 30       	cpi	r24, 0x0D	; 13
    3a94:	09 f0       	breq	.+2      	; 0x3a98 <Get_Password+0xda>
    3a96:	a8 cf       	rjmp	.-176    	; 0x39e8 <Get_Password+0x2a>
			PASSWORD+=data ;
			PASSWORD*=10;
			address++ ;
		}
	}
	PASSWORD/=10 ;
    3a98:	80 91 86 01 	lds	r24, 0x0186
    3a9c:	90 91 87 01 	lds	r25, 0x0187
    3aa0:	a0 91 88 01 	lds	r26, 0x0188
    3aa4:	b0 91 89 01 	lds	r27, 0x0189
    3aa8:	2a e0       	ldi	r18, 0x0A	; 10
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e0       	ldi	r20, 0x00	; 0
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	cd 01       	movw	r24, r26
    3ab4:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
    3ab8:	da 01       	movw	r26, r20
    3aba:	c9 01       	movw	r24, r18
    3abc:	80 93 86 01 	sts	0x0186, r24
    3ac0:	90 93 87 01 	sts	0x0187, r25
    3ac4:	a0 93 88 01 	sts	0x0188, r26
    3ac8:	b0 93 89 01 	sts	0x0189, r27
	EEPROM_SendByte(0xFF ,address);
    3acc:	80 91 8b 01 	lds	r24, 0x018B
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	8f ef       	ldi	r24, 0xFF	; 255
    3ad6:	b9 01       	movw	r22, r18
    3ad8:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <EEPROM_SendByte>
}
    3adc:	0f 90       	pop	r0
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <Get_name>:

void Get_name()
{
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	0f 92       	push	r0
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
	address = 0 ;
    3aee:	10 92 8b 01 	sts	0x018B, r1
	byte = 0 ;
    3af2:	10 92 8a 01 	sts	0x018A, r1
	PASSWORD = 0 ;
    3af6:	10 92 86 01 	sts	0x0186, r1
    3afa:	10 92 87 01 	sts	0x0187, r1
    3afe:	10 92 88 01 	sts	0x0188, r1
    3b02:	10 92 89 01 	sts	0x0189, r1
	u8 index=0 ;
    3b06:	19 82       	std	Y+1, r1	; 0x01
    3b08:	2b c0       	rjmp	.+86     	; 0x3b60 <Get_name+0x7c>
	while(data != '='&& data !=0x0D)
	{

		//data = Keypad_getkey();
		data = Bluetooth_RecieveData();
    3b0a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <Bluetooth_RecieveData>
    3b0e:	80 93 b4 01 	sts	0x01B4, r24
		if(data != -1 && data != '=' && data !=0x0D)
    3b12:	80 91 b4 01 	lds	r24, 0x01B4
    3b16:	8d 33       	cpi	r24, 0x3D	; 61
    3b18:	19 f1       	breq	.+70     	; 0x3b60 <Get_name+0x7c>
    3b1a:	80 91 b4 01 	lds	r24, 0x01B4
    3b1e:	8d 30       	cpi	r24, 0x0D	; 13
    3b20:	f9 f0       	breq	.+62     	; 0x3b60 <Get_name+0x7c>
		{
			HLCD_SendData(data);
    3b22:	80 91 b4 01 	lds	r24, 0x01B4
    3b26:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HLCD_SendData>
			EEPROM_SendByte(data ,address);
    3b2a:	90 91 b4 01 	lds	r25, 0x01B4
    3b2e:	80 91 8b 01 	lds	r24, 0x018B
    3b32:	28 2f       	mov	r18, r24
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	89 2f       	mov	r24, r25
    3b38:	b9 01       	movw	r22, r18
    3b3a:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <EEPROM_SendByte>
			NAME[index] = data ;
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	88 2f       	mov	r24, r24
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	20 91 b4 01 	lds	r18, 0x01B4
    3b48:	fc 01       	movw	r30, r24
    3b4a:	e0 56       	subi	r30, 0x60	; 96
    3b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4e:	20 83       	st	Z, r18
			address++ ;
    3b50:	80 91 8b 01 	lds	r24, 0x018B
    3b54:	8f 5f       	subi	r24, 0xFF	; 255
    3b56:	80 93 8b 01 	sts	0x018B, r24
			index++ ;
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	89 83       	std	Y+1, r24	; 0x01
{
	address = 0 ;
	byte = 0 ;
	PASSWORD = 0 ;
	u8 index=0 ;
	while(data != '='&& data !=0x0D)
    3b60:	80 91 b4 01 	lds	r24, 0x01B4
    3b64:	8d 33       	cpi	r24, 0x3D	; 61
    3b66:	21 f0       	breq	.+8      	; 0x3b70 <Get_name+0x8c>
    3b68:	80 91 b4 01 	lds	r24, 0x01B4
    3b6c:	8d 30       	cpi	r24, 0x0D	; 13
    3b6e:	69 f6       	brne	.-102    	; 0x3b0a <Get_name+0x26>
			NAME[index] = data ;
			address++ ;
			index++ ;
		}
	}
	NAME[index] = '\0' ;
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	88 2f       	mov	r24, r24
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	fc 01       	movw	r30, r24
    3b78:	e0 56       	subi	r30, 0x60	; 96
    3b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7c:	10 82       	st	Z, r1
	EEPROM_SendByte(0xFF ,address);
    3b7e:	80 91 8b 01 	lds	r24, 0x018B
    3b82:	28 2f       	mov	r18, r24
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	8f ef       	ldi	r24, 0xFF	; 255
    3b88:	b9 01       	movw	r22, r18
    3b8a:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <EEPROM_SendByte>
}
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <main>:
int main()
{
    3b96:	0f 93       	push	r16
    3b98:	1f 93       	push	r17
    3b9a:	df 93       	push	r29
    3b9c:	cf 93       	push	r28
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	cc 58       	subi	r28, 0x8C	; 140
    3ba4:	d0 40       	sbci	r29, 0x00	; 0
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61

	u8 count=3 ,flage = 0;
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e9 58       	subi	r30, 0x89	; 137
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	83 e0       	ldi	r24, 0x03	; 3
    3bb8:	80 83       	st	Z, r24
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ea 58       	subi	r30, 0x8A	; 138
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	10 82       	st	Z, r1
	u32 input_Pass =0;
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	ee 58       	subi	r30, 0x8E	; 142
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	10 82       	st	Z, r1
    3bca:	11 82       	std	Z+1, r1	; 0x01
    3bcc:	12 82       	std	Z+2, r1	; 0x02
    3bce:	13 82       	std	Z+3, r1	; 0x03
	u8 input_name[20];
	u8 index=0 ;
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	ef 58       	subi	r30, 0x8F	; 143
    3bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd6:	10 82       	st	Z, r1

	HLCD_voidinit();
    3bd8:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HLCD_voidinit>
	Keypad_init();
    3bdc:	0e 94 80 19 	call	0x3300	; 0x3300 <Keypad_init>
	Servo_Init();
    3be0:	0e 94 8c 13 	call	0x2718	; 0x2718 <Servo_Init>
	EEPROM_Init();
    3be4:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <EEPROM_Init>
	Bluetooth_Init();
    3be8:	0e 94 24 1c 	call	0x3848	; 0x3848 <Bluetooth_Init>
	BUZZER_voidInit(BUZZER1);
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	0e 94 67 1c 	call	0x38ce	; 0x38ce <BUZZER_voidInit>
	LED_voidInit(LED1);
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LED_voidInit>
    LED_voidInit(LED2);
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LED_voidInit>

	Servo_SetAngle(SERVO1 ,0);
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	60 e0       	ldi	r22, 0x00	; 0
    3c02:	0e 94 a1 13 	call	0x2742	; 0x2742 <Servo_SetAngle>
	HLCD_GOTO_XY(1,1);
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	61 e0       	ldi	r22, 0x01	; 1
    3c0a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
	HLCD_PrintString(" Wellcome");
    3c0e:	80 e6       	ldi	r24, 0x60	; 96
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
    3c16:	fe 01       	movw	r30, r28
    3c18:	e3 59       	subi	r30, 0x93	; 147
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	aa e7       	ldi	r26, 0x7A	; 122
    3c22:	b4 e4       	ldi	r27, 0x44	; 68
    3c24:	80 83       	st	Z, r24
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	a2 83       	std	Z+2, r26	; 0x02
    3c2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2c:	8e 01       	movw	r16, r28
    3c2e:	07 59       	subi	r16, 0x97	; 151
    3c30:	1f 4f       	sbci	r17, 0xFF	; 255
    3c32:	fe 01       	movw	r30, r28
    3c34:	e3 59       	subi	r30, 0x93	; 147
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	60 81       	ld	r22, Z
    3c3a:	71 81       	ldd	r23, Z+1	; 0x01
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	93 81       	ldd	r25, Z+3	; 0x03
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	4a ef       	ldi	r20, 0xFA	; 250
    3c46:	54 e4       	ldi	r21, 0x44	; 68
    3c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	f8 01       	movw	r30, r16
    3c52:	80 83       	st	Z, r24
    3c54:	91 83       	std	Z+1, r25	; 0x01
    3c56:	a2 83       	std	Z+2, r26	; 0x02
    3c58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e7 59       	subi	r30, 0x97	; 151
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	40 e8       	ldi	r20, 0x80	; 128
    3c6e:	5f e3       	ldi	r21, 0x3F	; 63
    3c70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c74:	88 23       	and	r24, r24
    3c76:	44 f4       	brge	.+16     	; 0x3c88 <main+0xf2>
		__ticks = 1;
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e9 59       	subi	r30, 0x99	; 153
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
    3c86:	64 c0       	rjmp	.+200    	; 0x3d50 <main+0x1ba>
	else if (__tmp > 65535)
    3c88:	fe 01       	movw	r30, r28
    3c8a:	e7 59       	subi	r30, 0x97	; 151
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	60 81       	ld	r22, Z
    3c90:	71 81       	ldd	r23, Z+1	; 0x01
    3c92:	82 81       	ldd	r24, Z+2	; 0x02
    3c94:	93 81       	ldd	r25, Z+3	; 0x03
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	3f ef       	ldi	r19, 0xFF	; 255
    3c9a:	4f e7       	ldi	r20, 0x7F	; 127
    3c9c:	57 e4       	ldi	r21, 0x47	; 71
    3c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ca2:	18 16       	cp	r1, r24
    3ca4:	0c f0       	brlt	.+2      	; 0x3ca8 <main+0x112>
    3ca6:	43 c0       	rjmp	.+134    	; 0x3d2e <main+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca8:	fe 01       	movw	r30, r28
    3caa:	e3 59       	subi	r30, 0x93	; 147
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	60 81       	ld	r22, Z
    3cb0:	71 81       	ldd	r23, Z+1	; 0x01
    3cb2:	82 81       	ldd	r24, Z+2	; 0x02
    3cb4:	93 81       	ldd	r25, Z+3	; 0x03
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e2       	ldi	r20, 0x20	; 32
    3cbc:	51 e4       	ldi	r21, 0x41	; 65
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	8e 01       	movw	r16, r28
    3cc8:	09 59       	subi	r16, 0x99	; 153
    3cca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ccc:	bc 01       	movw	r22, r24
    3cce:	cd 01       	movw	r24, r26
    3cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	f8 01       	movw	r30, r16
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	80 83       	st	Z, r24
    3cde:	1f c0       	rjmp	.+62     	; 0x3d1e <main+0x188>
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	eb 59       	subi	r30, 0x9B	; 155
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	88 ec       	ldi	r24, 0xC8	; 200
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
    3cee:	fe 01       	movw	r30, r28
    3cf0:	eb 59       	subi	r30, 0x9B	; 155
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	80 81       	ld	r24, Z
    3cf6:	91 81       	ldd	r25, Z+1	; 0x01
    3cf8:	01 97       	sbiw	r24, 0x01	; 1
    3cfa:	f1 f7       	brne	.-4      	; 0x3cf8 <main+0x162>
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	eb 59       	subi	r30, 0x9B	; 155
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d06:	de 01       	movw	r26, r28
    3d08:	a9 59       	subi	r26, 0x99	; 153
    3d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	e9 59       	subi	r30, 0x99	; 153
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	11 96       	adiw	r26, 0x01	; 1
    3d1a:	9c 93       	st	X, r25
    3d1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1e:	fe 01       	movw	r30, r28
    3d20:	e9 59       	subi	r30, 0x99	; 153
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	80 81       	ld	r24, Z
    3d26:	91 81       	ldd	r25, Z+1	; 0x01
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	d1 f6       	brne	.-76     	; 0x3ce0 <main+0x14a>
    3d2c:	27 c0       	rjmp	.+78     	; 0x3d7c <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2e:	8e 01       	movw	r16, r28
    3d30:	09 59       	subi	r16, 0x99	; 153
    3d32:	1f 4f       	sbci	r17, 0xFF	; 255
    3d34:	fe 01       	movw	r30, r28
    3d36:	e7 59       	subi	r30, 0x97	; 151
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	93 81       	ldd	r25, Z+3	; 0x03
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	f8 01       	movw	r30, r16
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	80 83       	st	Z, r24
    3d50:	de 01       	movw	r26, r28
    3d52:	ad 59       	subi	r26, 0x9D	; 157
    3d54:	bf 4f       	sbci	r27, 0xFF	; 255
    3d56:	fe 01       	movw	r30, r28
    3d58:	e9 59       	subi	r30, 0x99	; 153
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	80 81       	ld	r24, Z
    3d5e:	91 81       	ldd	r25, Z+1	; 0x01
    3d60:	8d 93       	st	X+, r24
    3d62:	9c 93       	st	X, r25
    3d64:	fe 01       	movw	r30, r28
    3d66:	ed 59       	subi	r30, 0x9D	; 157
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <main+0x1d8>
    3d72:	fe 01       	movw	r30, r28
    3d74:	ed 59       	subi	r30, 0x9D	; 157
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
	_delay_ms(1000);
	HLCD_voidCommand(LCD_Clear_Screen);
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>


	//EEPROM_SendByte(0xFF ,address);
	EEPROM_ReadByte(&byte , address);
    3d82:	80 91 8b 01 	lds	r24, 0x018B
    3d86:	28 2f       	mov	r18, r24
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	8a e8       	ldi	r24, 0x8A	; 138
    3d8c:	91 e0       	ldi	r25, 0x01	; 1
    3d8e:	b9 01       	movw	r22, r18
    3d90:	0e 94 82 1b 	call	0x3704	; 0x3704 <EEPROM_ReadByte>
	if(byte == 0xFF)
    3d94:	80 91 8a 01 	lds	r24, 0x018A
    3d98:	8f 3f       	cpi	r24, 0xFF	; 255
    3d9a:	09 f0       	breq	.+2      	; 0x3d9e <main+0x208>
    3d9c:	a8 c1       	rjmp	.+848    	; 0x40ee <main+0x558>
	{


		HLCD_PrintString("for first time");
    3d9e:	8a e6       	ldi	r24, 0x6A	; 106
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
    3da6:	fe 01       	movw	r30, r28
    3da8:	e1 5a       	subi	r30, 0xA1	; 161
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	90 e8       	ldi	r25, 0x80	; 128
    3db0:	ab eb       	ldi	r26, 0xBB	; 187
    3db2:	b4 e4       	ldi	r27, 0x44	; 68
    3db4:	80 83       	st	Z, r24
    3db6:	91 83       	std	Z+1, r25	; 0x01
    3db8:	a2 83       	std	Z+2, r26	; 0x02
    3dba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dbc:	8e 01       	movw	r16, r28
    3dbe:	05 5a       	subi	r16, 0xA5	; 165
    3dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e1 5a       	subi	r30, 0xA1	; 161
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	60 81       	ld	r22, Z
    3dca:	71 81       	ldd	r23, Z+1	; 0x01
    3dcc:	82 81       	ldd	r24, Z+2	; 0x02
    3dce:	93 81       	ldd	r25, Z+3	; 0x03
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	4a ef       	ldi	r20, 0xFA	; 250
    3dd6:	54 e4       	ldi	r21, 0x44	; 68
    3dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	f8 01       	movw	r30, r16
    3de2:	80 83       	st	Z, r24
    3de4:	91 83       	std	Z+1, r25	; 0x01
    3de6:	a2 83       	std	Z+2, r26	; 0x02
    3de8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dea:	fe 01       	movw	r30, r28
    3dec:	e5 5a       	subi	r30, 0xA5	; 165
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	60 81       	ld	r22, Z
    3df2:	71 81       	ldd	r23, Z+1	; 0x01
    3df4:	82 81       	ldd	r24, Z+2	; 0x02
    3df6:	93 81       	ldd	r25, Z+3	; 0x03
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e8       	ldi	r20, 0x80	; 128
    3dfe:	5f e3       	ldi	r21, 0x3F	; 63
    3e00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e04:	88 23       	and	r24, r24
    3e06:	44 f4       	brge	.+16     	; 0x3e18 <main+0x282>
		__ticks = 1;
    3e08:	fe 01       	movw	r30, r28
    3e0a:	e7 5a       	subi	r30, 0xA7	; 167
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	91 83       	std	Z+1, r25	; 0x01
    3e14:	80 83       	st	Z, r24
    3e16:	64 c0       	rjmp	.+200    	; 0x3ee0 <main+0x34a>
	else if (__tmp > 65535)
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e5 5a       	subi	r30, 0xA5	; 165
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	60 81       	ld	r22, Z
    3e20:	71 81       	ldd	r23, Z+1	; 0x01
    3e22:	82 81       	ldd	r24, Z+2	; 0x02
    3e24:	93 81       	ldd	r25, Z+3	; 0x03
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	4f e7       	ldi	r20, 0x7F	; 127
    3e2c:	57 e4       	ldi	r21, 0x47	; 71
    3e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e32:	18 16       	cp	r1, r24
    3e34:	0c f0       	brlt	.+2      	; 0x3e38 <main+0x2a2>
    3e36:	43 c0       	rjmp	.+134    	; 0x3ebe <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e1 5a       	subi	r30, 0xA1	; 161
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	40 e2       	ldi	r20, 0x20	; 32
    3e4c:	51 e4       	ldi	r21, 0x41	; 65
    3e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	8e 01       	movw	r16, r28
    3e58:	07 5a       	subi	r16, 0xA7	; 167
    3e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	f8 01       	movw	r30, r16
    3e6a:	91 83       	std	Z+1, r25	; 0x01
    3e6c:	80 83       	st	Z, r24
    3e6e:	1f c0       	rjmp	.+62     	; 0x3eae <main+0x318>
    3e70:	fe 01       	movw	r30, r28
    3e72:	e9 5a       	subi	r30, 0xA9	; 169
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	88 ec       	ldi	r24, 0xC8	; 200
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e9 5a       	subi	r30, 0xA9	; 169
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	80 81       	ld	r24, Z
    3e86:	91 81       	ldd	r25, Z+1	; 0x01
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	f1 f7       	brne	.-4      	; 0x3e88 <main+0x2f2>
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	e9 5a       	subi	r30, 0xA9	; 169
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	91 83       	std	Z+1, r25	; 0x01
    3e94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e96:	de 01       	movw	r26, r28
    3e98:	a7 5a       	subi	r26, 0xA7	; 167
    3e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e7 5a       	subi	r30, 0xA7	; 167
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	80 81       	ld	r24, Z
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	11 96       	adiw	r26, 0x01	; 1
    3eaa:	9c 93       	st	X, r25
    3eac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e7 5a       	subi	r30, 0xA7	; 167
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	80 81       	ld	r24, Z
    3eb6:	91 81       	ldd	r25, Z+1	; 0x01
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	d1 f6       	brne	.-76     	; 0x3e70 <main+0x2da>
    3ebc:	27 c0       	rjmp	.+78     	; 0x3f0c <main+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ebe:	8e 01       	movw	r16, r28
    3ec0:	07 5a       	subi	r16, 0xA7	; 167
    3ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e5 5a       	subi	r30, 0xA5	; 165
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	60 81       	ld	r22, Z
    3ecc:	71 81       	ldd	r23, Z+1	; 0x01
    3ece:	82 81       	ldd	r24, Z+2	; 0x02
    3ed0:	93 81       	ldd	r25, Z+3	; 0x03
    3ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	f8 01       	movw	r30, r16
    3edc:	91 83       	std	Z+1, r25	; 0x01
    3ede:	80 83       	st	Z, r24
    3ee0:	de 01       	movw	r26, r28
    3ee2:	ab 5a       	subi	r26, 0xAB	; 171
    3ee4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e7 5a       	subi	r30, 0xA7	; 167
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	80 81       	ld	r24, Z
    3eee:	91 81       	ldd	r25, Z+1	; 0x01
    3ef0:	8d 93       	st	X+, r24
    3ef2:	9c 93       	st	X, r25
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	eb 5a       	subi	r30, 0xAB	; 171
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <main+0x368>
    3f02:	fe 01       	movw	r30, r28
    3f04:	eb 5a       	subi	r30, 0xAB	; 171
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	91 83       	std	Z+1, r25	; 0x01
    3f0a:	80 83       	st	Z, r24
		_delay_ms(1500);
		HLCD_voidCommand(LCD_Clear_Screen);
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
		HLCD_PrintString("Enter name");
    3f12:	89 e7       	ldi	r24, 0x79	; 121
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
		HLCD_GOTO_XY(2,1);
    3f1a:	82 e0       	ldi	r24, 0x02	; 2
    3f1c:	61 e0       	ldi	r22, 0x01	; 1
    3f1e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
		Get_name();
    3f22:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <Get_name>
		HLCD_voidCommand(LCD_Clear_Screen);
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	ef 5a       	subi	r30, 0xAF	; 175
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	a8 e4       	ldi	r26, 0x48	; 72
    3f38:	b2 e4       	ldi	r27, 0x42	; 66
    3f3a:	80 83       	st	Z, r24
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	a2 83       	std	Z+2, r26	; 0x02
    3f40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f42:	8e 01       	movw	r16, r28
    3f44:	03 5b       	subi	r16, 0xB3	; 179
    3f46:	1f 4f       	sbci	r17, 0xFF	; 255
    3f48:	fe 01       	movw	r30, r28
    3f4a:	ef 5a       	subi	r30, 0xAF	; 175
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	60 81       	ld	r22, Z
    3f50:	71 81       	ldd	r23, Z+1	; 0x01
    3f52:	82 81       	ldd	r24, Z+2	; 0x02
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	4a ef       	ldi	r20, 0xFA	; 250
    3f5c:	54 e4       	ldi	r21, 0x44	; 68
    3f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	f8 01       	movw	r30, r16
    3f68:	80 83       	st	Z, r24
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	a2 83       	std	Z+2, r26	; 0x02
    3f6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f70:	fe 01       	movw	r30, r28
    3f72:	e3 5b       	subi	r30, 0xB3	; 179
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	60 81       	ld	r22, Z
    3f78:	71 81       	ldd	r23, Z+1	; 0x01
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e8       	ldi	r20, 0x80	; 128
    3f84:	5f e3       	ldi	r21, 0x3F	; 63
    3f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f8a:	88 23       	and	r24, r24
    3f8c:	44 f4       	brge	.+16     	; 0x3f9e <main+0x408>
		__ticks = 1;
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e5 5b       	subi	r30, 0xB5	; 181
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
    3f9c:	64 c0       	rjmp	.+200    	; 0x4066 <main+0x4d0>
	else if (__tmp > 65535)
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e3 5b       	subi	r30, 0xB3	; 179
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	60 81       	ld	r22, Z
    3fa6:	71 81       	ldd	r23, Z+1	; 0x01
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	93 81       	ldd	r25, Z+3	; 0x03
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	3f ef       	ldi	r19, 0xFF	; 255
    3fb0:	4f e7       	ldi	r20, 0x7F	; 127
    3fb2:	57 e4       	ldi	r21, 0x47	; 71
    3fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fb8:	18 16       	cp	r1, r24
    3fba:	0c f0       	brlt	.+2      	; 0x3fbe <main+0x428>
    3fbc:	43 c0       	rjmp	.+134    	; 0x4044 <main+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	ef 5a       	subi	r30, 0xAF	; 175
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	60 81       	ld	r22, Z
    3fc6:	71 81       	ldd	r23, Z+1	; 0x01
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	93 81       	ldd	r25, Z+3	; 0x03
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e2       	ldi	r20, 0x20	; 32
    3fd2:	51 e4       	ldi	r21, 0x41	; 65
    3fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	8e 01       	movw	r16, r28
    3fde:	05 5b       	subi	r16, 0xB5	; 181
    3fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe2:	bc 01       	movw	r22, r24
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	f8 01       	movw	r30, r16
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	80 83       	st	Z, r24
    3ff4:	1f c0       	rjmp	.+62     	; 0x4034 <main+0x49e>
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e7 5b       	subi	r30, 0xB7	; 183
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	88 ec       	ldi	r24, 0xC8	; 200
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	91 83       	std	Z+1, r25	; 0x01
    4002:	80 83       	st	Z, r24
    4004:	fe 01       	movw	r30, r28
    4006:	e7 5b       	subi	r30, 0xB7	; 183
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	f1 f7       	brne	.-4      	; 0x400e <main+0x478>
    4012:	fe 01       	movw	r30, r28
    4014:	e7 5b       	subi	r30, 0xB7	; 183
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	91 83       	std	Z+1, r25	; 0x01
    401a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401c:	de 01       	movw	r26, r28
    401e:	a5 5b       	subi	r26, 0xB5	; 181
    4020:	bf 4f       	sbci	r27, 0xFF	; 255
    4022:	fe 01       	movw	r30, r28
    4024:	e5 5b       	subi	r30, 0xB5	; 181
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	80 81       	ld	r24, Z
    402a:	91 81       	ldd	r25, Z+1	; 0x01
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	11 96       	adiw	r26, 0x01	; 1
    4030:	9c 93       	st	X, r25
    4032:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4034:	fe 01       	movw	r30, r28
    4036:	e5 5b       	subi	r30, 0xB5	; 181
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	d1 f6       	brne	.-76     	; 0x3ff6 <main+0x460>
    4042:	27 c0       	rjmp	.+78     	; 0x4092 <main+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4044:	8e 01       	movw	r16, r28
    4046:	05 5b       	subi	r16, 0xB5	; 181
    4048:	1f 4f       	sbci	r17, 0xFF	; 255
    404a:	fe 01       	movw	r30, r28
    404c:	e3 5b       	subi	r30, 0xB3	; 179
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	60 81       	ld	r22, Z
    4052:	71 81       	ldd	r23, Z+1	; 0x01
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	93 81       	ldd	r25, Z+3	; 0x03
    4058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f8 01       	movw	r30, r16
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
    4066:	de 01       	movw	r26, r28
    4068:	a9 5b       	subi	r26, 0xB9	; 185
    406a:	bf 4f       	sbci	r27, 0xFF	; 255
    406c:	fe 01       	movw	r30, r28
    406e:	e5 5b       	subi	r30, 0xB5	; 181
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	91 81       	ldd	r25, Z+1	; 0x01
    4076:	8d 93       	st	X+, r24
    4078:	9c 93       	st	X, r25
    407a:	fe 01       	movw	r30, r28
    407c:	e9 5b       	subi	r30, 0xB9	; 185
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <main+0x4ee>
    4088:	fe 01       	movw	r30, r28
    408a:	e9 5b       	subi	r30, 0xB9	; 185
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	80 83       	st	Z, r24
		_delay_ms(50);
		HLCD_PrintString("Enter password");
    4092:	84 e8       	ldi	r24, 0x84	; 132
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
		HLCD_GOTO_XY(2,1);
    409a:	82 e0       	ldi	r24, 0x02	; 2
    409c:	61 e0       	ldi	r22, 0x01	; 1
    409e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
		Get_Password();
    40a2:	0e 94 df 1c 	call	0x39be	; 0x39be <Get_Password>
    40a6:	97 c0       	rjmp	.+302    	; 0x41d6 <main+0x640>
	}
	else
	{
		while(byte != 0xFF)
		{
			NAME[index] = byte ;
    40a8:	fe 01       	movw	r30, r28
    40aa:	ef 58       	subi	r30, 0x8F	; 143
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	80 81       	ld	r24, Z
    40b0:	88 2f       	mov	r24, r24
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	20 91 8a 01 	lds	r18, 0x018A
    40b8:	fc 01       	movw	r30, r24
    40ba:	e0 56       	subi	r30, 0x60	; 96
    40bc:	fe 4f       	sbci	r31, 0xFE	; 254
    40be:	20 83       	st	Z, r18
			address++ ;
    40c0:	80 91 8b 01 	lds	r24, 0x018B
    40c4:	8f 5f       	subi	r24, 0xFF	; 255
    40c6:	80 93 8b 01 	sts	0x018B, r24
			EEPROM_ReadByte(&byte ,address);
    40ca:	80 91 8b 01 	lds	r24, 0x018B
    40ce:	28 2f       	mov	r18, r24
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	8a e8       	ldi	r24, 0x8A	; 138
    40d4:	91 e0       	ldi	r25, 0x01	; 1
    40d6:	b9 01       	movw	r22, r18
    40d8:	0e 94 82 1b 	call	0x3704	; 0x3704 <EEPROM_ReadByte>
			index++ ;
    40dc:	de 01       	movw	r26, r28
    40de:	af 58       	subi	r26, 0x8F	; 143
    40e0:	bf 4f       	sbci	r27, 0xFF	; 255
    40e2:	fe 01       	movw	r30, r28
    40e4:	ef 58       	subi	r30, 0x8F	; 143
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	80 81       	ld	r24, Z
    40ea:	8f 5f       	subi	r24, 0xFF	; 255
    40ec:	8c 93       	st	X, r24
		HLCD_GOTO_XY(2,1);
		Get_Password();
	}
	else
	{
		while(byte != 0xFF)
    40ee:	80 91 8a 01 	lds	r24, 0x018A
    40f2:	8f 3f       	cpi	r24, 0xFF	; 255
    40f4:	c9 f6       	brne	.-78     	; 0x40a8 <main+0x512>
			address++ ;
			EEPROM_ReadByte(&byte ,address);
			index++ ;
		}

		address++ ;
    40f6:	80 91 8b 01 	lds	r24, 0x018B
    40fa:	8f 5f       	subi	r24, 0xFF	; 255
    40fc:	80 93 8b 01 	sts	0x018B, r24
		EEPROM_ReadByte(&byte ,address);
    4100:	80 91 8b 01 	lds	r24, 0x018B
    4104:	28 2f       	mov	r18, r24
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	8a e8       	ldi	r24, 0x8A	; 138
    410a:	91 e0       	ldi	r25, 0x01	; 1
    410c:	b9 01       	movw	r22, r18
    410e:	0e 94 82 1b 	call	0x3704	; 0x3704 <EEPROM_ReadByte>
    4112:	42 c0       	rjmp	.+132    	; 0x4198 <main+0x602>
		while(byte != 0xFF)
		{
			PASSWORD+=byte ;
    4114:	80 91 8a 01 	lds	r24, 0x018A
    4118:	28 2f       	mov	r18, r24
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	40 e0       	ldi	r20, 0x00	; 0
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	80 91 86 01 	lds	r24, 0x0186
    4124:	90 91 87 01 	lds	r25, 0x0187
    4128:	a0 91 88 01 	lds	r26, 0x0188
    412c:	b0 91 89 01 	lds	r27, 0x0189
    4130:	82 0f       	add	r24, r18
    4132:	93 1f       	adc	r25, r19
    4134:	a4 1f       	adc	r26, r20
    4136:	b5 1f       	adc	r27, r21
    4138:	80 93 86 01 	sts	0x0186, r24
    413c:	90 93 87 01 	sts	0x0187, r25
    4140:	a0 93 88 01 	sts	0x0188, r26
    4144:	b0 93 89 01 	sts	0x0189, r27
			PASSWORD*=10;
    4148:	80 91 86 01 	lds	r24, 0x0186
    414c:	90 91 87 01 	lds	r25, 0x0187
    4150:	a0 91 88 01 	lds	r26, 0x0188
    4154:	b0 91 89 01 	lds	r27, 0x0189
    4158:	2a e0       	ldi	r18, 0x0A	; 10
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	40 e0       	ldi	r20, 0x00	; 0
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	bc 01       	movw	r22, r24
    4162:	cd 01       	movw	r24, r26
    4164:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <__mulsi3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	80 93 86 01 	sts	0x0186, r24
    4170:	90 93 87 01 	sts	0x0187, r25
    4174:	a0 93 88 01 	sts	0x0188, r26
    4178:	b0 93 89 01 	sts	0x0189, r27
			address++ ;
    417c:	80 91 8b 01 	lds	r24, 0x018B
    4180:	8f 5f       	subi	r24, 0xFF	; 255
    4182:	80 93 8b 01 	sts	0x018B, r24
			EEPROM_ReadByte(&byte ,address);
    4186:	80 91 8b 01 	lds	r24, 0x018B
    418a:	28 2f       	mov	r18, r24
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	8a e8       	ldi	r24, 0x8A	; 138
    4190:	91 e0       	ldi	r25, 0x01	; 1
    4192:	b9 01       	movw	r22, r18
    4194:	0e 94 82 1b 	call	0x3704	; 0x3704 <EEPROM_ReadByte>
			index++ ;
		}

		address++ ;
		EEPROM_ReadByte(&byte ,address);
		while(byte != 0xFF)
    4198:	80 91 8a 01 	lds	r24, 0x018A
    419c:	8f 3f       	cpi	r24, 0xFF	; 255
    419e:	09 f0       	breq	.+2      	; 0x41a2 <main+0x60c>
    41a0:	b9 cf       	rjmp	.-142    	; 0x4114 <main+0x57e>
			PASSWORD+=byte ;
			PASSWORD*=10;
			address++ ;
			EEPROM_ReadByte(&byte ,address);
		}
		PASSWORD/=10 ;
    41a2:	80 91 86 01 	lds	r24, 0x0186
    41a6:	90 91 87 01 	lds	r25, 0x0187
    41aa:	a0 91 88 01 	lds	r26, 0x0188
    41ae:	b0 91 89 01 	lds	r27, 0x0189
    41b2:	2a e0       	ldi	r18, 0x0A	; 10
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e0       	ldi	r20, 0x00	; 0
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
    41c2:	da 01       	movw	r26, r20
    41c4:	c9 01       	movw	r24, r18
    41c6:	80 93 86 01 	sts	0x0186, r24
    41ca:	90 93 87 01 	sts	0x0187, r25
    41ce:	a0 93 88 01 	sts	0x0188, r26
    41d2:	b0 93 89 01 	sts	0x0189, r27
	}

	while(1)
	{
		data = 0 ;
    41d6:	10 92 b4 01 	sts	0x01B4, r1
		input_Pass = 0 ;
    41da:	fe 01       	movw	r30, r28
    41dc:	ee 58       	subi	r30, 0x8E	; 142
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	10 82       	st	Z, r1
    41e2:	11 82       	std	Z+1, r1	; 0x01
    41e4:	12 82       	std	Z+2, r1	; 0x02
    41e6:	13 82       	std	Z+3, r1	; 0x03
		flage = 0;
    41e8:	fe 01       	movw	r30, r28
    41ea:	ea 58       	subi	r30, 0x8A	; 138
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	10 82       	st	Z, r1
		count= 3 ;
    41f0:	fe 01       	movw	r30, r28
    41f2:	e9 58       	subi	r30, 0x89	; 137
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	83 e0       	ldi	r24, 0x03	; 3
    41f8:	80 83       	st	Z, r24
		index =  0 ;
    41fa:	fe 01       	movw	r30, r28
    41fc:	ef 58       	subi	r30, 0x8F	; 143
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	10 82       	st	Z, r1
		HLCD_voidCommand(LCD_Clear_Screen);
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
		HLCD_PrintString(" Enter User name");
    4208:	83 e9       	ldi	r24, 0x93	; 147
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
		HLCD_GOTO_XY(2,1);
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	61 e0       	ldi	r22, 0x01	; 1
    4214:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
    4218:	28 c0       	rjmp	.+80     	; 0x426a <main+0x6d4>
		while(data != '=' && data !=0x0D  )
		{
			//data = Keypad_getkey();
			data = Bluetooth_RecieveData();
    421a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <Bluetooth_RecieveData>
    421e:	80 93 b4 01 	sts	0x01B4, r24
			if(data != -1 && data != '='&&data !=0x0D )
    4222:	80 91 b4 01 	lds	r24, 0x01B4
    4226:	8d 33       	cpi	r24, 0x3D	; 61
    4228:	01 f1       	breq	.+64     	; 0x426a <main+0x6d4>
    422a:	80 91 b4 01 	lds	r24, 0x01B4
    422e:	8d 30       	cpi	r24, 0x0D	; 13
    4230:	e1 f0       	breq	.+56     	; 0x426a <main+0x6d4>
			{
				HLCD_SendData(data);
    4232:	80 91 b4 01 	lds	r24, 0x01B4
    4236:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HLCD_SendData>
				input_name[index] = data ;
    423a:	fe 01       	movw	r30, r28
    423c:	ef 58       	subi	r30, 0x8F	; 143
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	28 2f       	mov	r18, r24
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 91 b4 01 	lds	r20, 0x01B4
    424a:	ce 01       	movw	r24, r28
    424c:	88 58       	subi	r24, 0x88	; 136
    424e:	9f 4f       	sbci	r25, 0xFF	; 255
    4250:	fc 01       	movw	r30, r24
    4252:	e2 0f       	add	r30, r18
    4254:	f3 1f       	adc	r31, r19
    4256:	40 83       	st	Z, r20
				index++ ;
    4258:	de 01       	movw	r26, r28
    425a:	af 58       	subi	r26, 0x8F	; 143
    425c:	bf 4f       	sbci	r27, 0xFF	; 255
    425e:	fe 01       	movw	r30, r28
    4260:	ef 58       	subi	r30, 0x8F	; 143
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	80 81       	ld	r24, Z
    4266:	8f 5f       	subi	r24, 0xFF	; 255
    4268:	8c 93       	st	X, r24
		count= 3 ;
		index =  0 ;
		HLCD_voidCommand(LCD_Clear_Screen);
		HLCD_PrintString(" Enter User name");
		HLCD_GOTO_XY(2,1);
		while(data != '=' && data !=0x0D  )
    426a:	80 91 b4 01 	lds	r24, 0x01B4
    426e:	8d 33       	cpi	r24, 0x3D	; 61
    4270:	21 f0       	breq	.+8      	; 0x427a <main+0x6e4>
    4272:	80 91 b4 01 	lds	r24, 0x01B4
    4276:	8d 30       	cpi	r24, 0x0D	; 13
    4278:	81 f6       	brne	.-96     	; 0x421a <main+0x684>
				HLCD_SendData(data);
				input_name[index] = data ;
				index++ ;
			}
		}
		input_name[index] = '\0' ;
    427a:	fe 01       	movw	r30, r28
    427c:	ef 58       	subi	r30, 0x8F	; 143
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	80 81       	ld	r24, Z
    4282:	28 2f       	mov	r18, r24
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	ce 01       	movw	r24, r28
    4288:	88 58       	subi	r24, 0x88	; 136
    428a:	9f 4f       	sbci	r25, 0xFF	; 255
    428c:	fc 01       	movw	r30, r24
    428e:	e2 0f       	add	r30, r18
    4290:	f3 1f       	adc	r31, r19
    4292:	10 82       	st	Z, r1

		if(!strcmp(input_name ,NAME))
    4294:	ce 01       	movw	r24, r28
    4296:	88 58       	subi	r24, 0x88	; 136
    4298:	9f 4f       	sbci	r25, 0xFF	; 255
    429a:	20 ea       	ldi	r18, 0xA0	; 160
    429c:	31 e0       	ldi	r19, 0x01	; 1
    429e:	b9 01       	movw	r22, r18
    42a0:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <strcmp>
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	09 f0       	breq	.+2      	; 0x42aa <main+0x714>
    42a8:	1b c3       	rjmp	.+1590   	; 0x48e0 <main+0xd4a>
		{
			HLCD_voidCommand(LCD_Clear_Screen);
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
			HLCD_PrintString(" Enter Password");
    42b0:	84 ea       	ldi	r24, 0xA4	; 164
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
    42b8:	ac c1       	rjmp	.+856    	; 0x4612 <main+0xa7c>
			while(count--)
			{
				data = 0 ;
    42ba:	10 92 b4 01 	sts	0x01B4, r1
				HLCD_GOTO_XY(2,1);
    42be:	82 e0       	ldi	r24, 0x02	; 2
    42c0:	61 e0       	ldi	r22, 0x01	; 1
    42c2:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
    42c6:	45 c0       	rjmp	.+138    	; 0x4352 <main+0x7bc>
				while(data != '=' && data !=0x0D  )
				{
					//data = Keypad_getkey();
					data = Bluetooth_RecieveData();
    42c8:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <Bluetooth_RecieveData>
    42cc:	80 93 b4 01 	sts	0x01B4, r24
					if(data != -1 && data != '='&&data !=0x0D )
    42d0:	80 91 b4 01 	lds	r24, 0x01B4
    42d4:	8d 33       	cpi	r24, 0x3D	; 61
    42d6:	e9 f1       	breq	.+122    	; 0x4352 <main+0x7bc>
    42d8:	80 91 b4 01 	lds	r24, 0x01B4
    42dc:	8d 30       	cpi	r24, 0x0D	; 13
    42de:	c9 f1       	breq	.+114    	; 0x4352 <main+0x7bc>
					{
						HLCD_SendData('*');
    42e0:	8a e2       	ldi	r24, 0x2A	; 42
    42e2:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HLCD_SendData>
						input_Pass += data-48 ;
    42e6:	80 91 b4 01 	lds	r24, 0x01B4
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	c0 97       	sbiw	r24, 0x30	; 48
    42f0:	9c 01       	movw	r18, r24
    42f2:	44 27       	eor	r20, r20
    42f4:	37 fd       	sbrc	r19, 7
    42f6:	40 95       	com	r20
    42f8:	54 2f       	mov	r21, r20
    42fa:	be 01       	movw	r22, r28
    42fc:	6e 58       	subi	r22, 0x8E	; 142
    42fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4300:	fe 01       	movw	r30, r28
    4302:	ee 58       	subi	r30, 0x8E	; 142
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	80 81       	ld	r24, Z
    4308:	91 81       	ldd	r25, Z+1	; 0x01
    430a:	a2 81       	ldd	r26, Z+2	; 0x02
    430c:	b3 81       	ldd	r27, Z+3	; 0x03
    430e:	82 0f       	add	r24, r18
    4310:	93 1f       	adc	r25, r19
    4312:	a4 1f       	adc	r26, r20
    4314:	b5 1f       	adc	r27, r21
    4316:	fb 01       	movw	r30, r22
    4318:	80 83       	st	Z, r24
    431a:	91 83       	std	Z+1, r25	; 0x01
    431c:	a2 83       	std	Z+2, r26	; 0x02
    431e:	b3 83       	std	Z+3, r27	; 0x03
						input_Pass*=10 ;
    4320:	8e 01       	movw	r16, r28
    4322:	0e 58       	subi	r16, 0x8E	; 142
    4324:	1f 4f       	sbci	r17, 0xFF	; 255
    4326:	fe 01       	movw	r30, r28
    4328:	ee 58       	subi	r30, 0x8E	; 142
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	80 81       	ld	r24, Z
    432e:	91 81       	ldd	r25, Z+1	; 0x01
    4330:	a2 81       	ldd	r26, Z+2	; 0x02
    4332:	b3 81       	ldd	r27, Z+3	; 0x03
    4334:	2a e0       	ldi	r18, 0x0A	; 10
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	bc 01       	movw	r22, r24
    433e:	cd 01       	movw	r24, r26
    4340:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <__mulsi3>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	f8 01       	movw	r30, r16
    434a:	80 83       	st	Z, r24
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	a2 83       	std	Z+2, r26	; 0x02
    4350:	b3 83       	std	Z+3, r27	; 0x03
			HLCD_PrintString(" Enter Password");
			while(count--)
			{
				data = 0 ;
				HLCD_GOTO_XY(2,1);
				while(data != '=' && data !=0x0D  )
    4352:	80 91 b4 01 	lds	r24, 0x01B4
    4356:	8d 33       	cpi	r24, 0x3D	; 61
    4358:	29 f0       	breq	.+10     	; 0x4364 <main+0x7ce>
    435a:	80 91 b4 01 	lds	r24, 0x01B4
    435e:	8d 30       	cpi	r24, 0x0D	; 13
    4360:	09 f0       	breq	.+2      	; 0x4364 <main+0x7ce>
    4362:	b2 cf       	rjmp	.-156    	; 0x42c8 <main+0x732>
						HLCD_SendData('*');
						input_Pass += data-48 ;
						input_Pass*=10 ;
					}
				}
				input_Pass/=10 ;
    4364:	8e 01       	movw	r16, r28
    4366:	0e 58       	subi	r16, 0x8E	; 142
    4368:	1f 4f       	sbci	r17, 0xFF	; 255
    436a:	fe 01       	movw	r30, r28
    436c:	ee 58       	subi	r30, 0x8E	; 142
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	a2 81       	ldd	r26, Z+2	; 0x02
    4376:	b3 81       	ldd	r27, Z+3	; 0x03
    4378:	2a e0       	ldi	r18, 0x0A	; 10
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	40 e0       	ldi	r20, 0x00	; 0
    437e:	50 e0       	ldi	r21, 0x00	; 0
    4380:	bc 01       	movw	r22, r24
    4382:	cd 01       	movw	r24, r26
    4384:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodsi4>
    4388:	da 01       	movw	r26, r20
    438a:	c9 01       	movw	r24, r18
    438c:	f8 01       	movw	r30, r16
    438e:	80 83       	st	Z, r24
    4390:	91 83       	std	Z+1, r25	; 0x01
    4392:	a2 83       	std	Z+2, r26	; 0x02
    4394:	b3 83       	std	Z+3, r27	; 0x03
				HLCD_voidCommand(LCD_Clear_Screen);
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
				if(input_Pass == PASSWORD)
    439c:	20 91 86 01 	lds	r18, 0x0186
    43a0:	30 91 87 01 	lds	r19, 0x0187
    43a4:	40 91 88 01 	lds	r20, 0x0188
    43a8:	50 91 89 01 	lds	r21, 0x0189
    43ac:	fe 01       	movw	r30, r28
    43ae:	ee 58       	subi	r30, 0x8E	; 142
    43b0:	ff 4f       	sbci	r31, 0xFF	; 255
    43b2:	80 81       	ld	r24, Z
    43b4:	91 81       	ldd	r25, Z+1	; 0x01
    43b6:	a2 81       	ldd	r26, Z+2	; 0x02
    43b8:	b3 81       	ldd	r27, Z+3	; 0x03
    43ba:	82 17       	cp	r24, r18
    43bc:	93 07       	cpc	r25, r19
    43be:	a4 07       	cpc	r26, r20
    43c0:	b5 07       	cpc	r27, r21
    43c2:	09 f0       	breq	.+2      	; 0x43c6 <main+0x830>
    43c4:	99 c0       	rjmp	.+306    	; 0x44f8 <main+0x962>
				{
					flage  = 1 ;
    43c6:	fe 01       	movw	r30, r28
    43c8:	ea 58       	subi	r30, 0x8A	; 138
    43ca:	ff 4f       	sbci	r31, 0xFF	; 255
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	80 83       	st	Z, r24
					HLCD_PrintString(" Correct PASS");
    43d0:	84 eb       	ldi	r24, 0xB4	; 180
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
					Servo_SetAngle(SERVO1 ,90);
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	6a e5       	ldi	r22, 0x5A	; 90
    43dc:	0e 94 a1 13 	call	0x2742	; 0x2742 <Servo_SetAngle>
                    LED_voidSetLEDHigh(LED2);
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LED_voidSetLEDHigh>
    43e6:	fe 01       	movw	r30, r28
    43e8:	ed 5b       	subi	r30, 0xBD	; 189
    43ea:	ff 4f       	sbci	r31, 0xFF	; 255
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	aa ef       	ldi	r26, 0xFA	; 250
    43f2:	b4 e4       	ldi	r27, 0x44	; 68
    43f4:	80 83       	st	Z, r24
    43f6:	91 83       	std	Z+1, r25	; 0x01
    43f8:	a2 83       	std	Z+2, r26	; 0x02
    43fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43fc:	8e 01       	movw	r16, r28
    43fe:	01 5c       	subi	r16, 0xC1	; 193
    4400:	1f 4f       	sbci	r17, 0xFF	; 255
    4402:	fe 01       	movw	r30, r28
    4404:	ed 5b       	subi	r30, 0xBD	; 189
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	4a ef       	ldi	r20, 0xFA	; 250
    4416:	54 e4       	ldi	r21, 0x44	; 68
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	f8 01       	movw	r30, r16
    4422:	80 83       	st	Z, r24
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	a2 83       	std	Z+2, r26	; 0x02
    4428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    442a:	fe 01       	movw	r30, r28
    442c:	ff 96       	adiw	r30, 0x3f	; 63
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	40 e8       	ldi	r20, 0x80	; 128
    443c:	5f e3       	ldi	r21, 0x3F	; 63
    443e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4442:	88 23       	and	r24, r24
    4444:	2c f4       	brge	.+10     	; 0x4450 <main+0x8ba>
		__ticks = 1;
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	9e af       	std	Y+62, r25	; 0x3e
    444c:	8d af       	std	Y+61, r24	; 0x3d
    444e:	46 c0       	rjmp	.+140    	; 0x44dc <main+0x946>
	else if (__tmp > 65535)
    4450:	fe 01       	movw	r30, r28
    4452:	ff 96       	adiw	r30, 0x3f	; 63
    4454:	60 81       	ld	r22, Z
    4456:	71 81       	ldd	r23, Z+1	; 0x01
    4458:	82 81       	ldd	r24, Z+2	; 0x02
    445a:	93 81       	ldd	r25, Z+3	; 0x03
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	3f ef       	ldi	r19, 0xFF	; 255
    4460:	4f e7       	ldi	r20, 0x7F	; 127
    4462:	57 e4       	ldi	r21, 0x47	; 71
    4464:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4468:	18 16       	cp	r1, r24
    446a:	64 f5       	brge	.+88     	; 0x44c4 <main+0x92e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    446c:	fe 01       	movw	r30, r28
    446e:	ed 5b       	subi	r30, 0xBD	; 189
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	60 81       	ld	r22, Z
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	82 81       	ldd	r24, Z+2	; 0x02
    4478:	93 81       	ldd	r25, Z+3	; 0x03
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	40 e2       	ldi	r20, 0x20	; 32
    4480:	51 e4       	ldi	r21, 0x41	; 65
    4482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	bc 01       	movw	r22, r24
    448c:	cd 01       	movw	r24, r26
    448e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	9e af       	std	Y+62, r25	; 0x3e
    4498:	8d af       	std	Y+61, r24	; 0x3d
    449a:	0f c0       	rjmp	.+30     	; 0x44ba <main+0x924>
    449c:	88 ec       	ldi	r24, 0xC8	; 200
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	9c af       	std	Y+60, r25	; 0x3c
    44a2:	8b af       	std	Y+59, r24	; 0x3b
    44a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    44a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	f1 f7       	brne	.-4      	; 0x44a8 <main+0x912>
    44ac:	9c af       	std	Y+60, r25	; 0x3c
    44ae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    44b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	9e af       	std	Y+62, r25	; 0x3e
    44b8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    44bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	69 f7       	brne	.-38     	; 0x449c <main+0x906>
    44c2:	16 c0       	rjmp	.+44     	; 0x44f0 <main+0x95a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c4:	fe 01       	movw	r30, r28
    44c6:	ff 96       	adiw	r30, 0x3f	; 63
    44c8:	60 81       	ld	r22, Z
    44ca:	71 81       	ldd	r23, Z+1	; 0x01
    44cc:	82 81       	ldd	r24, Z+2	; 0x02
    44ce:	93 81       	ldd	r25, Z+3	; 0x03
    44d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	9e af       	std	Y+62, r25	; 0x3e
    44da:	8d af       	std	Y+61, r24	; 0x3d
    44dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    44de:	9e ad       	ldd	r25, Y+62	; 0x3e
    44e0:	9a af       	std	Y+58, r25	; 0x3a
    44e2:	89 af       	std	Y+57, r24	; 0x39
    44e4:	89 ad       	ldd	r24, Y+57	; 0x39
    44e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	f1 f7       	brne	.-4      	; 0x44e8 <main+0x952>
    44ec:	9a af       	std	Y+58, r25	; 0x3a
    44ee:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(2000);
                    LED_voidSetLEDLow(LED2);
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <LED_voidSetLEDLow>
    44f6:	b4 c0       	rjmp	.+360    	; 0x4660 <main+0xaca>
					break ;
				}
				else
				{
					HLCD_PrintString(" Incorrect PASS");
    44f8:	82 ec       	ldi	r24, 0xC2	; 194
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
					if(count)
    4500:	fe 01       	movw	r30, r28
    4502:	e9 58       	subi	r30, 0x89	; 137
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	80 81       	ld	r24, Z
    4508:	88 23       	and	r24, r24
    450a:	09 f4       	brne	.+2      	; 0x450e <main+0x978>
    450c:	79 c0       	rjmp	.+242    	; 0x4600 <main+0xa6a>
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e8       	ldi	r25, 0x80	; 128
    4512:	ab eb       	ldi	r26, 0xBB	; 187
    4514:	b4 e4       	ldi	r27, 0x44	; 68
    4516:	8d ab       	std	Y+53, r24	; 0x35
    4518:	9e ab       	std	Y+54, r25	; 0x36
    451a:	af ab       	std	Y+55, r26	; 0x37
    451c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451e:	6d a9       	ldd	r22, Y+53	; 0x35
    4520:	7e a9       	ldd	r23, Y+54	; 0x36
    4522:	8f a9       	ldd	r24, Y+55	; 0x37
    4524:	98 ad       	ldd	r25, Y+56	; 0x38
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	4a ef       	ldi	r20, 0xFA	; 250
    452c:	54 e4       	ldi	r21, 0x44	; 68
    452e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4532:	dc 01       	movw	r26, r24
    4534:	cb 01       	movw	r24, r22
    4536:	89 ab       	std	Y+49, r24	; 0x31
    4538:	9a ab       	std	Y+50, r25	; 0x32
    453a:	ab ab       	std	Y+51, r26	; 0x33
    453c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    453e:	69 a9       	ldd	r22, Y+49	; 0x31
    4540:	7a a9       	ldd	r23, Y+50	; 0x32
    4542:	8b a9       	ldd	r24, Y+51	; 0x33
    4544:	9c a9       	ldd	r25, Y+52	; 0x34
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	40 e8       	ldi	r20, 0x80	; 128
    454c:	5f e3       	ldi	r21, 0x3F	; 63
    454e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4552:	88 23       	and	r24, r24
    4554:	2c f4       	brge	.+10     	; 0x4560 <main+0x9ca>
		__ticks = 1;
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	98 ab       	std	Y+48, r25	; 0x30
    455c:	8f a7       	std	Y+47, r24	; 0x2f
    455e:	3f c0       	rjmp	.+126    	; 0x45de <main+0xa48>
	else if (__tmp > 65535)
    4560:	69 a9       	ldd	r22, Y+49	; 0x31
    4562:	7a a9       	ldd	r23, Y+50	; 0x32
    4564:	8b a9       	ldd	r24, Y+51	; 0x33
    4566:	9c a9       	ldd	r25, Y+52	; 0x34
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	3f ef       	ldi	r19, 0xFF	; 255
    456c:	4f e7       	ldi	r20, 0x7F	; 127
    456e:	57 e4       	ldi	r21, 0x47	; 71
    4570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4574:	18 16       	cp	r1, r24
    4576:	4c f5       	brge	.+82     	; 0x45ca <main+0xa34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4578:	6d a9       	ldd	r22, Y+53	; 0x35
    457a:	7e a9       	ldd	r23, Y+54	; 0x36
    457c:	8f a9       	ldd	r24, Y+55	; 0x37
    457e:	98 ad       	ldd	r25, Y+56	; 0x38
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	40 e2       	ldi	r20, 0x20	; 32
    4586:	51 e4       	ldi	r21, 0x41	; 65
    4588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	98 ab       	std	Y+48, r25	; 0x30
    459e:	8f a7       	std	Y+47, r24	; 0x2f
    45a0:	0f c0       	rjmp	.+30     	; 0x45c0 <main+0xa2a>
    45a2:	88 ec       	ldi	r24, 0xC8	; 200
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	9e a7       	std	Y+46, r25	; 0x2e
    45a8:	8d a7       	std	Y+45, r24	; 0x2d
    45aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    45ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	f1 f7       	brne	.-4      	; 0x45ae <main+0xa18>
    45b2:	9e a7       	std	Y+46, r25	; 0x2e
    45b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    45b8:	98 a9       	ldd	r25, Y+48	; 0x30
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	98 ab       	std	Y+48, r25	; 0x30
    45be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    45c2:	98 a9       	ldd	r25, Y+48	; 0x30
    45c4:	00 97       	sbiw	r24, 0x00	; 0
    45c6:	69 f7       	brne	.-38     	; 0x45a2 <main+0xa0c>
    45c8:	14 c0       	rjmp	.+40     	; 0x45f2 <main+0xa5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ca:	69 a9       	ldd	r22, Y+49	; 0x31
    45cc:	7a a9       	ldd	r23, Y+50	; 0x32
    45ce:	8b a9       	ldd	r24, Y+51	; 0x33
    45d0:	9c a9       	ldd	r25, Y+52	; 0x34
    45d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	98 ab       	std	Y+48, r25	; 0x30
    45dc:	8f a7       	std	Y+47, r24	; 0x2f
    45de:	8f a5       	ldd	r24, Y+47	; 0x2f
    45e0:	98 a9       	ldd	r25, Y+48	; 0x30
    45e2:	9c a7       	std	Y+44, r25	; 0x2c
    45e4:	8b a7       	std	Y+43, r24	; 0x2b
    45e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    45e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	f1 f7       	brne	.-4      	; 0x45ea <main+0xa54>
    45ee:	9c a7       	std	Y+44, r25	; 0x2c
    45f0:	8b a7       	std	Y+43, r24	; 0x2b
					{
						_delay_ms(1500);
						HLCD_voidCommand(LCD_Clear_Screen);
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
						HLCD_PrintString(" Try again");
    45f8:	82 ed       	ldi	r24, 0xD2	; 210
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
					}
				}
				data = 0 ;
    4600:	10 92 b4 01 	sts	0x01B4, r1
				input_Pass = 0 ;
    4604:	fe 01       	movw	r30, r28
    4606:	ee 58       	subi	r30, 0x8E	; 142
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	10 82       	st	Z, r1
    460c:	11 82       	std	Z+1, r1	; 0x01
    460e:	12 82       	std	Z+2, r1	; 0x02
    4610:	13 82       	std	Z+3, r1	; 0x03

		if(!strcmp(input_name ,NAME))
		{
			HLCD_voidCommand(LCD_Clear_Screen);
			HLCD_PrintString(" Enter Password");
			while(count--)
    4612:	fe 01       	movw	r30, r28
    4614:	e9 58       	subi	r30, 0x89	; 137
    4616:	ff 4f       	sbci	r31, 0xFF	; 255
    4618:	80 81       	ld	r24, Z
    461a:	c4 57       	subi	r28, 0x74	; 116
    461c:	df 4f       	sbci	r29, 0xFF	; 255
    461e:	88 83       	st	Y, r24
    4620:	cc 58       	subi	r28, 0x8C	; 140
    4622:	d0 40       	sbci	r29, 0x00	; 0
    4624:	c4 57       	subi	r28, 0x74	; 116
    4626:	df 4f       	sbci	r29, 0xFF	; 255
    4628:	e8 81       	ld	r30, Y
    462a:	cc 58       	subi	r28, 0x8C	; 140
    462c:	d0 40       	sbci	r29, 0x00	; 0
    462e:	ee 23       	and	r30, r30
    4630:	31 f0       	breq	.+12     	; 0x463e <main+0xaa8>
    4632:	f1 e0       	ldi	r31, 0x01	; 1
    4634:	c4 57       	subi	r28, 0x74	; 116
    4636:	df 4f       	sbci	r29, 0xFF	; 255
    4638:	f8 83       	st	Y, r31
    463a:	cc 58       	subi	r28, 0x8C	; 140
    463c:	d0 40       	sbci	r29, 0x00	; 0
    463e:	c4 57       	subi	r28, 0x74	; 116
    4640:	df 4f       	sbci	r29, 0xFF	; 255
    4642:	98 81       	ld	r25, Y
    4644:	cc 58       	subi	r28, 0x8C	; 140
    4646:	d0 40       	sbci	r29, 0x00	; 0
    4648:	de 01       	movw	r26, r28
    464a:	a9 58       	subi	r26, 0x89	; 137
    464c:	bf 4f       	sbci	r27, 0xFF	; 255
    464e:	fe 01       	movw	r30, r28
    4650:	e9 58       	subi	r30, 0x89	; 137
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 81       	ld	r24, Z
    4656:	81 50       	subi	r24, 0x01	; 1
    4658:	8c 93       	st	X, r24
    465a:	99 23       	and	r25, r25
    465c:	09 f0       	breq	.+2      	; 0x4660 <main+0xaca>
    465e:	2d ce       	rjmp	.-934    	; 0x42ba <main+0x724>
				}
				data = 0 ;
				input_Pass = 0 ;
			}

			if(flage)
    4660:	fe 01       	movw	r30, r28
    4662:	ea 58       	subi	r30, 0x8A	; 138
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	80 81       	ld	r24, Z
    4668:	88 23       	and	r24, r24
    466a:	09 f4       	brne	.+2      	; 0x466e <main+0xad8>
    466c:	ba c0       	rjmp	.+372    	; 0x47e2 <main+0xc4c>
			{
				HLCD_voidCommand(LCD_Clear_Screen);
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
				Servo_SetAngle(SERVO1 ,0);
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	60 e0       	ldi	r22, 0x00	; 0
    4678:	0e 94 a1 13 	call	0x2742	; 0x2742 <Servo_SetAngle>
				HLCD_voidCommand(LCD_Clear_Screen);
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
				HLCD_PrintString(" Change Password");
    4682:	8d ed       	ldi	r24, 0xDD	; 221
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
				HLCD_GOTO_XY(2,1);
    468a:	82 e0       	ldi	r24, 0x02	; 2
    468c:	61 e0       	ldi	r22, 0x01	; 1
    468e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
				HLCD_PrintString(" 1-Y or 2-N : ");
    4692:	8e ee       	ldi	r24, 0xEE	; 238
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
				data = 0 ;
    469a:	10 92 b4 01 	sts	0x01B4, r1
				while(1)
				{
					//data = Keypad_getkey();
					data = Bluetooth_RecieveData();
    469e:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <Bluetooth_RecieveData>
    46a2:	80 93 b4 01 	sts	0x01B4, r24
					if(data == '1')
    46a6:	80 91 b4 01 	lds	r24, 0x01B4
    46aa:	81 33       	cpi	r24, 0x31	; 49
    46ac:	09 f0       	breq	.+2      	; 0x46b0 <main+0xb1a>
    46ae:	90 c0       	rjmp	.+288    	; 0x47d0 <main+0xc3a>
					{
						HLCD_SendData('1');
    46b0:	81 e3       	ldi	r24, 0x31	; 49
    46b2:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HLCD_SendData>
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	aa ef       	ldi	r26, 0xFA	; 250
    46bc:	b3 e4       	ldi	r27, 0x43	; 67
    46be:	8f a3       	std	Y+39, r24	; 0x27
    46c0:	98 a7       	std	Y+40, r25	; 0x28
    46c2:	a9 a7       	std	Y+41, r26	; 0x29
    46c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c6:	6f a1       	ldd	r22, Y+39	; 0x27
    46c8:	78 a5       	ldd	r23, Y+40	; 0x28
    46ca:	89 a5       	ldd	r24, Y+41	; 0x29
    46cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	4a ef       	ldi	r20, 0xFA	; 250
    46d4:	54 e4       	ldi	r21, 0x44	; 68
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	8b a3       	std	Y+35, r24	; 0x23
    46e0:	9c a3       	std	Y+36, r25	; 0x24
    46e2:	ad a3       	std	Y+37, r26	; 0x25
    46e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46e6:	6b a1       	ldd	r22, Y+35	; 0x23
    46e8:	7c a1       	ldd	r23, Y+36	; 0x24
    46ea:	8d a1       	ldd	r24, Y+37	; 0x25
    46ec:	9e a1       	ldd	r25, Y+38	; 0x26
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e8       	ldi	r20, 0x80	; 128
    46f4:	5f e3       	ldi	r21, 0x3F	; 63
    46f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46fa:	88 23       	and	r24, r24
    46fc:	2c f4       	brge	.+10     	; 0x4708 <main+0xb72>
		__ticks = 1;
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	9a a3       	std	Y+34, r25	; 0x22
    4704:	89 a3       	std	Y+33, r24	; 0x21
    4706:	3f c0       	rjmp	.+126    	; 0x4786 <main+0xbf0>
	else if (__tmp > 65535)
    4708:	6b a1       	ldd	r22, Y+35	; 0x23
    470a:	7c a1       	ldd	r23, Y+36	; 0x24
    470c:	8d a1       	ldd	r24, Y+37	; 0x25
    470e:	9e a1       	ldd	r25, Y+38	; 0x26
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	3f ef       	ldi	r19, 0xFF	; 255
    4714:	4f e7       	ldi	r20, 0x7F	; 127
    4716:	57 e4       	ldi	r21, 0x47	; 71
    4718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    471c:	18 16       	cp	r1, r24
    471e:	4c f5       	brge	.+82     	; 0x4772 <main+0xbdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4720:	6f a1       	ldd	r22, Y+39	; 0x27
    4722:	78 a5       	ldd	r23, Y+40	; 0x28
    4724:	89 a5       	ldd	r24, Y+41	; 0x29
    4726:	9a a5       	ldd	r25, Y+42	; 0x2a
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	40 e2       	ldi	r20, 0x20	; 32
    472e:	51 e4       	ldi	r21, 0x41	; 65
    4730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	bc 01       	movw	r22, r24
    473a:	cd 01       	movw	r24, r26
    473c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	9a a3       	std	Y+34, r25	; 0x22
    4746:	89 a3       	std	Y+33, r24	; 0x21
    4748:	0f c0       	rjmp	.+30     	; 0x4768 <main+0xbd2>
    474a:	88 ec       	ldi	r24, 0xC8	; 200
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	98 a3       	std	Y+32, r25	; 0x20
    4750:	8f 8f       	std	Y+31, r24	; 0x1f
    4752:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4754:	98 a1       	ldd	r25, Y+32	; 0x20
    4756:	01 97       	sbiw	r24, 0x01	; 1
    4758:	f1 f7       	brne	.-4      	; 0x4756 <main+0xbc0>
    475a:	98 a3       	std	Y+32, r25	; 0x20
    475c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475e:	89 a1       	ldd	r24, Y+33	; 0x21
    4760:	9a a1       	ldd	r25, Y+34	; 0x22
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	9a a3       	std	Y+34, r25	; 0x22
    4766:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4768:	89 a1       	ldd	r24, Y+33	; 0x21
    476a:	9a a1       	ldd	r25, Y+34	; 0x22
    476c:	00 97       	sbiw	r24, 0x00	; 0
    476e:	69 f7       	brne	.-38     	; 0x474a <main+0xbb4>
    4770:	14 c0       	rjmp	.+40     	; 0x479a <main+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4772:	6b a1       	ldd	r22, Y+35	; 0x23
    4774:	7c a1       	ldd	r23, Y+36	; 0x24
    4776:	8d a1       	ldd	r24, Y+37	; 0x25
    4778:	9e a1       	ldd	r25, Y+38	; 0x26
    477a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	9a a3       	std	Y+34, r25	; 0x22
    4784:	89 a3       	std	Y+33, r24	; 0x21
    4786:	89 a1       	ldd	r24, Y+33	; 0x21
    4788:	9a a1       	ldd	r25, Y+34	; 0x22
    478a:	9e 8f       	std	Y+30, r25	; 0x1e
    478c:	8d 8f       	std	Y+29, r24	; 0x1d
    478e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4790:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	f1 f7       	brne	.-4      	; 0x4792 <main+0xbfc>
    4796:	9e 8f       	std	Y+30, r25	; 0x1e
    4798:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500);
						HLCD_voidCommand(LCD_Clear_Screen);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
						HLCD_PrintString("Enter new name");
    47a0:	8d ef       	ldi	r24, 0xFD	; 253
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
						HLCD_GOTO_XY(2,1);
    47a8:	82 e0       	ldi	r24, 0x02	; 2
    47aa:	61 e0       	ldi	r22, 0x01	; 1
    47ac:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
						Get_name();
    47b0:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <Get_name>
						HLCD_voidCommand(LCD_Clear_Screen);
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
						HLCD_PrintString("Enter new password");
    47ba:	8c e0       	ldi	r24, 0x0C	; 12
    47bc:	91 e0       	ldi	r25, 0x01	; 1
    47be:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
						HLCD_GOTO_XY(2,1);
    47c2:	82 e0       	ldi	r24, 0x02	; 2
    47c4:	61 e0       	ldi	r22, 0x01	; 1
    47c6:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HLCD_GOTO_XY>
						Get_Password();
    47ca:	0e 94 df 1c 	call	0x39be	; 0x39be <Get_Password>
    47ce:	01 c1       	rjmp	.+514    	; 0x49d2 <main+0xe3c>
						break ;
					}
					else if(data == '2')
    47d0:	80 91 b4 01 	lds	r24, 0x01B4
    47d4:	82 33       	cpi	r24, 0x32	; 50
    47d6:	09 f0       	breq	.+2      	; 0x47da <main+0xc44>
    47d8:	62 cf       	rjmp	.-316    	; 0x469e <main+0xb08>
					{
						HLCD_SendData('2');
    47da:	82 e3       	ldi	r24, 0x32	; 50
    47dc:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HLCD_SendData>
    47e0:	f8 c0       	rjmp	.+496    	; 0x49d2 <main+0xe3c>

				}
			}
			else
			{
				BUZZER_voidSetBuzzerHigh(BUZZER1);
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	0e 94 8f 1c 	call	0x391e	; 0x391e <BUZZER_voidSetBuzzerHigh>
				LED_voidSetLEDHigh(LED1);
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LED_voidSetLEDHigh>
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	90 e8       	ldi	r25, 0x80	; 128
    47f2:	ab e3       	ldi	r26, 0x3B	; 59
    47f4:	b5 e4       	ldi	r27, 0x45	; 69
    47f6:	89 8f       	std	Y+25, r24	; 0x19
    47f8:	9a 8f       	std	Y+26, r25	; 0x1a
    47fa:	ab 8f       	std	Y+27, r26	; 0x1b
    47fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	4a ef       	ldi	r20, 0xFA	; 250
    480c:	54 e4       	ldi	r21, 0x44	; 68
    480e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4812:	dc 01       	movw	r26, r24
    4814:	cb 01       	movw	r24, r22
    4816:	8d 8b       	std	Y+21, r24	; 0x15
    4818:	9e 8b       	std	Y+22, r25	; 0x16
    481a:	af 8b       	std	Y+23, r26	; 0x17
    481c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    481e:	6d 89       	ldd	r22, Y+21	; 0x15
    4820:	7e 89       	ldd	r23, Y+22	; 0x16
    4822:	8f 89       	ldd	r24, Y+23	; 0x17
    4824:	98 8d       	ldd	r25, Y+24	; 0x18
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	40 e8       	ldi	r20, 0x80	; 128
    482c:	5f e3       	ldi	r21, 0x3F	; 63
    482e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4832:	88 23       	and	r24, r24
    4834:	2c f4       	brge	.+10     	; 0x4840 <main+0xcaa>
		__ticks = 1;
    4836:	81 e0       	ldi	r24, 0x01	; 1
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	9c 8b       	std	Y+20, r25	; 0x14
    483c:	8b 8b       	std	Y+19, r24	; 0x13
    483e:	3f c0       	rjmp	.+126    	; 0x48be <main+0xd28>
	else if (__tmp > 65535)
    4840:	6d 89       	ldd	r22, Y+21	; 0x15
    4842:	7e 89       	ldd	r23, Y+22	; 0x16
    4844:	8f 89       	ldd	r24, Y+23	; 0x17
    4846:	98 8d       	ldd	r25, Y+24	; 0x18
    4848:	20 e0       	ldi	r18, 0x00	; 0
    484a:	3f ef       	ldi	r19, 0xFF	; 255
    484c:	4f e7       	ldi	r20, 0x7F	; 127
    484e:	57 e4       	ldi	r21, 0x47	; 71
    4850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4854:	18 16       	cp	r1, r24
    4856:	4c f5       	brge	.+82     	; 0x48aa <main+0xd14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4858:	69 8d       	ldd	r22, Y+25	; 0x19
    485a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    485c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    485e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	40 e2       	ldi	r20, 0x20	; 32
    4866:	51 e4       	ldi	r21, 0x41	; 65
    4868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	bc 01       	movw	r22, r24
    4872:	cd 01       	movw	r24, r26
    4874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	9c 8b       	std	Y+20, r25	; 0x14
    487e:	8b 8b       	std	Y+19, r24	; 0x13
    4880:	0f c0       	rjmp	.+30     	; 0x48a0 <main+0xd0a>
    4882:	88 ec       	ldi	r24, 0xC8	; 200
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	9a 8b       	std	Y+18, r25	; 0x12
    4888:	89 8b       	std	Y+17, r24	; 0x11
    488a:	89 89       	ldd	r24, Y+17	; 0x11
    488c:	9a 89       	ldd	r25, Y+18	; 0x12
    488e:	01 97       	sbiw	r24, 0x01	; 1
    4890:	f1 f7       	brne	.-4      	; 0x488e <main+0xcf8>
    4892:	9a 8b       	std	Y+18, r25	; 0x12
    4894:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4896:	8b 89       	ldd	r24, Y+19	; 0x13
    4898:	9c 89       	ldd	r25, Y+20	; 0x14
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	9c 8b       	std	Y+20, r25	; 0x14
    489e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48a0:	8b 89       	ldd	r24, Y+19	; 0x13
    48a2:	9c 89       	ldd	r25, Y+20	; 0x14
    48a4:	00 97       	sbiw	r24, 0x00	; 0
    48a6:	69 f7       	brne	.-38     	; 0x4882 <main+0xcec>
    48a8:	14 c0       	rjmp	.+40     	; 0x48d2 <main+0xd3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48aa:	6d 89       	ldd	r22, Y+21	; 0x15
    48ac:	7e 89       	ldd	r23, Y+22	; 0x16
    48ae:	8f 89       	ldd	r24, Y+23	; 0x17
    48b0:	98 8d       	ldd	r25, Y+24	; 0x18
    48b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	9c 8b       	std	Y+20, r25	; 0x14
    48bc:	8b 8b       	std	Y+19, r24	; 0x13
    48be:	8b 89       	ldd	r24, Y+19	; 0x13
    48c0:	9c 89       	ldd	r25, Y+20	; 0x14
    48c2:	98 8b       	std	Y+16, r25	; 0x10
    48c4:	8f 87       	std	Y+15, r24	; 0x0f
    48c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    48c8:	98 89       	ldd	r25, Y+16	; 0x10
    48ca:	01 97       	sbiw	r24, 0x01	; 1
    48cc:	f1 f7       	brne	.-4      	; 0x48ca <main+0xd34>
    48ce:	98 8b       	std	Y+16, r25	; 0x10
    48d0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(3000);
				BUZZER_voidSetBuzzerLow(BUZZER1);
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	0e 94 b7 1c 	call	0x396e	; 0x396e <BUZZER_voidSetBuzzerLow>
				LED_voidSetLEDLow(LED1);
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <LED_voidSetLEDLow>
    48de:	79 c0       	rjmp	.+242    	; 0x49d2 <main+0xe3c>
			}
		}
		else
		{
			HLCD_voidCommand(LCD_Clear_Screen);
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
			HLCD_PrintString("Incorrect Name");
    48e6:	8f e1       	ldi	r24, 0x1F	; 31
    48e8:	91 e0       	ldi	r25, 0x01	; 1
    48ea:	0e 94 00 19 	call	0x3200	; 0x3200 <HLCD_PrintString>
    48ee:	80 e0       	ldi	r24, 0x00	; 0
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	aa ef       	ldi	r26, 0xFA	; 250
    48f4:	b4 e4       	ldi	r27, 0x44	; 68
    48f6:	8b 87       	std	Y+11, r24	; 0x0b
    48f8:	9c 87       	std	Y+12, r25	; 0x0c
    48fa:	ad 87       	std	Y+13, r26	; 0x0d
    48fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4900:	7c 85       	ldd	r23, Y+12	; 0x0c
    4902:	8d 85       	ldd	r24, Y+13	; 0x0d
    4904:	9e 85       	ldd	r25, Y+14	; 0x0e
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	4a ef       	ldi	r20, 0xFA	; 250
    490c:	54 e4       	ldi	r21, 0x44	; 68
    490e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	8f 83       	std	Y+7, r24	; 0x07
    4918:	98 87       	std	Y+8, r25	; 0x08
    491a:	a9 87       	std	Y+9, r26	; 0x09
    491c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    491e:	6f 81       	ldd	r22, Y+7	; 0x07
    4920:	78 85       	ldd	r23, Y+8	; 0x08
    4922:	89 85       	ldd	r24, Y+9	; 0x09
    4924:	9a 85       	ldd	r25, Y+10	; 0x0a
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e8       	ldi	r20, 0x80	; 128
    492c:	5f e3       	ldi	r21, 0x3F	; 63
    492e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4932:	88 23       	and	r24, r24
    4934:	2c f4       	brge	.+10     	; 0x4940 <main+0xdaa>
		__ticks = 1;
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	9e 83       	std	Y+6, r25	; 0x06
    493c:	8d 83       	std	Y+5, r24	; 0x05
    493e:	3f c0       	rjmp	.+126    	; 0x49be <main+0xe28>
	else if (__tmp > 65535)
    4940:	6f 81       	ldd	r22, Y+7	; 0x07
    4942:	78 85       	ldd	r23, Y+8	; 0x08
    4944:	89 85       	ldd	r24, Y+9	; 0x09
    4946:	9a 85       	ldd	r25, Y+10	; 0x0a
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	3f ef       	ldi	r19, 0xFF	; 255
    494c:	4f e7       	ldi	r20, 0x7F	; 127
    494e:	57 e4       	ldi	r21, 0x47	; 71
    4950:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4954:	18 16       	cp	r1, r24
    4956:	4c f5       	brge	.+82     	; 0x49aa <main+0xe14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4958:	6b 85       	ldd	r22, Y+11	; 0x0b
    495a:	7c 85       	ldd	r23, Y+12	; 0x0c
    495c:	8d 85       	ldd	r24, Y+13	; 0x0d
    495e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	40 e2       	ldi	r20, 0x20	; 32
    4966:	51 e4       	ldi	r21, 0x41	; 65
    4968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	bc 01       	movw	r22, r24
    4972:	cd 01       	movw	r24, r26
    4974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	9e 83       	std	Y+6, r25	; 0x06
    497e:	8d 83       	std	Y+5, r24	; 0x05
    4980:	0f c0       	rjmp	.+30     	; 0x49a0 <main+0xe0a>
    4982:	88 ec       	ldi	r24, 0xC8	; 200
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	9c 83       	std	Y+4, r25	; 0x04
    4988:	8b 83       	std	Y+3, r24	; 0x03
    498a:	8b 81       	ldd	r24, Y+3	; 0x03
    498c:	9c 81       	ldd	r25, Y+4	; 0x04
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	f1 f7       	brne	.-4      	; 0x498e <main+0xdf8>
    4992:	9c 83       	std	Y+4, r25	; 0x04
    4994:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4996:	8d 81       	ldd	r24, Y+5	; 0x05
    4998:	9e 81       	ldd	r25, Y+6	; 0x06
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	9e 83       	std	Y+6, r25	; 0x06
    499e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a0:	8d 81       	ldd	r24, Y+5	; 0x05
    49a2:	9e 81       	ldd	r25, Y+6	; 0x06
    49a4:	00 97       	sbiw	r24, 0x00	; 0
    49a6:	69 f7       	brne	.-38     	; 0x4982 <main+0xdec>
    49a8:	14 c0       	rjmp	.+40     	; 0x49d2 <main+0xe3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49aa:	6f 81       	ldd	r22, Y+7	; 0x07
    49ac:	78 85       	ldd	r23, Y+8	; 0x08
    49ae:	89 85       	ldd	r24, Y+9	; 0x09
    49b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    49b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	9e 83       	std	Y+6, r25	; 0x06
    49bc:	8d 83       	std	Y+5, r24	; 0x05
    49be:	8d 81       	ldd	r24, Y+5	; 0x05
    49c0:	9e 81       	ldd	r25, Y+6	; 0x06
    49c2:	9a 83       	std	Y+2, r25	; 0x02
    49c4:	89 83       	std	Y+1, r24	; 0x01
    49c6:	89 81       	ldd	r24, Y+1	; 0x01
    49c8:	9a 81       	ldd	r25, Y+2	; 0x02
    49ca:	01 97       	sbiw	r24, 0x01	; 1
    49cc:	f1 f7       	brne	.-4      	; 0x49ca <main+0xe34>
    49ce:	9a 83       	std	Y+2, r25	; 0x02
    49d0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
		}
		HLCD_voidCommand(LCD_Clear_Screen);
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <HLCD_voidCommand>
		Servo_SetAngle(SERVO1 ,0);
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	60 e0       	ldi	r22, 0x00	; 0
    49dc:	0e 94 a1 13 	call	0x2742	; 0x2742 <Servo_SetAngle>
    49e0:	fa cb       	rjmp	.-2060   	; 0x41d6 <main+0x640>

000049e2 <__mulsi3>:
    49e2:	62 9f       	mul	r22, r18
    49e4:	d0 01       	movw	r26, r0
    49e6:	73 9f       	mul	r23, r19
    49e8:	f0 01       	movw	r30, r0
    49ea:	82 9f       	mul	r24, r18
    49ec:	e0 0d       	add	r30, r0
    49ee:	f1 1d       	adc	r31, r1
    49f0:	64 9f       	mul	r22, r20
    49f2:	e0 0d       	add	r30, r0
    49f4:	f1 1d       	adc	r31, r1
    49f6:	92 9f       	mul	r25, r18
    49f8:	f0 0d       	add	r31, r0
    49fa:	83 9f       	mul	r24, r19
    49fc:	f0 0d       	add	r31, r0
    49fe:	74 9f       	mul	r23, r20
    4a00:	f0 0d       	add	r31, r0
    4a02:	65 9f       	mul	r22, r21
    4a04:	f0 0d       	add	r31, r0
    4a06:	99 27       	eor	r25, r25
    4a08:	72 9f       	mul	r23, r18
    4a0a:	b0 0d       	add	r27, r0
    4a0c:	e1 1d       	adc	r30, r1
    4a0e:	f9 1f       	adc	r31, r25
    4a10:	63 9f       	mul	r22, r19
    4a12:	b0 0d       	add	r27, r0
    4a14:	e1 1d       	adc	r30, r1
    4a16:	f9 1f       	adc	r31, r25
    4a18:	bd 01       	movw	r22, r26
    4a1a:	cf 01       	movw	r24, r30
    4a1c:	11 24       	eor	r1, r1
    4a1e:	08 95       	ret

00004a20 <__udivmodsi4>:
    4a20:	a1 e2       	ldi	r26, 0x21	; 33
    4a22:	1a 2e       	mov	r1, r26
    4a24:	aa 1b       	sub	r26, r26
    4a26:	bb 1b       	sub	r27, r27
    4a28:	fd 01       	movw	r30, r26
    4a2a:	0d c0       	rjmp	.+26     	; 0x4a46 <__udivmodsi4_ep>

00004a2c <__udivmodsi4_loop>:
    4a2c:	aa 1f       	adc	r26, r26
    4a2e:	bb 1f       	adc	r27, r27
    4a30:	ee 1f       	adc	r30, r30
    4a32:	ff 1f       	adc	r31, r31
    4a34:	a2 17       	cp	r26, r18
    4a36:	b3 07       	cpc	r27, r19
    4a38:	e4 07       	cpc	r30, r20
    4a3a:	f5 07       	cpc	r31, r21
    4a3c:	20 f0       	brcs	.+8      	; 0x4a46 <__udivmodsi4_ep>
    4a3e:	a2 1b       	sub	r26, r18
    4a40:	b3 0b       	sbc	r27, r19
    4a42:	e4 0b       	sbc	r30, r20
    4a44:	f5 0b       	sbc	r31, r21

00004a46 <__udivmodsi4_ep>:
    4a46:	66 1f       	adc	r22, r22
    4a48:	77 1f       	adc	r23, r23
    4a4a:	88 1f       	adc	r24, r24
    4a4c:	99 1f       	adc	r25, r25
    4a4e:	1a 94       	dec	r1
    4a50:	69 f7       	brne	.-38     	; 0x4a2c <__udivmodsi4_loop>
    4a52:	60 95       	com	r22
    4a54:	70 95       	com	r23
    4a56:	80 95       	com	r24
    4a58:	90 95       	com	r25
    4a5a:	9b 01       	movw	r18, r22
    4a5c:	ac 01       	movw	r20, r24
    4a5e:	bd 01       	movw	r22, r26
    4a60:	cf 01       	movw	r24, r30
    4a62:	08 95       	ret

00004a64 <__prologue_saves__>:
    4a64:	2f 92       	push	r2
    4a66:	3f 92       	push	r3
    4a68:	4f 92       	push	r4
    4a6a:	5f 92       	push	r5
    4a6c:	6f 92       	push	r6
    4a6e:	7f 92       	push	r7
    4a70:	8f 92       	push	r8
    4a72:	9f 92       	push	r9
    4a74:	af 92       	push	r10
    4a76:	bf 92       	push	r11
    4a78:	cf 92       	push	r12
    4a7a:	df 92       	push	r13
    4a7c:	ef 92       	push	r14
    4a7e:	ff 92       	push	r15
    4a80:	0f 93       	push	r16
    4a82:	1f 93       	push	r17
    4a84:	cf 93       	push	r28
    4a86:	df 93       	push	r29
    4a88:	cd b7       	in	r28, 0x3d	; 61
    4a8a:	de b7       	in	r29, 0x3e	; 62
    4a8c:	ca 1b       	sub	r28, r26
    4a8e:	db 0b       	sbc	r29, r27
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	0f be       	out	0x3f, r0	; 63
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	09 94       	ijmp

00004a9c <__epilogue_restores__>:
    4a9c:	2a 88       	ldd	r2, Y+18	; 0x12
    4a9e:	39 88       	ldd	r3, Y+17	; 0x11
    4aa0:	48 88       	ldd	r4, Y+16	; 0x10
    4aa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4aa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    4aac:	aa 84       	ldd	r10, Y+10	; 0x0a
    4aae:	b9 84       	ldd	r11, Y+9	; 0x09
    4ab0:	c8 84       	ldd	r12, Y+8	; 0x08
    4ab2:	df 80       	ldd	r13, Y+7	; 0x07
    4ab4:	ee 80       	ldd	r14, Y+6	; 0x06
    4ab6:	fd 80       	ldd	r15, Y+5	; 0x05
    4ab8:	0c 81       	ldd	r16, Y+4	; 0x04
    4aba:	1b 81       	ldd	r17, Y+3	; 0x03
    4abc:	aa 81       	ldd	r26, Y+2	; 0x02
    4abe:	b9 81       	ldd	r27, Y+1	; 0x01
    4ac0:	ce 0f       	add	r28, r30
    4ac2:	d1 1d       	adc	r29, r1
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	f8 94       	cli
    4ac8:	de bf       	out	0x3e, r29	; 62
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	ed 01       	movw	r28, r26
    4ad0:	08 95       	ret

00004ad2 <strcmp>:
    4ad2:	fb 01       	movw	r30, r22
    4ad4:	dc 01       	movw	r26, r24
    4ad6:	8d 91       	ld	r24, X+
    4ad8:	01 90       	ld	r0, Z+
    4ada:	80 19       	sub	r24, r0
    4adc:	01 10       	cpse	r0, r1
    4ade:	d9 f3       	breq	.-10     	; 0x4ad6 <strcmp+0x4>
    4ae0:	99 0b       	sbc	r25, r25
    4ae2:	08 95       	ret

00004ae4 <itoa>:
    4ae4:	fb 01       	movw	r30, r22
    4ae6:	9f 01       	movw	r18, r30
    4ae8:	e8 94       	clt
    4aea:	42 30       	cpi	r20, 0x02	; 2
    4aec:	c4 f0       	brlt	.+48     	; 0x4b1e <itoa+0x3a>
    4aee:	45 32       	cpi	r20, 0x25	; 37
    4af0:	b4 f4       	brge	.+44     	; 0x4b1e <itoa+0x3a>
    4af2:	4a 30       	cpi	r20, 0x0A	; 10
    4af4:	29 f4       	brne	.+10     	; 0x4b00 <itoa+0x1c>
    4af6:	97 fb       	bst	r25, 7
    4af8:	1e f4       	brtc	.+6      	; 0x4b00 <itoa+0x1c>
    4afa:	90 95       	com	r25
    4afc:	81 95       	neg	r24
    4afe:	9f 4f       	sbci	r25, 0xFF	; 255
    4b00:	64 2f       	mov	r22, r20
    4b02:	77 27       	eor	r23, r23
    4b04:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__udivmodhi4>
    4b08:	80 5d       	subi	r24, 0xD0	; 208
    4b0a:	8a 33       	cpi	r24, 0x3A	; 58
    4b0c:	0c f0       	brlt	.+2      	; 0x4b10 <itoa+0x2c>
    4b0e:	89 5d       	subi	r24, 0xD9	; 217
    4b10:	81 93       	st	Z+, r24
    4b12:	cb 01       	movw	r24, r22
    4b14:	00 97       	sbiw	r24, 0x00	; 0
    4b16:	a1 f7       	brne	.-24     	; 0x4b00 <itoa+0x1c>
    4b18:	16 f4       	brtc	.+4      	; 0x4b1e <itoa+0x3a>
    4b1a:	5d e2       	ldi	r21, 0x2D	; 45
    4b1c:	51 93       	st	Z+, r21
    4b1e:	10 82       	st	Z, r1
    4b20:	c9 01       	movw	r24, r18
    4b22:	0c 94 93 25 	jmp	0x4b26	; 0x4b26 <strrev>

00004b26 <strrev>:
    4b26:	dc 01       	movw	r26, r24
    4b28:	fc 01       	movw	r30, r24
    4b2a:	67 2f       	mov	r22, r23
    4b2c:	71 91       	ld	r23, Z+
    4b2e:	77 23       	and	r23, r23
    4b30:	e1 f7       	brne	.-8      	; 0x4b2a <strrev+0x4>
    4b32:	32 97       	sbiw	r30, 0x02	; 2
    4b34:	04 c0       	rjmp	.+8      	; 0x4b3e <strrev+0x18>
    4b36:	7c 91       	ld	r23, X
    4b38:	6d 93       	st	X+, r22
    4b3a:	70 83       	st	Z, r23
    4b3c:	62 91       	ld	r22, -Z
    4b3e:	ae 17       	cp	r26, r30
    4b40:	bf 07       	cpc	r27, r31
    4b42:	c8 f3       	brcs	.-14     	; 0x4b36 <strrev+0x10>
    4b44:	08 95       	ret

00004b46 <__udivmodhi4>:
    4b46:	aa 1b       	sub	r26, r26
    4b48:	bb 1b       	sub	r27, r27
    4b4a:	51 e1       	ldi	r21, 0x11	; 17
    4b4c:	07 c0       	rjmp	.+14     	; 0x4b5c <__udivmodhi4_ep>

00004b4e <__udivmodhi4_loop>:
    4b4e:	aa 1f       	adc	r26, r26
    4b50:	bb 1f       	adc	r27, r27
    4b52:	a6 17       	cp	r26, r22
    4b54:	b7 07       	cpc	r27, r23
    4b56:	10 f0       	brcs	.+4      	; 0x4b5c <__udivmodhi4_ep>
    4b58:	a6 1b       	sub	r26, r22
    4b5a:	b7 0b       	sbc	r27, r23

00004b5c <__udivmodhi4_ep>:
    4b5c:	88 1f       	adc	r24, r24
    4b5e:	99 1f       	adc	r25, r25
    4b60:	5a 95       	dec	r21
    4b62:	a9 f7       	brne	.-22     	; 0x4b4e <__udivmodhi4_loop>
    4b64:	80 95       	com	r24
    4b66:	90 95       	com	r25
    4b68:	bc 01       	movw	r22, r24
    4b6a:	cd 01       	movw	r24, r26
    4b6c:	08 95       	ret

00004b6e <_exit>:
    4b6e:	f8 94       	cli

00004b70 <__stop_program>:
    4b70:	ff cf       	rjmp	.-2      	; 0x4b70 <__stop_program>
