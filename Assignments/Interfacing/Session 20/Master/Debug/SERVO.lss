
SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00005e34  00005ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080018a  0080018a  00005ff2  2**0
                  ALLOC
  3 .debug_aranges 00000500  00000000  00000000  00005ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000086a  00000000  00000000  000064f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004105  00000000  00000000  00006d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d48  00000000  00000000  0000ae61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004bb4  00000000  00000000  0000cba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a0  00000000  00000000  00011760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bd0  00000000  00000000  00011e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ae  00000000  00000000  000129d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0001486d  00000000  00000000  0001327e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  00027aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__vector_1>
       8:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <__vector_2>
       c:	0c 94 b5 27 	jmp	0x4f6a	; 0x4f6a <__vector_3>
      10:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 2e 	jmp	0x5dc2	; 0x5dc2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 2e 	jmp	0x5dc2	; 0x5dc2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 2e 	jmp	0x5de2	; 0x5de2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0d 2f 	jmp	0x5e1a	; 0x5e1a <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 e9 2e 	jmp	0x5dd2	; 0x5dd2 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 05 2f 	jmp	0x5e0a	; 0x5e0a <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:
#include "../4-LIB/BIT_MATH.h"
#include "../4-LIB/STD_TYPES.h"
#include "../1-MCAL/05_SPI/SPI_interface.h"

int main()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2f 97       	sbiw	r28, 0x0f	; 15
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	u8 i = 0;
     cea:	1f 86       	std	Y+15, r1	; 0x0f
	SPI_MasterInit();
     cec:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <SPI_MasterInit>
	//SPI_SendChar('A');
	for(i=0;i<10;i++)
     cf0:	1f 86       	std	Y+15, r1	; 0x0f
     cf2:	78 c0       	rjmp	.+240    	; 0xde4 <main+0x10e>
		   { SPI_SendChar(i);
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <SPI_SendChar>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	aa e7       	ldi	r26, 0x7A	; 122
     d00:	b4 e4       	ldi	r27, 0x44	; 68
     d02:	8b 87       	std	Y+11, r24	; 0x0b
     d04:	9c 87       	std	Y+12, r25	; 0x0c
     d06:	ad 87       	std	Y+13, r26	; 0x0d
     d08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d10:	9e 85       	ldd	r25, Y+14	; 0x0e
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	4a ef       	ldi	r20, 0xFA	; 250
     d18:	54 e4       	ldi	r21, 0x44	; 68
     d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	8f 83       	std	Y+7, r24	; 0x07
     d24:	98 87       	std	Y+8, r25	; 0x08
     d26:	a9 87       	std	Y+9, r26	; 0x09
     d28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d2a:	6f 81       	ldd	r22, Y+7	; 0x07
     d2c:	78 85       	ldd	r23, Y+8	; 0x08
     d2e:	89 85       	ldd	r24, Y+9	; 0x09
     d30:	9a 85       	ldd	r25, Y+10	; 0x0a
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e8       	ldi	r20, 0x80	; 128
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3e:	88 23       	and	r24, r24
     d40:	2c f4       	brge	.+10     	; 0xd4c <main+0x76>
		__ticks = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9e 83       	std	Y+6, r25	; 0x06
     d48:	8d 83       	std	Y+5, r24	; 0x05
     d4a:	3f c0       	rjmp	.+126    	; 0xdca <main+0xf4>
	else if (__tmp > 65535)
     d4c:	6f 81       	ldd	r22, Y+7	; 0x07
     d4e:	78 85       	ldd	r23, Y+8	; 0x08
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	3f ef       	ldi	r19, 0xFF	; 255
     d58:	4f e7       	ldi	r20, 0x7F	; 127
     d5a:	57 e4       	ldi	r21, 0x47	; 71
     d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d60:	18 16       	cp	r1, r24
     d62:	4c f5       	brge	.+82     	; 0xdb6 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d64:	6b 85       	ldd	r22, Y+11	; 0x0b
     d66:	7c 85       	ldd	r23, Y+12	; 0x0c
     d68:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e2       	ldi	r20, 0x20	; 32
     d72:	51 e4       	ldi	r21, 0x41	; 65
     d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	0f c0       	rjmp	.+30     	; 0xdac <main+0xd6>
     d8e:	88 ec       	ldi	r24, 0xC8	; 200
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <main+0xc4>
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	9e 83       	std	Y+6, r25	; 0x06
     daa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	69 f7       	brne	.-38     	; 0xd8e <main+0xb8>
     db4:	14 c0       	rjmp	.+40     	; 0xdde <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db6:	6f 81       	ldd	r22, Y+7	; 0x07
     db8:	78 85       	ldd	r23, Y+8	; 0x08
     dba:	89 85       	ldd	r24, Y+9	; 0x09
     dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	9e 83       	std	Y+6, r25	; 0x06
     dc8:	8d 83       	std	Y+5, r24	; 0x05
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <main+0x100>
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
int main()
{
	u8 i = 0;
	SPI_MasterInit();
	//SPI_SendChar('A');
	for(i=0;i<10;i++)
     dde:	8f 85       	ldd	r24, Y+15	; 0x0f
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	8f 87       	std	Y+15, r24	; 0x0f
     de4:	8f 85       	ldd	r24, Y+15	; 0x0f
     de6:	8a 30       	cpi	r24, 0x0A	; 10
     de8:	08 f4       	brcc	.+2      	; 0xdec <main+0x116>
     dea:	84 cf       	rjmp	.-248    	; 0xcf4 <main+0x1e>
		   { SPI_SendChar(i);
		   _delay_ms(1000);
		   }
     return 0;
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
}
     df0:	2f 96       	adiw	r28, 0x0f	; 15
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <SERVO_voidInit>:
#include "SERVO_interface.h"
#include "SERVO_config.h"
#include "SERVO_private.h"

void SERVO_voidInit(void)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	65 e0       	ldi	r22, 0x05	; 5
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_PORTD, DIO_PIN4, DIO_PIN_OUTPUT);
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	64 e0       	ldi	r22, 0x04	; 4
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	TMR1_voidInitFAST_PWM(SERVO_PERIOD_US);
     e1e:	80 e2       	ldi	r24, 0x20	; 32
     e20:	9e e4       	ldi	r25, 0x4E	; 78
     e22:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <TMR1_voidInitFAST_PWM>
}
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 servo, s8 angle)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	28 97       	sbiw	r28, 0x08	; 8
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	8d 83       	std	Y+5, r24	; 0x05
     e42:	6e 83       	std	Y+6, r22	; 0x06
	u32 tmp = (angle + (s8) 90);
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	99 27       	eor	r25, r25
     e48:	87 fd       	sbrc	r24, 7
     e4a:	90 95       	com	r25
     e4c:	86 5a       	subi	r24, 0xA6	; 166
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	aa 27       	eor	r26, r26
     e52:	97 fd       	sbrc	r25, 7
     e54:	a0 95       	com	r26
     e56:	ba 2f       	mov	r27, r26
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	ab 83       	std	Y+3, r26	; 0x03
     e5e:	bc 83       	std	Y+4, r27	; 0x04
	tmp = (tmp * 1000)/180;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	ab 81       	ldd	r26, Y+3	; 0x03
     e66:	bc 81       	ldd	r27, Y+4	; 0x04
     e68:	28 ee       	ldi	r18, 0xE8	; 232
     e6a:	33 e0       	ldi	r19, 0x03	; 3
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <__mulsi3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	24 eb       	ldi	r18, 0xB4	; 180
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__udivmodsi4>
     e8c:	da 01       	movw	r26, r20
     e8e:	c9 01       	movw	r24, r18
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	ab 83       	std	Y+3, r26	; 0x03
     e96:	bc 83       	std	Y+4, r27	; 0x04

	switch(servo)
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	38 87       	std	Y+8, r19	; 0x08
     ea0:	2f 83       	std	Y+7, r18	; 0x07
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	98 85       	ldd	r25, Y+8	; 0x08
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <SERVO_voidSetAngle+0x8a>
     eaa:	2f 81       	ldd	r18, Y+7	; 0x07
     eac:	38 85       	ldd	r19, Y+8	; 0x08
     eae:	21 30       	cpi	r18, 0x01	; 1
     eb0:	31 05       	cpc	r19, r1
     eb2:	59 f0       	breq	.+22     	; 0xeca <SERVO_voidSetAngle+0x9e>
     eb4:	13 c0       	rjmp	.+38     	; 0xedc <SERVO_voidSetAngle+0xb0>
	{
	case SERVO1: TMR1_voidSetDutyCycle(SERVO1_CH, 1000 + ((u16) tmp)); break;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	9c 01       	movw	r18, r24
     ebc:	28 51       	subi	r18, 0x18	; 24
     ebe:	3c 4f       	sbci	r19, 0xFC	; 252
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	b9 01       	movw	r22, r18
     ec4:	0e 94 65 24 	call	0x48ca	; 0x48ca <TMR1_voidSetDutyCycle>
     ec8:	09 c0       	rjmp	.+18     	; 0xedc <SERVO_voidSetAngle+0xb0>
	case SERVO2: TMR1_voidSetDutyCycle(SERVO2_CH, 1000 + ((u16) tmp)); break;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	9c 01       	movw	r18, r24
     ed0:	28 51       	subi	r18, 0x18	; 24
     ed2:	3c 4f       	sbci	r19, 0xFC	; 252
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	b9 01       	movw	r22, r18
     ed8:	0e 94 65 24 	call	0x48ca	; 0x48ca <TMR1_voidSetDutyCycle>
	}

}
     edc:	28 96       	adiw	r28, 0x08	; 8
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <STEPPER_voidInit>:
#include "STEPPER_interface.h"
#include "STEPPER_config.h"
#include "STEPPER_private.h"

void STEPPER_voidInit( void )
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinDirection( STEPPER_PORT , STEPPER_PIN0 , DIO_PORT_OUTPUT );
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	67 e0       	ldi	r22, 0x07	; 7
     efa:	4f ef       	ldi	r20, 0xFF	; 255
     efc:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( STEPPER_PORT , STEPPER_PIN1 , DIO_PORT_OUTPUT );
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	66 e0       	ldi	r22, 0x06	; 6
     f04:	4f ef       	ldi	r20, 0xFF	; 255
     f06:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( STEPPER_PORT , STEPPER_PIN2 , DIO_PORT_OUTPUT );
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	65 e0       	ldi	r22, 0x05	; 5
     f0e:	4f ef       	ldi	r20, 0xFF	; 255
     f10:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( STEPPER_PORT , STEPPER_PIN3 , DIO_PORT_OUTPUT );
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	64 e0       	ldi	r22, 0x04	; 4
     f18:	4f ef       	ldi	r20, 0xFF	; 255
     f1a:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>

	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW );
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	67 e0       	ldi	r22, 0x07	; 7
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW );
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	66 e0       	ldi	r22, 0x06	; 6
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW );
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	65 e0       	ldi	r22, 0x05	; 5
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW );
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	64 e0       	ldi	r22, 0x04	; 4
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <STEPPER_voidOff>:

void STEPPER_voidOff( void )
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW );
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	67 e0       	ldi	r22, 0x07	; 7
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW );
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	66 e0       	ldi	r22, 0x06	; 6
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW );
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	65 e0       	ldi	r22, 0x05	; 5
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW );
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	64 e0       	ldi	r22, 0x04	; 4
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
}
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <STEPPER_voidOn>:

void STEPPER_voidOn( u8 StepType , u8 Direction , u8 Speed , u16 Degree )
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	c9 55       	subi	r28, 0x59	; 89
     f90:	d1 40       	sbci	r29, 0x01	; 1
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	fe 01       	movw	r30, r28
     f9e:	eb 5a       	subi	r30, 0xAB	; 171
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	80 83       	st	Z, r24
     fa4:	fe 01       	movw	r30, r28
     fa6:	ea 5a       	subi	r30, 0xAA	; 170
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	60 83       	st	Z, r22
     fac:	fe 01       	movw	r30, r28
     fae:	e9 5a       	subi	r30, 0xA9	; 169
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	40 83       	st	Z, r20
     fb4:	fe 01       	movw	r30, r28
     fb6:	e8 5a       	subi	r30, 0xA8	; 168
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	31 83       	std	Z+1, r19	; 0x01
     fbc:	20 83       	st	Z, r18
	u32 LOC_u16Iterator = 0 ;
     fbe:	fe 01       	movw	r30, r28
     fc0:	ef 5a       	subi	r30, 0xAF	; 175
     fc2:	fe 4f       	sbci	r31, 0xFE	; 254
     fc4:	10 82       	st	Z, r1
     fc6:	11 82       	std	Z+1, r1	; 0x01
     fc8:	12 82       	std	Z+2, r1	; 0x02
     fca:	13 82       	std	Z+3, r1	; 0x03

	if( StepType == STEPPER_FULL_STEP ){
     fcc:	fe 01       	movw	r30, r28
     fce:	eb 5a       	subi	r30, 0xAB	; 171
     fd0:	fe 4f       	sbci	r31, 0xFE	; 254
     fd2:	80 81       	ld	r24, Z
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	09 f0       	breq	.+2      	; 0xfda <STEPPER_voidOn+0x58>
     fd8:	19 c7       	rjmp	.+3634   	; 0x1e0c <STEPPER_voidOn+0xe8a>

		if( Direction == STEPPER_CLOCK_WISE ){
     fda:	fe 01       	movw	r30, r28
     fdc:	ea 5a       	subi	r30, 0xAA	; 170
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	80 81       	ld	r24, Z
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <STEPPER_voidOn+0x66>
     fe6:	85 c3       	rjmp	.+1802   	; 0x16f2 <STEPPER_voidOn+0x770>

			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 256 ) / 45 ) / 4 ; LOC_u16Iterator++  ){
     fe8:	fe 01       	movw	r30, r28
     fea:	ef 5a       	subi	r30, 0xAF	; 175
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	10 82       	st	Z, r1
     ff0:	11 82       	std	Z+1, r1	; 0x01
     ff2:	12 82       	std	Z+2, r1	; 0x02
     ff4:	13 82       	std	Z+3, r1	; 0x03
     ff6:	56 c3       	rjmp	.+1708   	; 0x16a4 <STEPPER_voidOn+0x722>

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	67 e0       	ldi	r22, 0x07	; 7
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	66 e0       	ldi	r22, 0x06	; 6
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	65 e0       	ldi	r22, 0x05	; 5
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	64 e0       	ldi	r22, 0x04	; 4
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    1020:	fe 01       	movw	r30, r28
    1022:	e9 5a       	subi	r30, 0xA9	; 169
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	80 81       	ld	r24, Z
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	fe 01       	movw	r30, r28
    103e:	e3 5b       	subi	r30, 0xB3	; 179
    1040:	fe 4f       	sbci	r31, 0xFE	; 254
    1042:	80 83       	st	Z, r24
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	a2 83       	std	Z+2, r26	; 0x02
    1048:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104a:	8e 01       	movw	r16, r28
    104c:	07 5b       	subi	r16, 0xB7	; 183
    104e:	1e 4f       	sbci	r17, 0xFE	; 254
    1050:	fe 01       	movw	r30, r28
    1052:	e3 5b       	subi	r30, 0xB3	; 179
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	4a e7       	ldi	r20, 0x7A	; 122
    1064:	53 e4       	ldi	r21, 0x43	; 67
    1066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	f8 01       	movw	r30, r16
    1070:	80 83       	st	Z, r24
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	a2 83       	std	Z+2, r26	; 0x02
    1076:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1078:	fe 01       	movw	r30, r28
    107a:	e7 5b       	subi	r30, 0xB7	; 183
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	44 f4       	brge	.+16     	; 0x10a6 <STEPPER_voidOn+0x124>
		__ticks = 1;
    1096:	fe 01       	movw	r30, r28
    1098:	e9 5b       	subi	r30, 0xB9	; 185
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
    10a4:	64 c0       	rjmp	.+200    	; 0x116e <STEPPER_voidOn+0x1ec>
	else if (__tmp > 65535)
    10a6:	fe 01       	movw	r30, r28
    10a8:	e7 5b       	subi	r30, 0xB7	; 183
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	0c f0       	brlt	.+2      	; 0x10c6 <STEPPER_voidOn+0x144>
    10c4:	43 c0       	rjmp	.+134    	; 0x114c <STEPPER_voidOn+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	fe 01       	movw	r30, r28
    10c8:	e3 5b       	subi	r30, 0xB3	; 179
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	8e 01       	movw	r16, r28
    10e6:	09 5b       	subi	r16, 0xB9	; 185
    10e8:	1e 4f       	sbci	r17, 0xFE	; 254
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	f8 01       	movw	r30, r16
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	80 83       	st	Z, r24
    10fc:	1f c0       	rjmp	.+62     	; 0x113c <STEPPER_voidOn+0x1ba>
    10fe:	fe 01       	movw	r30, r28
    1100:	eb 5b       	subi	r30, 0xBB	; 187
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	89 e1       	ldi	r24, 0x19	; 25
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
    110c:	fe 01       	movw	r30, r28
    110e:	eb 5b       	subi	r30, 0xBB	; 187
    1110:	fe 4f       	sbci	r31, 0xFE	; 254
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <STEPPER_voidOn+0x194>
    111a:	fe 01       	movw	r30, r28
    111c:	eb 5b       	subi	r30, 0xBB	; 187
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	de 01       	movw	r26, r28
    1126:	a9 5b       	subi	r26, 0xB9	; 185
    1128:	be 4f       	sbci	r27, 0xFE	; 254
    112a:	fe 01       	movw	r30, r28
    112c:	e9 5b       	subi	r30, 0xB9	; 185
    112e:	fe 4f       	sbci	r31, 0xFE	; 254
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113c:	fe 01       	movw	r30, r28
    113e:	e9 5b       	subi	r30, 0xB9	; 185
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	d1 f6       	brne	.-76     	; 0x10fe <STEPPER_voidOn+0x17c>
    114a:	27 c0       	rjmp	.+78     	; 0x119a <STEPPER_voidOn+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	8e 01       	movw	r16, r28
    114e:	09 5b       	subi	r16, 0xB9	; 185
    1150:	1e 4f       	sbci	r17, 0xFE	; 254
    1152:	fe 01       	movw	r30, r28
    1154:	e7 5b       	subi	r30, 0xB7	; 183
    1156:	fe 4f       	sbci	r31, 0xFE	; 254
    1158:	60 81       	ld	r22, Z
    115a:	71 81       	ldd	r23, Z+1	; 0x01
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	f8 01       	movw	r30, r16
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	de 01       	movw	r26, r28
    1170:	ad 5b       	subi	r26, 0xBD	; 189
    1172:	be 4f       	sbci	r27, 0xFE	; 254
    1174:	fe 01       	movw	r30, r28
    1176:	e9 5b       	subi	r30, 0xB9	; 185
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	8d 93       	st	X+, r24
    1180:	9c 93       	st	X, r25
    1182:	fe 01       	movw	r30, r28
    1184:	ed 5b       	subi	r30, 0xBD	; 189
    1186:	fe 4f       	sbci	r31, 0xFE	; 254
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <STEPPER_voidOn+0x20a>
    1190:	fe 01       	movw	r30, r28
    1192:	ed 5b       	subi	r30, 0xBD	; 189
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	67 e0       	ldi	r22, 0x07	; 7
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	66 e0       	ldi	r22, 0x06	; 6
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	65 e0       	ldi	r22, 0x05	; 5
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	64 e0       	ldi	r22, 0x04	; 4
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    11c2:	fe 01       	movw	r30, r28
    11c4:	e9 5a       	subi	r30, 0xA9	; 169
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	80 81       	ld	r24, Z
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	fe 01       	movw	r30, r28
    11e0:	e1 5c       	subi	r30, 0xC1	; 193
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	80 83       	st	Z, r24
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	a2 83       	std	Z+2, r26	; 0x02
    11ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ec:	8e 01       	movw	r16, r28
    11ee:	05 5c       	subi	r16, 0xC5	; 197
    11f0:	1e 4f       	sbci	r17, 0xFE	; 254
    11f2:	fe 01       	movw	r30, r28
    11f4:	e1 5c       	subi	r30, 0xC1	; 193
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4a e7       	ldi	r20, 0x7A	; 122
    1206:	53 e4       	ldi	r21, 0x43	; 67
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	f8 01       	movw	r30, r16
    1212:	80 83       	st	Z, r24
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	a2 83       	std	Z+2, r26	; 0x02
    1218:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    121a:	fe 01       	movw	r30, r28
    121c:	e5 5c       	subi	r30, 0xC5	; 197
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1234:	88 23       	and	r24, r24
    1236:	44 f4       	brge	.+16     	; 0x1248 <STEPPER_voidOn+0x2c6>
		__ticks = 1;
    1238:	fe 01       	movw	r30, r28
    123a:	e7 5c       	subi	r30, 0xC7	; 199
    123c:	fe 4f       	sbci	r31, 0xFE	; 254
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	80 83       	st	Z, r24
    1246:	64 c0       	rjmp	.+200    	; 0x1310 <STEPPER_voidOn+0x38e>
	else if (__tmp > 65535)
    1248:	fe 01       	movw	r30, r28
    124a:	e5 5c       	subi	r30, 0xC5	; 197
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	0c f0       	brlt	.+2      	; 0x1268 <STEPPER_voidOn+0x2e6>
    1266:	43 c0       	rjmp	.+134    	; 0x12ee <STEPPER_voidOn+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	fe 01       	movw	r30, r28
    126a:	e1 5c       	subi	r30, 0xC1	; 193
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	8e 01       	movw	r16, r28
    1288:	07 5c       	subi	r16, 0xC7	; 199
    128a:	1e 4f       	sbci	r17, 0xFE	; 254
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	f8 01       	movw	r30, r16
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
    129e:	1f c0       	rjmp	.+62     	; 0x12de <STEPPER_voidOn+0x35c>
    12a0:	fe 01       	movw	r30, r28
    12a2:	e9 5c       	subi	r30, 0xC9	; 201
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	89 e1       	ldi	r24, 0x19	; 25
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	80 83       	st	Z, r24
    12ae:	fe 01       	movw	r30, r28
    12b0:	e9 5c       	subi	r30, 0xC9	; 201
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <STEPPER_voidOn+0x336>
    12bc:	fe 01       	movw	r30, r28
    12be:	e9 5c       	subi	r30, 0xC9	; 201
    12c0:	fe 4f       	sbci	r31, 0xFE	; 254
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	de 01       	movw	r26, r28
    12c8:	a7 5c       	subi	r26, 0xC7	; 199
    12ca:	be 4f       	sbci	r27, 0xFE	; 254
    12cc:	fe 01       	movw	r30, r28
    12ce:	e7 5c       	subi	r30, 0xC7	; 199
    12d0:	fe 4f       	sbci	r31, 0xFE	; 254
    12d2:	80 81       	ld	r24, Z
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	9c 93       	st	X, r25
    12dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12de:	fe 01       	movw	r30, r28
    12e0:	e7 5c       	subi	r30, 0xC7	; 199
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	d1 f6       	brne	.-76     	; 0x12a0 <STEPPER_voidOn+0x31e>
    12ec:	27 c0       	rjmp	.+78     	; 0x133c <STEPPER_voidOn+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ee:	8e 01       	movw	r16, r28
    12f0:	07 5c       	subi	r16, 0xC7	; 199
    12f2:	1e 4f       	sbci	r17, 0xFE	; 254
    12f4:	fe 01       	movw	r30, r28
    12f6:	e5 5c       	subi	r30, 0xC5	; 197
    12f8:	fe 4f       	sbci	r31, 0xFE	; 254
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	f8 01       	movw	r30, r16
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
    1310:	de 01       	movw	r26, r28
    1312:	ab 5c       	subi	r26, 0xCB	; 203
    1314:	be 4f       	sbci	r27, 0xFE	; 254
    1316:	fe 01       	movw	r30, r28
    1318:	e7 5c       	subi	r30, 0xC7	; 199
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	8d 93       	st	X+, r24
    1322:	9c 93       	st	X, r25
    1324:	fe 01       	movw	r30, r28
    1326:	eb 5c       	subi	r30, 0xCB	; 203
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <STEPPER_voidOn+0x3ac>
    1332:	fe 01       	movw	r30, r28
    1334:	eb 5c       	subi	r30, 0xCB	; 203
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	67 e0       	ldi	r22, 0x07	; 7
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	66 e0       	ldi	r22, 0x06	; 6
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_HIGH );
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	65 e0       	ldi	r22, 0x05	; 5
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	64 e0       	ldi	r22, 0x04	; 4
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    1364:	fe 01       	movw	r30, r28
    1366:	e9 5a       	subi	r30, 0xA9	; 169
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	80 81       	ld	r24, Z
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a0 e0       	ldi	r26, 0x00	; 0
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	fe 01       	movw	r30, r28
    1382:	ef 5c       	subi	r30, 0xCF	; 207
    1384:	fe 4f       	sbci	r31, 0xFE	; 254
    1386:	80 83       	st	Z, r24
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	a2 83       	std	Z+2, r26	; 0x02
    138c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	8e 01       	movw	r16, r28
    1390:	03 5d       	subi	r16, 0xD3	; 211
    1392:	1e 4f       	sbci	r17, 0xFE	; 254
    1394:	fe 01       	movw	r30, r28
    1396:	ef 5c       	subi	r30, 0xCF	; 207
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4a e7       	ldi	r20, 0x7A	; 122
    13a8:	53 e4       	ldi	r21, 0x43	; 67
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 83       	st	Z, r24
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	a2 83       	std	Z+2, r26	; 0x02
    13ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13bc:	fe 01       	movw	r30, r28
    13be:	e3 5d       	subi	r30, 0xD3	; 211
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	44 f4       	brge	.+16     	; 0x13ea <STEPPER_voidOn+0x468>
		__ticks = 1;
    13da:	fe 01       	movw	r30, r28
    13dc:	e5 5d       	subi	r30, 0xD5	; 213
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
    13e8:	64 c0       	rjmp	.+200    	; 0x14b2 <STEPPER_voidOn+0x530>
	else if (__tmp > 65535)
    13ea:	fe 01       	movw	r30, r28
    13ec:	e3 5d       	subi	r30, 0xD3	; 211
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	60 81       	ld	r22, Z
    13f2:	71 81       	ldd	r23, Z+1	; 0x01
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	93 81       	ldd	r25, Z+3	; 0x03
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	4f e7       	ldi	r20, 0x7F	; 127
    13fe:	57 e4       	ldi	r21, 0x47	; 71
    1400:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1404:	18 16       	cp	r1, r24
    1406:	0c f0       	brlt	.+2      	; 0x140a <STEPPER_voidOn+0x488>
    1408:	43 c0       	rjmp	.+134    	; 0x1490 <STEPPER_voidOn+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	fe 01       	movw	r30, r28
    140c:	ef 5c       	subi	r30, 0xCF	; 207
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	8e 01       	movw	r16, r28
    142a:	05 5d       	subi	r16, 0xD5	; 213
    142c:	1e 4f       	sbci	r17, 0xFE	; 254
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	f8 01       	movw	r30, r16
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	1f c0       	rjmp	.+62     	; 0x1480 <STEPPER_voidOn+0x4fe>
    1442:	fe 01       	movw	r30, r28
    1444:	e7 5d       	subi	r30, 0xD7	; 215
    1446:	fe 4f       	sbci	r31, 0xFE	; 254
    1448:	89 e1       	ldi	r24, 0x19	; 25
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	fe 01       	movw	r30, r28
    1452:	e7 5d       	subi	r30, 0xD7	; 215
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <STEPPER_voidOn+0x4d8>
    145e:	fe 01       	movw	r30, r28
    1460:	e7 5d       	subi	r30, 0xD7	; 215
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1468:	de 01       	movw	r26, r28
    146a:	a5 5d       	subi	r26, 0xD5	; 213
    146c:	be 4f       	sbci	r27, 0xFE	; 254
    146e:	fe 01       	movw	r30, r28
    1470:	e5 5d       	subi	r30, 0xD5	; 213
    1472:	fe 4f       	sbci	r31, 0xFE	; 254
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	11 96       	adiw	r26, 0x01	; 1
    147c:	9c 93       	st	X, r25
    147e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	fe 01       	movw	r30, r28
    1482:	e5 5d       	subi	r30, 0xD5	; 213
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	d1 f6       	brne	.-76     	; 0x1442 <STEPPER_voidOn+0x4c0>
    148e:	27 c0       	rjmp	.+78     	; 0x14de <STEPPER_voidOn+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1490:	8e 01       	movw	r16, r28
    1492:	05 5d       	subi	r16, 0xD5	; 213
    1494:	1e 4f       	sbci	r17, 0xFE	; 254
    1496:	fe 01       	movw	r30, r28
    1498:	e3 5d       	subi	r30, 0xD3	; 211
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	de 01       	movw	r26, r28
    14b4:	a9 5d       	subi	r26, 0xD9	; 217
    14b6:	be 4f       	sbci	r27, 0xFE	; 254
    14b8:	fe 01       	movw	r30, r28
    14ba:	e5 5d       	subi	r30, 0xD5	; 213
    14bc:	fe 4f       	sbci	r31, 0xFE	; 254
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	8d 93       	st	X+, r24
    14c4:	9c 93       	st	X, r25
    14c6:	fe 01       	movw	r30, r28
    14c8:	e9 5d       	subi	r30, 0xD9	; 217
    14ca:	fe 4f       	sbci	r31, 0xFE	; 254
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <STEPPER_voidOn+0x54e>
    14d4:	fe 01       	movw	r30, r28
    14d6:	e9 5d       	subi	r30, 0xD9	; 217
    14d8:	fe 4f       	sbci	r31, 0xFE	; 254
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	67 e0       	ldi	r22, 0x07	; 7
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	66 e0       	ldi	r22, 0x06	; 6
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	65 e0       	ldi	r22, 0x05	; 5
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	64 e0       	ldi	r22, 0x04	; 4
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    1506:	fe 01       	movw	r30, r28
    1508:	e9 5a       	subi	r30, 0xA9	; 169
    150a:	fe 4f       	sbci	r31, 0xFE	; 254
    150c:	80 81       	ld	r24, Z
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	fe 01       	movw	r30, r28
    1524:	ed 5d       	subi	r30, 0xDD	; 221
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	80 83       	st	Z, r24
    152a:	91 83       	std	Z+1, r25	; 0x01
    152c:	a2 83       	std	Z+2, r26	; 0x02
    152e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	8e 01       	movw	r16, r28
    1532:	01 5e       	subi	r16, 0xE1	; 225
    1534:	1e 4f       	sbci	r17, 0xFE	; 254
    1536:	fe 01       	movw	r30, r28
    1538:	ed 5d       	subi	r30, 0xDD	; 221
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	60 81       	ld	r22, Z
    153e:	71 81       	ldd	r23, Z+1	; 0x01
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	4a e7       	ldi	r20, 0x7A	; 122
    154a:	53 e4       	ldi	r21, 0x43	; 67
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	f8 01       	movw	r30, r16
    1556:	80 83       	st	Z, r24
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	a2 83       	std	Z+2, r26	; 0x02
    155c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    155e:	fe 01       	movw	r30, r28
    1560:	e1 5e       	subi	r30, 0xE1	; 225
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	60 81       	ld	r22, Z
    1566:	71 81       	ldd	r23, Z+1	; 0x01
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1578:	88 23       	and	r24, r24
    157a:	44 f4       	brge	.+16     	; 0x158c <STEPPER_voidOn+0x60a>
		__ticks = 1;
    157c:	fe 01       	movw	r30, r28
    157e:	e3 5e       	subi	r30, 0xE3	; 227
    1580:	fe 4f       	sbci	r31, 0xFE	; 254
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
    158a:	64 c0       	rjmp	.+200    	; 0x1654 <STEPPER_voidOn+0x6d2>
	else if (__tmp > 65535)
    158c:	fe 01       	movw	r30, r28
    158e:	e1 5e       	subi	r30, 0xE1	; 225
    1590:	fe 4f       	sbci	r31, 0xFE	; 254
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	57 e4       	ldi	r21, 0x47	; 71
    15a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	0c f0       	brlt	.+2      	; 0x15ac <STEPPER_voidOn+0x62a>
    15aa:	43 c0       	rjmp	.+134    	; 0x1632 <STEPPER_voidOn+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ac:	fe 01       	movw	r30, r28
    15ae:	ed 5d       	subi	r30, 0xDD	; 221
    15b0:	fe 4f       	sbci	r31, 0xFE	; 254
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	8e 01       	movw	r16, r28
    15cc:	03 5e       	subi	r16, 0xE3	; 227
    15ce:	1e 4f       	sbci	r17, 0xFE	; 254
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	f8 01       	movw	r30, r16
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	80 83       	st	Z, r24
    15e2:	1f c0       	rjmp	.+62     	; 0x1622 <STEPPER_voidOn+0x6a0>
    15e4:	fe 01       	movw	r30, r28
    15e6:	e5 5e       	subi	r30, 0xE5	; 229
    15e8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ea:	89 e1       	ldi	r24, 0x19	; 25
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	fe 01       	movw	r30, r28
    15f4:	e5 5e       	subi	r30, 0xE5	; 229
    15f6:	fe 4f       	sbci	r31, 0xFE	; 254
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <STEPPER_voidOn+0x67a>
    1600:	fe 01       	movw	r30, r28
    1602:	e5 5e       	subi	r30, 0xE5	; 229
    1604:	fe 4f       	sbci	r31, 0xFE	; 254
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	de 01       	movw	r26, r28
    160c:	a3 5e       	subi	r26, 0xE3	; 227
    160e:	be 4f       	sbci	r27, 0xFE	; 254
    1610:	fe 01       	movw	r30, r28
    1612:	e3 5e       	subi	r30, 0xE3	; 227
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1622:	fe 01       	movw	r30, r28
    1624:	e3 5e       	subi	r30, 0xE3	; 227
    1626:	fe 4f       	sbci	r31, 0xFE	; 254
    1628:	80 81       	ld	r24, Z
    162a:	91 81       	ldd	r25, Z+1	; 0x01
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	d1 f6       	brne	.-76     	; 0x15e4 <STEPPER_voidOn+0x662>
    1630:	27 c0       	rjmp	.+78     	; 0x1680 <STEPPER_voidOn+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1632:	8e 01       	movw	r16, r28
    1634:	03 5e       	subi	r16, 0xE3	; 227
    1636:	1e 4f       	sbci	r17, 0xFE	; 254
    1638:	fe 01       	movw	r30, r28
    163a:	e1 5e       	subi	r30, 0xE1	; 225
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	f8 01       	movw	r30, r16
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	de 01       	movw	r26, r28
    1656:	a7 5e       	subi	r26, 0xE7	; 231
    1658:	be 4f       	sbci	r27, 0xFE	; 254
    165a:	fe 01       	movw	r30, r28
    165c:	e3 5e       	subi	r30, 0xE3	; 227
    165e:	fe 4f       	sbci	r31, 0xFE	; 254
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	8d 93       	st	X+, r24
    1666:	9c 93       	st	X, r25
    1668:	fe 01       	movw	r30, r28
    166a:	e7 5e       	subi	r30, 0xE7	; 231
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <STEPPER_voidOn+0x6f0>
    1676:	fe 01       	movw	r30, r28
    1678:	e7 5e       	subi	r30, 0xE7	; 231
    167a:	fe 4f       	sbci	r31, 0xFE	; 254
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	80 83       	st	Z, r24

	if( StepType == STEPPER_FULL_STEP ){

		if( Direction == STEPPER_CLOCK_WISE ){

			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 256 ) / 45 ) / 4 ; LOC_u16Iterator++  ){
    1680:	9e 01       	movw	r18, r28
    1682:	2f 5a       	subi	r18, 0xAF	; 175
    1684:	3e 4f       	sbci	r19, 0xFE	; 254
    1686:	fe 01       	movw	r30, r28
    1688:	ef 5a       	subi	r30, 0xAF	; 175
    168a:	fe 4f       	sbci	r31, 0xFE	; 254
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	a2 81       	ldd	r26, Z+2	; 0x02
    1692:	b3 81       	ldd	r27, Z+3	; 0x03
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	a1 1d       	adc	r26, r1
    1698:	b1 1d       	adc	r27, r1
    169a:	f9 01       	movw	r30, r18
    169c:	80 83       	st	Z, r24
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	a2 83       	std	Z+2, r26	; 0x02
    16a2:	b3 83       	std	Z+3, r27	; 0x03
    16a4:	fe 01       	movw	r30, r28
    16a6:	e8 5a       	subi	r30, 0xA8	; 168
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	cc 01       	movw	r24, r24
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ba 2f       	mov	r27, r26
    16b6:	a9 2f       	mov	r26, r25
    16b8:	98 2f       	mov	r25, r24
    16ba:	88 27       	eor	r24, r24
    16bc:	24 eb       	ldi	r18, 0xB4	; 180
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__udivmodsi4>
    16cc:	da 01       	movw	r26, r20
    16ce:	c9 01       	movw	r24, r18
    16d0:	9c 01       	movw	r18, r24
    16d2:	ad 01       	movw	r20, r26
    16d4:	fe 01       	movw	r30, r28
    16d6:	ef 5a       	subi	r30, 0xAF	; 175
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	a2 81       	ldd	r26, Z+2	; 0x02
    16e0:	b3 81       	ldd	r27, Z+3	; 0x03
    16e2:	82 17       	cp	r24, r18
    16e4:	93 07       	cpc	r25, r19
    16e6:	a4 07       	cpc	r26, r20
    16e8:	b5 07       	cpc	r27, r21
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <STEPPER_voidOn+0x76c>
    16ec:	85 cc       	rjmp	.-1782   	; 0xff8 <STEPPER_voidOn+0x76>
    16ee:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <STEPPER_voidOn+0x2784>
				_delay_ms( Speed );


			}

		}else if( Direction == STEPPER_ANTI_CLOCK_WISE ){
    16f2:	fe 01       	movw	r30, r28
    16f4:	ea 5a       	subi	r30, 0xAA	; 170
    16f6:	fe 4f       	sbci	r31, 0xFE	; 254
    16f8:	80 81       	ld	r24, Z
    16fa:	88 23       	and	r24, r24
    16fc:	11 f0       	breq	.+4      	; 0x1702 <STEPPER_voidOn+0x780>
    16fe:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <STEPPER_voidOn+0x2784>

			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 256 ) / 45 ) / 4 ; LOC_u16Iterator++  ){
    1702:	fe 01       	movw	r30, r28
    1704:	ef 5a       	subi	r30, 0xAF	; 175
    1706:	fe 4f       	sbci	r31, 0xFE	; 254
    1708:	10 82       	st	Z, r1
    170a:	11 82       	std	Z+1, r1	; 0x01
    170c:	12 82       	std	Z+2, r1	; 0x02
    170e:	13 82       	std	Z+3, r1	; 0x03
    1710:	56 c3       	rjmp	.+1708   	; 0x1dbe <STEPPER_voidOn+0xe3c>

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	67 e0       	ldi	r22, 0x07	; 7
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	66 e0       	ldi	r22, 0x06	; 6
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	65 e0       	ldi	r22, 0x05	; 5
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	64 e0       	ldi	r22, 0x04	; 4
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    173a:	fe 01       	movw	r30, r28
    173c:	e9 5a       	subi	r30, 0xA9	; 169
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	80 81       	ld	r24, Z
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a0 e0       	ldi	r26, 0x00	; 0
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	fe 01       	movw	r30, r28
    1758:	eb 5e       	subi	r30, 0xEB	; 235
    175a:	fe 4f       	sbci	r31, 0xFE	; 254
    175c:	80 83       	st	Z, r24
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	a2 83       	std	Z+2, r26	; 0x02
    1762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	8e 01       	movw	r16, r28
    1766:	0f 5e       	subi	r16, 0xEF	; 239
    1768:	1e 4f       	sbci	r17, 0xFE	; 254
    176a:	fe 01       	movw	r30, r28
    176c:	eb 5e       	subi	r30, 0xEB	; 235
    176e:	fe 4f       	sbci	r31, 0xFE	; 254
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	f8 01       	movw	r30, r16
    178a:	80 83       	st	Z, r24
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1792:	fe 01       	movw	r30, r28
    1794:	ef 5e       	subi	r30, 0xEF	; 239
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	44 f4       	brge	.+16     	; 0x17c0 <STEPPER_voidOn+0x83e>
		__ticks = 1;
    17b0:	fe 01       	movw	r30, r28
    17b2:	e1 5f       	subi	r30, 0xF1	; 241
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
    17be:	64 c0       	rjmp	.+200    	; 0x1888 <STEPPER_voidOn+0x906>
	else if (__tmp > 65535)
    17c0:	fe 01       	movw	r30, r28
    17c2:	ef 5e       	subi	r30, 0xEF	; 239
    17c4:	fe 4f       	sbci	r31, 0xFE	; 254
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <STEPPER_voidOn+0x85e>
    17de:	43 c0       	rjmp	.+134    	; 0x1866 <STEPPER_voidOn+0x8e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	fe 01       	movw	r30, r28
    17e2:	eb 5e       	subi	r30, 0xEB	; 235
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8e 01       	movw	r16, r28
    1800:	01 5f       	subi	r16, 0xF1	; 241
    1802:	1e 4f       	sbci	r17, 0xFE	; 254
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	1f c0       	rjmp	.+62     	; 0x1856 <STEPPER_voidOn+0x8d4>
    1818:	fe 01       	movw	r30, r28
    181a:	e3 5f       	subi	r30, 0xF3	; 243
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	89 e1       	ldi	r24, 0x19	; 25
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	fe 01       	movw	r30, r28
    1828:	e3 5f       	subi	r30, 0xF3	; 243
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <STEPPER_voidOn+0x8ae>
    1834:	fe 01       	movw	r30, r28
    1836:	e3 5f       	subi	r30, 0xF3	; 243
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	de 01       	movw	r26, r28
    1840:	a1 5f       	subi	r26, 0xF1	; 241
    1842:	be 4f       	sbci	r27, 0xFE	; 254
    1844:	fe 01       	movw	r30, r28
    1846:	e1 5f       	subi	r30, 0xF1	; 241
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	11 96       	adiw	r26, 0x01	; 1
    1852:	9c 93       	st	X, r25
    1854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	fe 01       	movw	r30, r28
    1858:	e1 5f       	subi	r30, 0xF1	; 241
    185a:	fe 4f       	sbci	r31, 0xFE	; 254
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	d1 f6       	brne	.-76     	; 0x1818 <STEPPER_voidOn+0x896>
    1864:	27 c0       	rjmp	.+78     	; 0x18b4 <STEPPER_voidOn+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	8e 01       	movw	r16, r28
    1868:	01 5f       	subi	r16, 0xF1	; 241
    186a:	1e 4f       	sbci	r17, 0xFE	; 254
    186c:	fe 01       	movw	r30, r28
    186e:	ef 5e       	subi	r30, 0xEF	; 239
    1870:	fe 4f       	sbci	r31, 0xFE	; 254
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	de 01       	movw	r26, r28
    188a:	a5 5f       	subi	r26, 0xF5	; 245
    188c:	be 4f       	sbci	r27, 0xFE	; 254
    188e:	fe 01       	movw	r30, r28
    1890:	e1 5f       	subi	r30, 0xF1	; 241
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	8d 93       	st	X+, r24
    189a:	9c 93       	st	X, r25
    189c:	fe 01       	movw	r30, r28
    189e:	e5 5f       	subi	r30, 0xF5	; 245
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <STEPPER_voidOn+0x924>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e5 5f       	subi	r30, 0xF5	; 245
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	67 e0       	ldi	r22, 0x07	; 7
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	66 e0       	ldi	r22, 0x06	; 6
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_HIGH );
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	41 e0       	ldi	r20, 0x01	; 1
    18ce:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	64 e0       	ldi	r22, 0x04	; 4
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    18dc:	fe 01       	movw	r30, r28
    18de:	e9 5a       	subi	r30, 0xA9	; 169
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	80 81       	ld	r24, Z
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	fe 01       	movw	r30, r28
    18fa:	e9 5f       	subi	r30, 0xF9	; 249
    18fc:	fe 4f       	sbci	r31, 0xFE	; 254
    18fe:	80 83       	st	Z, r24
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	a2 83       	std	Z+2, r26	; 0x02
    1904:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	8e 01       	movw	r16, r28
    1908:	0d 5f       	subi	r16, 0xFD	; 253
    190a:	1e 4f       	sbci	r17, 0xFE	; 254
    190c:	fe 01       	movw	r30, r28
    190e:	e9 5f       	subi	r30, 0xF9	; 249
    1910:	fe 4f       	sbci	r31, 0xFE	; 254
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	f8 01       	movw	r30, r16
    192c:	80 83       	st	Z, r24
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	a2 83       	std	Z+2, r26	; 0x02
    1932:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1934:	fe 01       	movw	r30, r28
    1936:	ed 5f       	subi	r30, 0xFD	; 253
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e8       	ldi	r20, 0x80	; 128
    1948:	5f e3       	ldi	r21, 0x3F	; 63
    194a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194e:	88 23       	and	r24, r24
    1950:	44 f4       	brge	.+16     	; 0x1962 <STEPPER_voidOn+0x9e0>
		__ticks = 1;
    1952:	fe 01       	movw	r30, r28
    1954:	ef 5f       	subi	r30, 0xFF	; 255
    1956:	fe 4f       	sbci	r31, 0xFE	; 254
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	64 c0       	rjmp	.+200    	; 0x1a2a <STEPPER_voidOn+0xaa8>
	else if (__tmp > 65535)
    1962:	fe 01       	movw	r30, r28
    1964:	ed 5f       	subi	r30, 0xFD	; 253
    1966:	fe 4f       	sbci	r31, 0xFE	; 254
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	0c f0       	brlt	.+2      	; 0x1982 <STEPPER_voidOn+0xa00>
    1980:	43 c0       	rjmp	.+134    	; 0x1a08 <STEPPER_voidOn+0xa86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1982:	fe 01       	movw	r30, r28
    1984:	e9 5f       	subi	r30, 0xF9	; 249
    1986:	fe 4f       	sbci	r31, 0xFE	; 254
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8e 01       	movw	r16, r28
    19a2:	0f 5f       	subi	r16, 0xFF	; 255
    19a4:	1e 4f       	sbci	r17, 0xFE	; 254
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	f8 01       	movw	r30, r16
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <STEPPER_voidOn+0xa76>
    19ba:	fe 01       	movw	r30, r28
    19bc:	e1 50       	subi	r30, 0x01	; 1
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	89 e1       	ldi	r24, 0x19	; 25
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	fe 01       	movw	r30, r28
    19ca:	e1 50       	subi	r30, 0x01	; 1
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <STEPPER_voidOn+0xa50>
    19d6:	fe 01       	movw	r30, r28
    19d8:	e1 50       	subi	r30, 0x01	; 1
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	de 01       	movw	r26, r28
    19e2:	af 5f       	subi	r26, 0xFF	; 255
    19e4:	be 4f       	sbci	r27, 0xFE	; 254
    19e6:	fe 01       	movw	r30, r28
    19e8:	ef 5f       	subi	r30, 0xFF	; 255
    19ea:	fe 4f       	sbci	r31, 0xFE	; 254
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	9c 93       	st	X, r25
    19f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	fe 01       	movw	r30, r28
    19fa:	ef 5f       	subi	r30, 0xFF	; 255
    19fc:	fe 4f       	sbci	r31, 0xFE	; 254
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	d1 f6       	brne	.-76     	; 0x19ba <STEPPER_voidOn+0xa38>
    1a06:	27 c0       	rjmp	.+78     	; 0x1a56 <STEPPER_voidOn+0xad4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	8e 01       	movw	r16, r28
    1a0a:	0f 5f       	subi	r16, 0xFF	; 255
    1a0c:	1e 4f       	sbci	r17, 0xFE	; 254
    1a0e:	fe 01       	movw	r30, r28
    1a10:	ed 5f       	subi	r30, 0xFD	; 253
    1a12:	fe 4f       	sbci	r31, 0xFE	; 254
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	de 01       	movw	r26, r28
    1a2c:	a3 50       	subi	r26, 0x03	; 3
    1a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a30:	fe 01       	movw	r30, r28
    1a32:	ef 5f       	subi	r30, 0xFF	; 255
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	8d 93       	st	X+, r24
    1a3c:	9c 93       	st	X, r25
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e3 50       	subi	r30, 0x03	; 3
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 81       	ld	r24, Z
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <STEPPER_voidOn+0xac6>
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e3 50       	subi	r30, 0x03	; 3
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	67 e0       	ldi	r22, 0x07	; 7
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	66 e0       	ldi	r22, 0x06	; 6
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	65 e0       	ldi	r22, 0x05	; 5
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	64 e0       	ldi	r22, 0x04	; 4
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e9 5a       	subi	r30, 0xA9	; 169
    1a82:	fe 4f       	sbci	r31, 0xFE	; 254
    1a84:	80 81       	ld	r24, Z
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e7 50       	subi	r30, 0x07	; 7
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 83       	st	Z, r24
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	a2 83       	std	Z+2, r26	; 0x02
    1aa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	8e 01       	movw	r16, r28
    1aaa:	0b 50       	subi	r16, 0x0B	; 11
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e7 50       	subi	r30, 0x07	; 7
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a e7       	ldi	r20, 0x7A	; 122
    1ac2:	53 e4       	ldi	r21, 0x43	; 67
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 83       	st	Z, r24
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	a2 83       	std	Z+2, r26	; 0x02
    1ad4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	eb 50       	subi	r30, 0x0B	; 11
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af0:	88 23       	and	r24, r24
    1af2:	44 f4       	brge	.+16     	; 0x1b04 <STEPPER_voidOn+0xb82>
		__ticks = 1;
    1af4:	fe 01       	movw	r30, r28
    1af6:	ed 50       	subi	r30, 0x0D	; 13
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	64 c0       	rjmp	.+200    	; 0x1bcc <STEPPER_voidOn+0xc4a>
	else if (__tmp > 65535)
    1b04:	fe 01       	movw	r30, r28
    1b06:	eb 50       	subi	r30, 0x0B	; 11
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	60 81       	ld	r22, Z
    1b0c:	71 81       	ldd	r23, Z+1	; 0x01
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	93 81       	ldd	r25, Z+3	; 0x03
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	0c f0       	brlt	.+2      	; 0x1b24 <STEPPER_voidOn+0xba2>
    1b22:	43 c0       	rjmp	.+134    	; 0x1baa <STEPPER_voidOn+0xc28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	fe 01       	movw	r30, r28
    1b26:	e7 50       	subi	r30, 0x07	; 7
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8e 01       	movw	r16, r28
    1b44:	0d 50       	subi	r16, 0x0D	; 13
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	f8 01       	movw	r30, r16
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
    1b5a:	1f c0       	rjmp	.+62     	; 0x1b9a <STEPPER_voidOn+0xc18>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ef 50       	subi	r30, 0x0F	; 15
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	89 e1       	ldi	r24, 0x19	; 25
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	ef 50       	subi	r30, 0x0F	; 15
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <STEPPER_voidOn+0xbf2>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ef 50       	subi	r30, 0x0F	; 15
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	de 01       	movw	r26, r28
    1b84:	ad 50       	subi	r26, 0x0D	; 13
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ed 50       	subi	r30, 0x0D	; 13
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	9c 93       	st	X, r25
    1b98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ed 50       	subi	r30, 0x0D	; 13
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	d1 f6       	brne	.-76     	; 0x1b5c <STEPPER_voidOn+0xbda>
    1ba8:	27 c0       	rjmp	.+78     	; 0x1bf8 <STEPPER_voidOn+0xc76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	8e 01       	movw	r16, r28
    1bac:	0d 50       	subi	r16, 0x0D	; 13
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	eb 50       	subi	r30, 0x0B	; 11
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	de 01       	movw	r26, r28
    1bce:	a1 51       	subi	r26, 0x11	; 17
    1bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ed 50       	subi	r30, 0x0D	; 13
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	8d 93       	st	X+, r24
    1bde:	9c 93       	st	X, r25
    1be0:	fe 01       	movw	r30, r28
    1be2:	e1 51       	subi	r30, 0x11	; 17
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <STEPPER_voidOn+0xc68>
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e1 51       	subi	r30, 0x11	; 17
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	67 e0       	ldi	r22, 0x07	; 7
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	66 e0       	ldi	r22, 0x06	; 6
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	65 e0       	ldi	r22, 0x05	; 5
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	64 e0       	ldi	r22, 0x04	; 4
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    1c20:	fe 01       	movw	r30, r28
    1c22:	e9 5a       	subi	r30, 0xA9	; 169
    1c24:	fe 4f       	sbci	r31, 0xFE	; 254
    1c26:	80 81       	ld	r24, Z
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e5 51       	subi	r30, 0x15	; 21
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 83       	st	Z, r24
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	a2 83       	std	Z+2, r26	; 0x02
    1c48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	09 51       	subi	r16, 0x19	; 25
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	fe 01       	movw	r30, r28
    1c52:	e5 51       	subi	r30, 0x15	; 21
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	60 81       	ld	r22, Z
    1c58:	71 81       	ldd	r23, Z+1	; 0x01
    1c5a:	82 81       	ldd	r24, Z+2	; 0x02
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	4a e7       	ldi	r20, 0x7A	; 122
    1c64:	53 e4       	ldi	r21, 0x43	; 67
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	f8 01       	movw	r30, r16
    1c70:	80 83       	st	Z, r24
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	a2 83       	std	Z+2, r26	; 0x02
    1c76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e9 51       	subi	r30, 0x19	; 25
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	44 f4       	brge	.+16     	; 0x1ca6 <STEPPER_voidOn+0xd24>
		__ticks = 1;
    1c96:	fe 01       	movw	r30, r28
    1c98:	eb 51       	subi	r30, 0x1B	; 27
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	64 c0       	rjmp	.+200    	; 0x1d6e <STEPPER_voidOn+0xdec>
	else if (__tmp > 65535)
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e9 51       	subi	r30, 0x19	; 25
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	0c f0       	brlt	.+2      	; 0x1cc6 <STEPPER_voidOn+0xd44>
    1cc4:	43 c0       	rjmp	.+134    	; 0x1d4c <STEPPER_voidOn+0xdca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e5 51       	subi	r30, 0x15	; 21
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e2       	ldi	r20, 0x20	; 32
    1cda:	51 e4       	ldi	r21, 0x41	; 65
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	0b 51       	subi	r16, 0x1B	; 27
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	1f c0       	rjmp	.+62     	; 0x1d3c <STEPPER_voidOn+0xdba>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ed 51       	subi	r30, 0x1D	; 29
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	89 e1       	ldi	r24, 0x19	; 25
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	80 83       	st	Z, r24
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ed 51       	subi	r30, 0x1D	; 29
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <STEPPER_voidOn+0xd94>
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ed 51       	subi	r30, 0x1D	; 29
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	91 83       	std	Z+1, r25	; 0x01
    1d22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	de 01       	movw	r26, r28
    1d26:	ab 51       	subi	r26, 0x1B	; 27
    1d28:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	eb 51       	subi	r30, 0x1B	; 27
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	11 96       	adiw	r26, 0x01	; 1
    1d38:	9c 93       	st	X, r25
    1d3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	eb 51       	subi	r30, 0x1B	; 27
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	d1 f6       	brne	.-76     	; 0x1cfe <STEPPER_voidOn+0xd7c>
    1d4a:	27 c0       	rjmp	.+78     	; 0x1d9a <STEPPER_voidOn+0xe18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	8e 01       	movw	r16, r28
    1d4e:	0b 51       	subi	r16, 0x1B	; 27
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	fe 01       	movw	r30, r28
    1d54:	e9 51       	subi	r30, 0x19	; 25
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	f8 01       	movw	r30, r16
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
    1d6e:	de 01       	movw	r26, r28
    1d70:	af 51       	subi	r26, 0x1F	; 31
    1d72:	bf 4f       	sbci	r27, 0xFF	; 255
    1d74:	fe 01       	movw	r30, r28
    1d76:	eb 51       	subi	r30, 0x1B	; 27
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	8d 93       	st	X+, r24
    1d80:	9c 93       	st	X, r25
    1d82:	fe 01       	movw	r30, r28
    1d84:	ef 51       	subi	r30, 0x1F	; 31
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <STEPPER_voidOn+0xe0a>
    1d90:	fe 01       	movw	r30, r28
    1d92:	ef 51       	subi	r30, 0x1F	; 31
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24

			}

		}else if( Direction == STEPPER_ANTI_CLOCK_WISE ){

			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 256 ) / 45 ) / 4 ; LOC_u16Iterator++  ){
    1d9a:	9e 01       	movw	r18, r28
    1d9c:	2f 5a       	subi	r18, 0xAF	; 175
    1d9e:	3e 4f       	sbci	r19, 0xFE	; 254
    1da0:	fe 01       	movw	r30, r28
    1da2:	ef 5a       	subi	r30, 0xAF	; 175
    1da4:	fe 4f       	sbci	r31, 0xFE	; 254
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	a2 81       	ldd	r26, Z+2	; 0x02
    1dac:	b3 81       	ldd	r27, Z+3	; 0x03
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	a1 1d       	adc	r26, r1
    1db2:	b1 1d       	adc	r27, r1
    1db4:	f9 01       	movw	r30, r18
    1db6:	80 83       	st	Z, r24
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	a2 83       	std	Z+2, r26	; 0x02
    1dbc:	b3 83       	std	Z+3, r27	; 0x03
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e8 5a       	subi	r30, 0xA8	; 168
    1dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	cc 01       	movw	r24, r24
    1dca:	a0 e0       	ldi	r26, 0x00	; 0
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	ba 2f       	mov	r27, r26
    1dd0:	a9 2f       	mov	r26, r25
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	88 27       	eor	r24, r24
    1dd6:	24 eb       	ldi	r18, 0xB4	; 180
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__udivmodsi4>
    1de6:	da 01       	movw	r26, r20
    1de8:	c9 01       	movw	r24, r18
    1dea:	9c 01       	movw	r18, r24
    1dec:	ad 01       	movw	r20, r26
    1dee:	fe 01       	movw	r30, r28
    1df0:	ef 5a       	subi	r30, 0xAF	; 175
    1df2:	fe 4f       	sbci	r31, 0xFE	; 254
    1df4:	80 81       	ld	r24, Z
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
    1df8:	a2 81       	ldd	r26, Z+2	; 0x02
    1dfa:	b3 81       	ldd	r27, Z+3	; 0x03
    1dfc:	82 17       	cp	r24, r18
    1dfe:	93 07       	cpc	r25, r19
    1e00:	a4 07       	cpc	r26, r20
    1e02:	b5 07       	cpc	r27, r21
    1e04:	08 f4       	brcc	.+2      	; 0x1e08 <STEPPER_voidOn+0xe86>
    1e06:	85 cc       	rjmp	.-1782   	; 0x1712 <STEPPER_voidOn+0x790>
    1e08:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <STEPPER_voidOn+0x2784>

			}

		}

	}else if( StepType == STEPPER_HALF_STEP ){
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	eb 5a       	subi	r30, 0xAB	; 171
    1e10:	fe 4f       	sbci	r31, 0xFE	; 254
    1e12:	80 81       	ld	r24, Z
    1e14:	88 23       	and	r24, r24
    1e16:	11 f0       	breq	.+4      	; 0x1e1c <STEPPER_voidOn+0xe9a>
    1e18:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <STEPPER_voidOn+0x2784>

		if( Direction == STEPPER_CLOCK_WISE ){
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ea 5a       	subi	r30, 0xAA	; 170
    1e20:	fe 4f       	sbci	r31, 0xFE	; 254
    1e22:	80 81       	ld	r24, Z
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <STEPPER_voidOn+0xea8>
    1e28:	cd c6       	rjmp	.+3482   	; 0x2bc4 <STEPPER_voidOn+0x1c42>

			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 512 ) / 45 ) / 8 ; LOC_u16Iterator++  ){
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ef 5a       	subi	r30, 0xAF	; 175
    1e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e30:	10 82       	st	Z, r1
    1e32:	11 82       	std	Z+1, r1	; 0x01
    1e34:	12 82       	std	Z+2, r1	; 0x02
    1e36:	13 82       	std	Z+3, r1	; 0x03
    1e38:	9a c6       	rjmp	.+3380   	; 0x2b6e <STEPPER_voidOn+0x1bec>

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	67 e0       	ldi	r22, 0x07	; 7
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	66 e0       	ldi	r22, 0x06	; 6
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	65 e0       	ldi	r22, 0x05	; 5
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	64 e0       	ldi	r22, 0x04	; 4
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    1e62:	fe 01       	movw	r30, r28
    1e64:	e9 5a       	subi	r30, 0xA9	; 169
    1e66:	fe 4f       	sbci	r31, 0xFE	; 254
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a0 e0       	ldi	r26, 0x00	; 0
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e3 52       	subi	r30, 0x23	; 35
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	a2 83       	std	Z+2, r26	; 0x02
    1e8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	8e 01       	movw	r16, r28
    1e8e:	07 52       	subi	r16, 0x27	; 39
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	fe 01       	movw	r30, r28
    1e94:	e3 52       	subi	r30, 0x23	; 35
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a e7       	ldi	r20, 0x7A	; 122
    1ea6:	53 e4       	ldi	r21, 0x43	; 67
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	80 83       	st	Z, r24
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	a2 83       	std	Z+2, r26	; 0x02
    1eb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e7 52       	subi	r30, 0x27	; 39
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	44 f4       	brge	.+16     	; 0x1ee8 <STEPPER_voidOn+0xf66>
		__ticks = 1;
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e9 52       	subi	r30, 0x29	; 41
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	80 83       	st	Z, r24
    1ee6:	64 c0       	rjmp	.+200    	; 0x1fb0 <STEPPER_voidOn+0x102e>
	else if (__tmp > 65535)
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e7 52       	subi	r30, 0x27	; 39
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	0c f0       	brlt	.+2      	; 0x1f08 <STEPPER_voidOn+0xf86>
    1f06:	43 c0       	rjmp	.+134    	; 0x1f8e <STEPPER_voidOn+0x100c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e3 52       	subi	r30, 0x23	; 35
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8e 01       	movw	r16, r28
    1f28:	09 52       	subi	r16, 0x29	; 41
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	f8 01       	movw	r30, r16
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	1f c0       	rjmp	.+62     	; 0x1f7e <STEPPER_voidOn+0xffc>
    1f40:	fe 01       	movw	r30, r28
    1f42:	eb 52       	subi	r30, 0x2B	; 43
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	89 e1       	ldi	r24, 0x19	; 25
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	80 83       	st	Z, r24
    1f4e:	fe 01       	movw	r30, r28
    1f50:	eb 52       	subi	r30, 0x2B	; 43
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <STEPPER_voidOn+0xfd6>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	eb 52       	subi	r30, 0x2B	; 43
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	de 01       	movw	r26, r28
    1f68:	a9 52       	subi	r26, 0x29	; 41
    1f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e9 52       	subi	r30, 0x29	; 41
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	11 96       	adiw	r26, 0x01	; 1
    1f7a:	9c 93       	st	X, r25
    1f7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e9 52       	subi	r30, 0x29	; 41
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	d1 f6       	brne	.-76     	; 0x1f40 <STEPPER_voidOn+0xfbe>
    1f8c:	27 c0       	rjmp	.+78     	; 0x1fdc <STEPPER_voidOn+0x105a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	8e 01       	movw	r16, r28
    1f90:	09 52       	subi	r16, 0x29	; 41
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	fe 01       	movw	r30, r28
    1f96:	e7 52       	subi	r30, 0x27	; 39
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	f8 01       	movw	r30, r16
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
    1fb0:	de 01       	movw	r26, r28
    1fb2:	ad 52       	subi	r26, 0x2D	; 45
    1fb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e9 52       	subi	r30, 0x29	; 41
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 81       	ld	r24, Z
    1fbe:	91 81       	ldd	r25, Z+1	; 0x01
    1fc0:	8d 93       	st	X+, r24
    1fc2:	9c 93       	st	X, r25
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ed 52       	subi	r30, 0x2D	; 45
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <STEPPER_voidOn+0x104c>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ed 52       	subi	r30, 0x2D	; 45
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	67 e0       	ldi	r22, 0x07	; 7
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	66 e0       	ldi	r22, 0x06	; 6
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	65 e0       	ldi	r22, 0x05	; 5
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	64 e0       	ldi	r22, 0x04	; 4
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    2004:	fe 01       	movw	r30, r28
    2006:	e9 5a       	subi	r30, 0xA9	; 169
    2008:	fe 4f       	sbci	r31, 0xFE	; 254
    200a:	80 81       	ld	r24, Z
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e0       	ldi	r26, 0x00	; 0
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	fe 01       	movw	r30, r28
    2022:	e1 53       	subi	r30, 0x31	; 49
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 83       	st	Z, r24
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	a2 83       	std	Z+2, r26	; 0x02
    202c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	8e 01       	movw	r16, r28
    2030:	05 53       	subi	r16, 0x35	; 53
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	e1 53       	subi	r30, 0x31	; 49
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a e7       	ldi	r20, 0x7A	; 122
    2048:	53 e4       	ldi	r21, 0x43	; 67
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    205c:	fe 01       	movw	r30, r28
    205e:	e5 53       	subi	r30, 0x35	; 53
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	44 f4       	brge	.+16     	; 0x208a <STEPPER_voidOn+0x1108>
		__ticks = 1;
    207a:	fe 01       	movw	r30, r28
    207c:	e7 53       	subi	r30, 0x37	; 55
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	64 c0       	rjmp	.+200    	; 0x2152 <STEPPER_voidOn+0x11d0>
	else if (__tmp > 65535)
    208a:	fe 01       	movw	r30, r28
    208c:	e5 53       	subi	r30, 0x35	; 53
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	0c f0       	brlt	.+2      	; 0x20aa <STEPPER_voidOn+0x1128>
    20a8:	43 c0       	rjmp	.+134    	; 0x2130 <STEPPER_voidOn+0x11ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	fe 01       	movw	r30, r28
    20ac:	e1 53       	subi	r30, 0x31	; 49
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8e 01       	movw	r16, r28
    20ca:	07 53       	subi	r16, 0x37	; 55
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	f8 01       	movw	r30, r16
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
    20e0:	1f c0       	rjmp	.+62     	; 0x2120 <STEPPER_voidOn+0x119e>
    20e2:	fe 01       	movw	r30, r28
    20e4:	e9 53       	subi	r30, 0x39	; 57
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	89 e1       	ldi	r24, 0x19	; 25
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	fe 01       	movw	r30, r28
    20f2:	e9 53       	subi	r30, 0x39	; 57
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <STEPPER_voidOn+0x1178>
    20fe:	fe 01       	movw	r30, r28
    2100:	e9 53       	subi	r30, 0x39	; 57
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	de 01       	movw	r26, r28
    210a:	a7 53       	subi	r26, 0x37	; 55
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	e7 53       	subi	r30, 0x37	; 55
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	9c 93       	st	X, r25
    211e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	fe 01       	movw	r30, r28
    2122:	e7 53       	subi	r30, 0x37	; 55
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	d1 f6       	brne	.-76     	; 0x20e2 <STEPPER_voidOn+0x1160>
    212e:	27 c0       	rjmp	.+78     	; 0x217e <STEPPER_voidOn+0x11fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	8e 01       	movw	r16, r28
    2132:	07 53       	subi	r16, 0x37	; 55
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	fe 01       	movw	r30, r28
    2138:	e5 53       	subi	r30, 0x35	; 53
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	de 01       	movw	r26, r28
    2154:	ab 53       	subi	r26, 0x3B	; 59
    2156:	bf 4f       	sbci	r27, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e7 53       	subi	r30, 0x37	; 55
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	8d 93       	st	X+, r24
    2164:	9c 93       	st	X, r25
    2166:	fe 01       	movw	r30, r28
    2168:	eb 53       	subi	r30, 0x3B	; 59
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <STEPPER_voidOn+0x11ee>
    2174:	fe 01       	movw	r30, r28
    2176:	eb 53       	subi	r30, 0x3B	; 59
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	67 e0       	ldi	r22, 0x07	; 7
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	66 e0       	ldi	r22, 0x06	; 6
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	65 e0       	ldi	r22, 0x05	; 5
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	64 e0       	ldi	r22, 0x04	; 4
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    21a6:	fe 01       	movw	r30, r28
    21a8:	e9 5a       	subi	r30, 0xA9	; 169
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	80 81       	ld	r24, Z
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	a0 e0       	ldi	r26, 0x00	; 0
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	fe 01       	movw	r30, r28
    21c4:	ef 53       	subi	r30, 0x3F	; 63
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 83       	st	Z, r24
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	a2 83       	std	Z+2, r26	; 0x02
    21ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	8e 01       	movw	r16, r28
    21d2:	03 54       	subi	r16, 0x43	; 67
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	ef 53       	subi	r30, 0x3F	; 63
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a e7       	ldi	r20, 0x7A	; 122
    21ea:	53 e4       	ldi	r21, 0x43	; 67
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	f8 01       	movw	r30, r16
    21f6:	80 83       	st	Z, r24
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	a2 83       	std	Z+2, r26	; 0x02
    21fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21fe:	fe 01       	movw	r30, r28
    2200:	e3 54       	subi	r30, 0x43	; 67
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	44 f4       	brge	.+16     	; 0x222c <STEPPER_voidOn+0x12aa>
		__ticks = 1;
    221c:	fe 01       	movw	r30, r28
    221e:	e5 54       	subi	r30, 0x45	; 69
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	64 c0       	rjmp	.+200    	; 0x22f4 <STEPPER_voidOn+0x1372>
	else if (__tmp > 65535)
    222c:	fe 01       	movw	r30, r28
    222e:	e3 54       	subi	r30, 0x43	; 67
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	0c f0       	brlt	.+2      	; 0x224c <STEPPER_voidOn+0x12ca>
    224a:	43 c0       	rjmp	.+134    	; 0x22d2 <STEPPER_voidOn+0x1350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	fe 01       	movw	r30, r28
    224e:	ef 53       	subi	r30, 0x3F	; 63
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8e 01       	movw	r16, r28
    226c:	05 54       	subi	r16, 0x45	; 69
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	f8 01       	movw	r30, r16
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
    2282:	1f c0       	rjmp	.+62     	; 0x22c2 <STEPPER_voidOn+0x1340>
    2284:	fe 01       	movw	r30, r28
    2286:	e7 54       	subi	r30, 0x47	; 71
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	89 e1       	ldi	r24, 0x19	; 25
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	91 83       	std	Z+1, r25	; 0x01
    2290:	80 83       	st	Z, r24
    2292:	fe 01       	movw	r30, r28
    2294:	e7 54       	subi	r30, 0x47	; 71
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <STEPPER_voidOn+0x131a>
    22a0:	fe 01       	movw	r30, r28
    22a2:	e7 54       	subi	r30, 0x47	; 71
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	de 01       	movw	r26, r28
    22ac:	a5 54       	subi	r26, 0x45	; 69
    22ae:	bf 4f       	sbci	r27, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 54       	subi	r30, 0x45	; 69
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	9c 93       	st	X, r25
    22c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	fe 01       	movw	r30, r28
    22c4:	e5 54       	subi	r30, 0x45	; 69
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	d1 f6       	brne	.-76     	; 0x2284 <STEPPER_voidOn+0x1302>
    22d0:	27 c0       	rjmp	.+78     	; 0x2320 <STEPPER_voidOn+0x139e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	8e 01       	movw	r16, r28
    22d4:	05 54       	subi	r16, 0x45	; 69
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	fe 01       	movw	r30, r28
    22da:	e3 54       	subi	r30, 0x43	; 67
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	f8 01       	movw	r30, r16
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	80 83       	st	Z, r24
    22f4:	de 01       	movw	r26, r28
    22f6:	a9 54       	subi	r26, 0x49	; 73
    22f8:	bf 4f       	sbci	r27, 0xFF	; 255
    22fa:	fe 01       	movw	r30, r28
    22fc:	e5 54       	subi	r30, 0x45	; 69
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	8d 93       	st	X+, r24
    2306:	9c 93       	st	X, r25
    2308:	fe 01       	movw	r30, r28
    230a:	e9 54       	subi	r30, 0x49	; 73
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <STEPPER_voidOn+0x1390>
    2316:	fe 01       	movw	r30, r28
    2318:	e9 54       	subi	r30, 0x49	; 73
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	67 e0       	ldi	r22, 0x07	; 7
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	66 e0       	ldi	r22, 0x06	; 6
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_HIGH );
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	65 e0       	ldi	r22, 0x05	; 5
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	64 e0       	ldi	r22, 0x04	; 4
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    2348:	fe 01       	movw	r30, r28
    234a:	e9 5a       	subi	r30, 0xA9	; 169
    234c:	fe 4f       	sbci	r31, 0xFE	; 254
    234e:	80 81       	ld	r24, Z
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e0       	ldi	r26, 0x00	; 0
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	fe 01       	movw	r30, r28
    2366:	ed 54       	subi	r30, 0x4D	; 77
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 83       	st	Z, r24
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	a2 83       	std	Z+2, r26	; 0x02
    2370:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	8e 01       	movw	r16, r28
    2374:	01 55       	subi	r16, 0x51	; 81
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	fe 01       	movw	r30, r28
    237a:	ed 54       	subi	r30, 0x4D	; 77
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a e7       	ldi	r20, 0x7A	; 122
    238c:	53 e4       	ldi	r21, 0x43	; 67
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	80 83       	st	Z, r24
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	a2 83       	std	Z+2, r26	; 0x02
    239e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a0:	fe 01       	movw	r30, r28
    23a2:	e1 55       	subi	r30, 0x51	; 81
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	44 f4       	brge	.+16     	; 0x23ce <STEPPER_voidOn+0x144c>
		__ticks = 1;
    23be:	fe 01       	movw	r30, r28
    23c0:	e3 55       	subi	r30, 0x53	; 83
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
    23cc:	64 c0       	rjmp	.+200    	; 0x2496 <STEPPER_voidOn+0x1514>
	else if (__tmp > 65535)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e1 55       	subi	r30, 0x51	; 81
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	0c f0       	brlt	.+2      	; 0x23ee <STEPPER_voidOn+0x146c>
    23ec:	43 c0       	rjmp	.+134    	; 0x2474 <STEPPER_voidOn+0x14f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	fe 01       	movw	r30, r28
    23f0:	ed 54       	subi	r30, 0x4D	; 77
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	8e 01       	movw	r16, r28
    240e:	03 55       	subi	r16, 0x53	; 83
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	f8 01       	movw	r30, r16
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
    2424:	1f c0       	rjmp	.+62     	; 0x2464 <STEPPER_voidOn+0x14e2>
    2426:	fe 01       	movw	r30, r28
    2428:	e5 55       	subi	r30, 0x55	; 85
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	89 e1       	ldi	r24, 0x19	; 25
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
    2434:	fe 01       	movw	r30, r28
    2436:	e5 55       	subi	r30, 0x55	; 85
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <STEPPER_voidOn+0x14bc>
    2442:	fe 01       	movw	r30, r28
    2444:	e5 55       	subi	r30, 0x55	; 85
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	de 01       	movw	r26, r28
    244e:	a3 55       	subi	r26, 0x53	; 83
    2450:	bf 4f       	sbci	r27, 0xFF	; 255
    2452:	fe 01       	movw	r30, r28
    2454:	e3 55       	subi	r30, 0x53	; 83
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	11 96       	adiw	r26, 0x01	; 1
    2460:	9c 93       	st	X, r25
    2462:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2464:	fe 01       	movw	r30, r28
    2466:	e3 55       	subi	r30, 0x53	; 83
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	91 81       	ldd	r25, Z+1	; 0x01
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	d1 f6       	brne	.-76     	; 0x2426 <STEPPER_voidOn+0x14a4>
    2472:	27 c0       	rjmp	.+78     	; 0x24c2 <STEPPER_voidOn+0x1540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	8e 01       	movw	r16, r28
    2476:	03 55       	subi	r16, 0x53	; 83
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	fe 01       	movw	r30, r28
    247c:	e1 55       	subi	r30, 0x51	; 81
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	f8 01       	movw	r30, r16
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
    2496:	de 01       	movw	r26, r28
    2498:	a7 55       	subi	r26, 0x57	; 87
    249a:	bf 4f       	sbci	r27, 0xFF	; 255
    249c:	fe 01       	movw	r30, r28
    249e:	e3 55       	subi	r30, 0x53	; 83
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	8d 93       	st	X+, r24
    24a8:	9c 93       	st	X, r25
    24aa:	fe 01       	movw	r30, r28
    24ac:	e7 55       	subi	r30, 0x57	; 87
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <STEPPER_voidOn+0x1532>
    24b8:	fe 01       	movw	r30, r28
    24ba:	e7 55       	subi	r30, 0x57	; 87
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0, DIO_PIN_LOW  );
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	67 e0       	ldi	r22, 0x07	; 7
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1, DIO_PIN_LOW  );
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	66 e0       	ldi	r22, 0x06	; 6
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2, DIO_PIN_HIGH );
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	65 e0       	ldi	r22, 0x05	; 5
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3, DIO_PIN_LOW  );
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	64 e0       	ldi	r22, 0x04	; 4
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    24ea:	fe 01       	movw	r30, r28
    24ec:	e9 5a       	subi	r30, 0xA9	; 169
    24ee:	fe 4f       	sbci	r31, 0xFE	; 254
    24f0:	80 81       	ld	r24, Z
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 e0       	ldi	r26, 0x00	; 0
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	fe 01       	movw	r30, r28
    2508:	eb 55       	subi	r30, 0x5B	; 91
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 83       	st	Z, r24
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	a2 83       	std	Z+2, r26	; 0x02
    2512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	8e 01       	movw	r16, r28
    2516:	0f 55       	subi	r16, 0x5F	; 95
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	eb 55       	subi	r30, 0x5B	; 91
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a e7       	ldi	r20, 0x7A	; 122
    252e:	53 e4       	ldi	r21, 0x43	; 67
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	80 83       	st	Z, r24
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	a2 83       	std	Z+2, r26	; 0x02
    2540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2542:	fe 01       	movw	r30, r28
    2544:	ef 55       	subi	r30, 0x5F	; 95
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	44 f4       	brge	.+16     	; 0x2570 <STEPPER_voidOn+0x15ee>
		__ticks = 1;
    2560:	fe 01       	movw	r30, r28
    2562:	e1 56       	subi	r30, 0x61	; 97
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	64 c0       	rjmp	.+200    	; 0x2638 <STEPPER_voidOn+0x16b6>
	else if (__tmp > 65535)
    2570:	fe 01       	movw	r30, r28
    2572:	ef 55       	subi	r30, 0x5F	; 95
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	0c f0       	brlt	.+2      	; 0x2590 <STEPPER_voidOn+0x160e>
    258e:	43 c0       	rjmp	.+134    	; 0x2616 <STEPPER_voidOn+0x1694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	fe 01       	movw	r30, r28
    2592:	eb 55       	subi	r30, 0x5B	; 91
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8e 01       	movw	r16, r28
    25b0:	01 56       	subi	r16, 0x61	; 97
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	f8 01       	movw	r30, r16
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	1f c0       	rjmp	.+62     	; 0x2606 <STEPPER_voidOn+0x1684>
    25c8:	fe 01       	movw	r30, r28
    25ca:	e3 56       	subi	r30, 0x63	; 99
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	89 e1       	ldi	r24, 0x19	; 25
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
    25d6:	fe 01       	movw	r30, r28
    25d8:	e3 56       	subi	r30, 0x63	; 99
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <STEPPER_voidOn+0x165e>
    25e4:	fe 01       	movw	r30, r28
    25e6:	e3 56       	subi	r30, 0x63	; 99
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	de 01       	movw	r26, r28
    25f0:	a1 56       	subi	r26, 0x61	; 97
    25f2:	bf 4f       	sbci	r27, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	e1 56       	subi	r30, 0x61	; 97
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	11 96       	adiw	r26, 0x01	; 1
    2602:	9c 93       	st	X, r25
    2604:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	fe 01       	movw	r30, r28
    2608:	e1 56       	subi	r30, 0x61	; 97
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	d1 f6       	brne	.-76     	; 0x25c8 <STEPPER_voidOn+0x1646>
    2614:	27 c0       	rjmp	.+78     	; 0x2664 <STEPPER_voidOn+0x16e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	8e 01       	movw	r16, r28
    2618:	01 56       	subi	r16, 0x61	; 97
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	ef 55       	subi	r30, 0x5F	; 95
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	f8 01       	movw	r30, r16
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	de 01       	movw	r26, r28
    263a:	a5 56       	subi	r26, 0x65	; 101
    263c:	bf 4f       	sbci	r27, 0xFF	; 255
    263e:	fe 01       	movw	r30, r28
    2640:	e1 56       	subi	r30, 0x61	; 97
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	8d 93       	st	X+, r24
    264a:	9c 93       	st	X, r25
    264c:	fe 01       	movw	r30, r28
    264e:	e5 56       	subi	r30, 0x65	; 101
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <STEPPER_voidOn+0x16d4>
    265a:	fe 01       	movw	r30, r28
    265c:	e5 56       	subi	r30, 0x65	; 101
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	67 e0       	ldi	r22, 0x07	; 7
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	66 e0       	ldi	r22, 0x06	; 6
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_HIGH );
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	65 e0       	ldi	r22, 0x05	; 5
    267c:	41 e0       	ldi	r20, 0x01	; 1
    267e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	64 e0       	ldi	r22, 0x04	; 4
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    268c:	fe 01       	movw	r30, r28
    268e:	e9 5a       	subi	r30, 0xA9	; 169
    2690:	fe 4f       	sbci	r31, 0xFE	; 254
    2692:	80 81       	ld	r24, Z
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 e0       	ldi	r26, 0x00	; 0
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	fe 01       	movw	r30, r28
    26aa:	e9 56       	subi	r30, 0x69	; 105
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 83       	st	Z, r24
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	a2 83       	std	Z+2, r26	; 0x02
    26b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	8e 01       	movw	r16, r28
    26b8:	0d 56       	subi	r16, 0x6D	; 109
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	fe 01       	movw	r30, r28
    26be:	e9 56       	subi	r30, 0x69	; 105
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	80 83       	st	Z, r24
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	a2 83       	std	Z+2, r26	; 0x02
    26e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e4:	fe 01       	movw	r30, r28
    26e6:	ed 56       	subi	r30, 0x6D	; 109
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e8       	ldi	r20, 0x80	; 128
    26f8:	5f e3       	ldi	r21, 0x3F	; 63
    26fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fe:	88 23       	and	r24, r24
    2700:	44 f4       	brge	.+16     	; 0x2712 <STEPPER_voidOn+0x1790>
		__ticks = 1;
    2702:	fe 01       	movw	r30, r28
    2704:	ef 56       	subi	r30, 0x6F	; 111
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    2710:	64 c0       	rjmp	.+200    	; 0x27da <STEPPER_voidOn+0x1858>
	else if (__tmp > 65535)
    2712:	fe 01       	movw	r30, r28
    2714:	ed 56       	subi	r30, 0x6D	; 109
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	0c f0       	brlt	.+2      	; 0x2732 <STEPPER_voidOn+0x17b0>
    2730:	43 c0       	rjmp	.+134    	; 0x27b8 <STEPPER_voidOn+0x1836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2732:	fe 01       	movw	r30, r28
    2734:	e9 56       	subi	r30, 0x69	; 105
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	51 e4       	ldi	r21, 0x41	; 65
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	8e 01       	movw	r16, r28
    2752:	0f 56       	subi	r16, 0x6F	; 111
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	f8 01       	movw	r30, r16
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	80 83       	st	Z, r24
    2768:	1f c0       	rjmp	.+62     	; 0x27a8 <STEPPER_voidOn+0x1826>
    276a:	fe 01       	movw	r30, r28
    276c:	e1 57       	subi	r30, 0x71	; 113
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	89 e1       	ldi	r24, 0x19	; 25
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
    2778:	fe 01       	movw	r30, r28
    277a:	e1 57       	subi	r30, 0x71	; 113
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <STEPPER_voidOn+0x1800>
    2786:	fe 01       	movw	r30, r28
    2788:	e1 57       	subi	r30, 0x71	; 113
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2790:	de 01       	movw	r26, r28
    2792:	af 56       	subi	r26, 0x6F	; 111
    2794:	bf 4f       	sbci	r27, 0xFF	; 255
    2796:	fe 01       	movw	r30, r28
    2798:	ef 56       	subi	r30, 0x6F	; 111
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	11 96       	adiw	r26, 0x01	; 1
    27a4:	9c 93       	st	X, r25
    27a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	fe 01       	movw	r30, r28
    27aa:	ef 56       	subi	r30, 0x6F	; 111
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	d1 f6       	brne	.-76     	; 0x276a <STEPPER_voidOn+0x17e8>
    27b6:	27 c0       	rjmp	.+78     	; 0x2806 <STEPPER_voidOn+0x1884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	8e 01       	movw	r16, r28
    27ba:	0f 56       	subi	r16, 0x6F	; 111
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	fe 01       	movw	r30, r28
    27c0:	ed 56       	subi	r30, 0x6D	; 109
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	f8 01       	movw	r30, r16
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
    27da:	de 01       	movw	r26, r28
    27dc:	a3 57       	subi	r26, 0x73	; 115
    27de:	bf 4f       	sbci	r27, 0xFF	; 255
    27e0:	fe 01       	movw	r30, r28
    27e2:	ef 56       	subi	r30, 0x6F	; 111
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	8d 93       	st	X+, r24
    27ec:	9c 93       	st	X, r25
    27ee:	fe 01       	movw	r30, r28
    27f0:	e3 57       	subi	r30, 0x73	; 115
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <STEPPER_voidOn+0x1876>
    27fc:	fe 01       	movw	r30, r28
    27fe:	e3 57       	subi	r30, 0x73	; 115
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	67 e0       	ldi	r22, 0x07	; 7
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	66 e0       	ldi	r22, 0x06	; 6
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	64 e0       	ldi	r22, 0x04	; 4
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    282e:	fe 01       	movw	r30, r28
    2830:	e9 5a       	subi	r30, 0xA9	; 169
    2832:	fe 4f       	sbci	r31, 0xFE	; 254
    2834:	80 81       	ld	r24, Z
    2836:	88 2f       	mov	r24, r24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	fe 01       	movw	r30, r28
    284c:	e7 57       	subi	r30, 0x77	; 119
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 83       	st	Z, r24
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	a2 83       	std	Z+2, r26	; 0x02
    2856:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2858:	8e 01       	movw	r16, r28
    285a:	0b 57       	subi	r16, 0x7B	; 123
    285c:	1f 4f       	sbci	r17, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	e7 57       	subi	r30, 0x77	; 119
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4a e7       	ldi	r20, 0x7A	; 122
    2872:	53 e4       	ldi	r21, 0x43	; 67
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	f8 01       	movw	r30, r16
    287e:	80 83       	st	Z, r24
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	a2 83       	std	Z+2, r26	; 0x02
    2884:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2886:	fe 01       	movw	r30, r28
    2888:	eb 57       	subi	r30, 0x7B	; 123
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	60 81       	ld	r22, Z
    288e:	71 81       	ldd	r23, Z+1	; 0x01
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e8       	ldi	r20, 0x80	; 128
    289a:	5f e3       	ldi	r21, 0x3F	; 63
    289c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a0:	88 23       	and	r24, r24
    28a2:	44 f4       	brge	.+16     	; 0x28b4 <STEPPER_voidOn+0x1932>
		__ticks = 1;
    28a4:	fe 01       	movw	r30, r28
    28a6:	ed 57       	subi	r30, 0x7D	; 125
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
    28b2:	64 c0       	rjmp	.+200    	; 0x297c <STEPPER_voidOn+0x19fa>
	else if (__tmp > 65535)
    28b4:	fe 01       	movw	r30, r28
    28b6:	eb 57       	subi	r30, 0x7B	; 123
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	60 81       	ld	r22, Z
    28bc:	71 81       	ldd	r23, Z+1	; 0x01
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	93 81       	ldd	r25, Z+3	; 0x03
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	3f ef       	ldi	r19, 0xFF	; 255
    28c6:	4f e7       	ldi	r20, 0x7F	; 127
    28c8:	57 e4       	ldi	r21, 0x47	; 71
    28ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ce:	18 16       	cp	r1, r24
    28d0:	0c f0       	brlt	.+2      	; 0x28d4 <STEPPER_voidOn+0x1952>
    28d2:	43 c0       	rjmp	.+134    	; 0x295a <STEPPER_voidOn+0x19d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	fe 01       	movw	r30, r28
    28d6:	e7 57       	subi	r30, 0x77	; 119
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	82 81       	ldd	r24, Z+2	; 0x02
    28e0:	93 81       	ldd	r25, Z+3	; 0x03
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8e 01       	movw	r16, r28
    28f4:	0d 57       	subi	r16, 0x7D	; 125
    28f6:	1f 4f       	sbci	r17, 0xFF	; 255
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	f8 01       	movw	r30, r16
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	1f c0       	rjmp	.+62     	; 0x294a <STEPPER_voidOn+0x19c8>
    290c:	fe 01       	movw	r30, r28
    290e:	ef 57       	subi	r30, 0x7F	; 127
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	89 e1       	ldi	r24, 0x19	; 25
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	80 83       	st	Z, r24
    291a:	fe 01       	movw	r30, r28
    291c:	ef 57       	subi	r30, 0x7F	; 127
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 81       	ld	r24, Z
    2922:	91 81       	ldd	r25, Z+1	; 0x01
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <STEPPER_voidOn+0x19a2>
    2928:	fe 01       	movw	r30, r28
    292a:	ef 57       	subi	r30, 0x7F	; 127
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2932:	de 01       	movw	r26, r28
    2934:	ad 57       	subi	r26, 0x7D	; 125
    2936:	bf 4f       	sbci	r27, 0xFF	; 255
    2938:	fe 01       	movw	r30, r28
    293a:	ed 57       	subi	r30, 0x7D	; 125
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 81       	ld	r24, Z
    2940:	91 81       	ldd	r25, Z+1	; 0x01
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	11 96       	adiw	r26, 0x01	; 1
    2946:	9c 93       	st	X, r25
    2948:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294a:	fe 01       	movw	r30, r28
    294c:	ed 57       	subi	r30, 0x7D	; 125
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	d1 f6       	brne	.-76     	; 0x290c <STEPPER_voidOn+0x198a>
    2958:	27 c0       	rjmp	.+78     	; 0x29a8 <STEPPER_voidOn+0x1a26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295a:	8e 01       	movw	r16, r28
    295c:	0d 57       	subi	r16, 0x7D	; 125
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	fe 01       	movw	r30, r28
    2962:	eb 57       	subi	r30, 0x7B	; 123
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	f8 01       	movw	r30, r16
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24
    297c:	de 01       	movw	r26, r28
    297e:	a1 58       	subi	r26, 0x81	; 129
    2980:	bf 4f       	sbci	r27, 0xFF	; 255
    2982:	fe 01       	movw	r30, r28
    2984:	ed 57       	subi	r30, 0x7D	; 125
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	8d 93       	st	X+, r24
    298e:	9c 93       	st	X, r25
    2990:	fe 01       	movw	r30, r28
    2992:	e1 58       	subi	r30, 0x81	; 129
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <STEPPER_voidOn+0x1a18>
    299e:	fe 01       	movw	r30, r28
    29a0:	e1 58       	subi	r30, 0x81	; 129
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	67 e0       	ldi	r22, 0x07	; 7
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	66 e0       	ldi	r22, 0x06	; 6
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	65 e0       	ldi	r22, 0x05	; 5
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	64 e0       	ldi	r22, 0x04	; 4
    29ca:	41 e0       	ldi	r20, 0x01	; 1
    29cc:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    29d0:	fe 01       	movw	r30, r28
    29d2:	e9 5a       	subi	r30, 0xA9	; 169
    29d4:	fe 4f       	sbci	r31, 0xFE	; 254
    29d6:	80 81       	ld	r24, Z
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a0 e0       	ldi	r26, 0x00	; 0
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	fe 01       	movw	r30, r28
    29ee:	e5 58       	subi	r30, 0x85	; 133
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 83       	st	Z, r24
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	a2 83       	std	Z+2, r26	; 0x02
    29f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fa:	8e 01       	movw	r16, r28
    29fc:	09 58       	subi	r16, 0x89	; 137
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	e5 58       	subi	r30, 0x85	; 133
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4a e7       	ldi	r20, 0x7A	; 122
    2a14:	53 e4       	ldi	r21, 0x43	; 67
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	f8 01       	movw	r30, r16
    2a20:	80 83       	st	Z, r24
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	a2 83       	std	Z+2, r26	; 0x02
    2a26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e9 58       	subi	r30, 0x89	; 137
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	44 f4       	brge	.+16     	; 0x2a56 <STEPPER_voidOn+0x1ad4>
		__ticks = 1;
    2a46:	fe 01       	movw	r30, r28
    2a48:	eb 58       	subi	r30, 0x8B	; 139
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	64 c0       	rjmp	.+200    	; 0x2b1e <STEPPER_voidOn+0x1b9c>
	else if (__tmp > 65535)
    2a56:	fe 01       	movw	r30, r28
    2a58:	e9 58       	subi	r30, 0x89	; 137
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	0c f0       	brlt	.+2      	; 0x2a76 <STEPPER_voidOn+0x1af4>
    2a74:	43 c0       	rjmp	.+134    	; 0x2afc <STEPPER_voidOn+0x1b7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	fe 01       	movw	r30, r28
    2a78:	e5 58       	subi	r30, 0x85	; 133
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e2       	ldi	r20, 0x20	; 32
    2a8a:	51 e4       	ldi	r21, 0x41	; 65
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8e 01       	movw	r16, r28
    2a96:	0b 58       	subi	r16, 0x8B	; 139
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	1f c0       	rjmp	.+62     	; 0x2aec <STEPPER_voidOn+0x1b6a>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ed 58       	subi	r30, 0x8D	; 141
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	89 e1       	ldi	r24, 0x19	; 25
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
    2abc:	fe 01       	movw	r30, r28
    2abe:	ed 58       	subi	r30, 0x8D	; 141
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <STEPPER_voidOn+0x1b44>
    2aca:	fe 01       	movw	r30, r28
    2acc:	ed 58       	subi	r30, 0x8D	; 141
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	de 01       	movw	r26, r28
    2ad6:	ab 58       	subi	r26, 0x8B	; 139
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	eb 58       	subi	r30, 0x8B	; 139
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	11 96       	adiw	r26, 0x01	; 1
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	fe 01       	movw	r30, r28
    2aee:	eb 58       	subi	r30, 0x8B	; 139
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	d1 f6       	brne	.-76     	; 0x2aae <STEPPER_voidOn+0x1b2c>
    2afa:	27 c0       	rjmp	.+78     	; 0x2b4a <STEPPER_voidOn+0x1bc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	8e 01       	movw	r16, r28
    2afe:	0b 58       	subi	r16, 0x8B	; 139
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	fe 01       	movw	r30, r28
    2b04:	e9 58       	subi	r30, 0x89	; 137
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	f8 01       	movw	r30, r16
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	de 01       	movw	r26, r28
    2b20:	af 58       	subi	r26, 0x8F	; 143
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	eb 58       	subi	r30, 0x8B	; 139
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	8d 93       	st	X+, r24
    2b30:	9c 93       	st	X, r25
    2b32:	fe 01       	movw	r30, r28
    2b34:	ef 58       	subi	r30, 0x8F	; 143
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <STEPPER_voidOn+0x1bba>
    2b40:	fe 01       	movw	r30, r28
    2b42:	ef 58       	subi	r30, 0x8F	; 143
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24

	}else if( StepType == STEPPER_HALF_STEP ){

		if( Direction == STEPPER_CLOCK_WISE ){

			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 512 ) / 45 ) / 8 ; LOC_u16Iterator++  ){
    2b4a:	9e 01       	movw	r18, r28
    2b4c:	2f 5a       	subi	r18, 0xAF	; 175
    2b4e:	3e 4f       	sbci	r19, 0xFE	; 254
    2b50:	fe 01       	movw	r30, r28
    2b52:	ef 5a       	subi	r30, 0xAF	; 175
    2b54:	fe 4f       	sbci	r31, 0xFE	; 254
    2b56:	80 81       	ld	r24, Z
    2b58:	91 81       	ldd	r25, Z+1	; 0x01
    2b5a:	a2 81       	ldd	r26, Z+2	; 0x02
    2b5c:	b3 81       	ldd	r27, Z+3	; 0x03
    2b5e:	01 96       	adiw	r24, 0x01	; 1
    2b60:	a1 1d       	adc	r26, r1
    2b62:	b1 1d       	adc	r27, r1
    2b64:	f9 01       	movw	r30, r18
    2b66:	80 83       	st	Z, r24
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	a2 83       	std	Z+2, r26	; 0x02
    2b6c:	b3 83       	std	Z+3, r27	; 0x03
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e8 5a       	subi	r30, 0xA8	; 168
    2b72:	fe 4f       	sbci	r31, 0xFE	; 254
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	cc 01       	movw	r24, r24
    2b7a:	a0 e0       	ldi	r26, 0x00	; 0
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	07 2e       	mov	r0, r23
    2b80:	79 e0       	ldi	r23, 0x09	; 9
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	aa 1f       	adc	r26, r26
    2b88:	bb 1f       	adc	r27, r27
    2b8a:	7a 95       	dec	r23
    2b8c:	d1 f7       	brne	.-12     	; 0x2b82 <STEPPER_voidOn+0x1c00>
    2b8e:	70 2d       	mov	r23, r0
    2b90:	28 e6       	ldi	r18, 0x68	; 104
    2b92:	31 e0       	ldi	r19, 0x01	; 1
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__udivmodsi4>
    2ba0:	da 01       	movw	r26, r20
    2ba2:	c9 01       	movw	r24, r18
    2ba4:	9c 01       	movw	r18, r24
    2ba6:	ad 01       	movw	r20, r26
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ef 5a       	subi	r30, 0xAF	; 175
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	a2 81       	ldd	r26, Z+2	; 0x02
    2bb4:	b3 81       	ldd	r27, Z+3	; 0x03
    2bb6:	82 17       	cp	r24, r18
    2bb8:	93 07       	cpc	r25, r19
    2bba:	a4 07       	cpc	r26, r20
    2bbc:	b5 07       	cpc	r27, r21
    2bbe:	08 f4       	brcc	.+2      	; 0x2bc2 <STEPPER_voidOn+0x1c40>
    2bc0:	3c c9       	rjmp	.-3464   	; 0x1e3a <STEPPER_voidOn+0xeb8>
    2bc2:	a1 c5       	rjmp	.+2882   	; 0x3706 <STEPPER_voidOn+0x2784>



			}

		}else if( Direction == STEPPER_ANTI_CLOCK_WISE ){
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ea 5a       	subi	r30, 0xAA	; 170
    2bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bca:	80 81       	ld	r24, Z
    2bcc:	88 23       	and	r24, r24
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <STEPPER_voidOn+0x1c50>
    2bd0:	9a c5       	rjmp	.+2868   	; 0x3706 <STEPPER_voidOn+0x2784>


			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 512 ) / 45 ) / 8 ; LOC_u16Iterator++  ){
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ef 5a       	subi	r30, 0xAF	; 175
    2bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd8:	10 82       	st	Z, r1
    2bda:	11 82       	std	Z+1, r1	; 0x01
    2bdc:	12 82       	std	Z+2, r1	; 0x02
    2bde:	13 82       	std	Z+3, r1	; 0x03
    2be0:	68 c5       	rjmp	.+2768   	; 0x36b2 <STEPPER_voidOn+0x2730>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	67 e0       	ldi	r22, 0x07	; 7
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	66 e0       	ldi	r22, 0x06	; 6
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	65 e0       	ldi	r22, 0x05	; 5
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	64 e0       	ldi	r22, 0x04	; 4
    2c04:	41 e0       	ldi	r20, 0x01	; 1
    2c06:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e9 5a       	subi	r30, 0xA9	; 169
    2c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c10:	80 81       	ld	r24, Z
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e0       	ldi	r26, 0x00	; 0
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	fe 01       	movw	r30, r28
    2c28:	e3 59       	subi	r30, 0x93	; 147
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 83       	st	Z, r24
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	a2 83       	std	Z+2, r26	; 0x02
    2c32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	8e 01       	movw	r16, r28
    2c36:	07 59       	subi	r16, 0x97	; 151
    2c38:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e3 59       	subi	r30, 0x93	; 147
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	60 81       	ld	r22, Z
    2c42:	71 81       	ldd	r23, Z+1	; 0x01
    2c44:	82 81       	ldd	r24, Z+2	; 0x02
    2c46:	93 81       	ldd	r25, Z+3	; 0x03
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	4a e7       	ldi	r20, 0x7A	; 122
    2c4e:	53 e4       	ldi	r21, 0x43	; 67
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	f8 01       	movw	r30, r16
    2c5a:	80 83       	st	Z, r24
    2c5c:	91 83       	std	Z+1, r25	; 0x01
    2c5e:	a2 83       	std	Z+2, r26	; 0x02
    2c60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c62:	fe 01       	movw	r30, r28
    2c64:	e7 59       	subi	r30, 0x97	; 151
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	60 81       	ld	r22, Z
    2c6a:	71 81       	ldd	r23, Z+1	; 0x01
    2c6c:	82 81       	ldd	r24, Z+2	; 0x02
    2c6e:	93 81       	ldd	r25, Z+3	; 0x03
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	44 f4       	brge	.+16     	; 0x2c90 <STEPPER_voidOn+0x1d0e>
		__ticks = 1;
    2c80:	fe 01       	movw	r30, r28
    2c82:	e9 59       	subi	r30, 0x99	; 153
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	80 83       	st	Z, r24
    2c8e:	64 c0       	rjmp	.+200    	; 0x2d58 <STEPPER_voidOn+0x1dd6>
	else if (__tmp > 65535)
    2c90:	fe 01       	movw	r30, r28
    2c92:	e7 59       	subi	r30, 0x97	; 151
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	60 81       	ld	r22, Z
    2c98:	71 81       	ldd	r23, Z+1	; 0x01
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	0c f0       	brlt	.+2      	; 0x2cb0 <STEPPER_voidOn+0x1d2e>
    2cae:	43 c0       	rjmp	.+134    	; 0x2d36 <STEPPER_voidOn+0x1db4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e3 59       	subi	r30, 0x93	; 147
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	60 81       	ld	r22, Z
    2cb8:	71 81       	ldd	r23, Z+1	; 0x01
    2cba:	82 81       	ldd	r24, Z+2	; 0x02
    2cbc:	93 81       	ldd	r25, Z+3	; 0x03
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8e 01       	movw	r16, r28
    2cd0:	09 59       	subi	r16, 0x99	; 153
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	1f c0       	rjmp	.+62     	; 0x2d26 <STEPPER_voidOn+0x1da4>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	eb 59       	subi	r30, 0x9B	; 155
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	89 e1       	ldi	r24, 0x19	; 25
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	80 83       	st	Z, r24
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	eb 59       	subi	r30, 0x9B	; 155
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <STEPPER_voidOn+0x1d7e>
    2d04:	fe 01       	movw	r30, r28
    2d06:	eb 59       	subi	r30, 0x9B	; 155
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	de 01       	movw	r26, r28
    2d10:	a9 59       	subi	r26, 0x99	; 153
    2d12:	bf 4f       	sbci	r27, 0xFF	; 255
    2d14:	fe 01       	movw	r30, r28
    2d16:	e9 59       	subi	r30, 0x99	; 153
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 81       	ld	r24, Z
    2d1c:	91 81       	ldd	r25, Z+1	; 0x01
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	11 96       	adiw	r26, 0x01	; 1
    2d22:	9c 93       	st	X, r25
    2d24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	fe 01       	movw	r30, r28
    2d28:	e9 59       	subi	r30, 0x99	; 153
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	d1 f6       	brne	.-76     	; 0x2ce8 <STEPPER_voidOn+0x1d66>
    2d34:	27 c0       	rjmp	.+78     	; 0x2d84 <STEPPER_voidOn+0x1e02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d36:	8e 01       	movw	r16, r28
    2d38:	09 59       	subi	r16, 0x99	; 153
    2d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e7 59       	subi	r30, 0x97	; 151
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	60 81       	ld	r22, Z
    2d44:	71 81       	ldd	r23, Z+1	; 0x01
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	f8 01       	movw	r30, r16
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
    2d58:	de 01       	movw	r26, r28
    2d5a:	ad 59       	subi	r26, 0x9D	; 157
    2d5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e9 59       	subi	r30, 0x99	; 153
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	91 81       	ldd	r25, Z+1	; 0x01
    2d68:	8d 93       	st	X+, r24
    2d6a:	9c 93       	st	X, r25
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ed 59       	subi	r30, 0x9D	; 157
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <STEPPER_voidOn+0x1df4>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ed 59       	subi	r30, 0x9D	; 157
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	67 e0       	ldi	r22, 0x07	; 7
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	66 e0       	ldi	r22, 0x06	; 6
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	65 e0       	ldi	r22, 0x05	; 5
    2d9c:	40 e0       	ldi	r20, 0x00	; 0
    2d9e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	64 e0       	ldi	r22, 0x04	; 4
    2da6:	41 e0       	ldi	r20, 0x01	; 1
    2da8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    2dac:	fe 01       	movw	r30, r28
    2dae:	e9 5a       	subi	r30, 0xA9	; 169
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	80 81       	ld	r24, Z
    2db4:	88 2f       	mov	r24, r24
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	a0 e0       	ldi	r26, 0x00	; 0
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e1 5a       	subi	r30, 0xA1	; 161
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 83       	st	Z, r24
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	a2 83       	std	Z+2, r26	; 0x02
    2dd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd6:	8e 01       	movw	r16, r28
    2dd8:	05 5a       	subi	r16, 0xA5	; 165
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e1 5a       	subi	r30, 0xA1	; 161
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	4a e7       	ldi	r20, 0x7A	; 122
    2df0:	53 e4       	ldi	r21, 0x43	; 67
    2df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	80 83       	st	Z, r24
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	a2 83       	std	Z+2, r26	; 0x02
    2e02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e04:	fe 01       	movw	r30, r28
    2e06:	e5 5a       	subi	r30, 0xA5	; 165
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e8       	ldi	r20, 0x80	; 128
    2e18:	5f e3       	ldi	r21, 0x3F	; 63
    2e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e1e:	88 23       	and	r24, r24
    2e20:	44 f4       	brge	.+16     	; 0x2e32 <STEPPER_voidOn+0x1eb0>
		__ticks = 1;
    2e22:	fe 01       	movw	r30, r28
    2e24:	e7 5a       	subi	r30, 0xA7	; 167
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	80 83       	st	Z, r24
    2e30:	64 c0       	rjmp	.+200    	; 0x2efa <STEPPER_voidOn+0x1f78>
	else if (__tmp > 65535)
    2e32:	fe 01       	movw	r30, r28
    2e34:	e5 5a       	subi	r30, 0xA5	; 165
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	3f ef       	ldi	r19, 0xFF	; 255
    2e44:	4f e7       	ldi	r20, 0x7F	; 127
    2e46:	57 e4       	ldi	r21, 0x47	; 71
    2e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e4c:	18 16       	cp	r1, r24
    2e4e:	0c f0       	brlt	.+2      	; 0x2e52 <STEPPER_voidOn+0x1ed0>
    2e50:	43 c0       	rjmp	.+134    	; 0x2ed8 <STEPPER_voidOn+0x1f56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e52:	fe 01       	movw	r30, r28
    2e54:	e1 5a       	subi	r30, 0xA1	; 161
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	8e 01       	movw	r16, r28
    2e72:	07 5a       	subi	r16, 0xA7	; 167
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	f8 01       	movw	r30, r16
    2e84:	91 83       	std	Z+1, r25	; 0x01
    2e86:	80 83       	st	Z, r24
    2e88:	1f c0       	rjmp	.+62     	; 0x2ec8 <STEPPER_voidOn+0x1f46>
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e9 5a       	subi	r30, 0xA9	; 169
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	89 e1       	ldi	r24, 0x19	; 25
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	80 83       	st	Z, r24
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e9 5a       	subi	r30, 0xA9	; 169
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <STEPPER_voidOn+0x1f20>
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e9 5a       	subi	r30, 0xA9	; 169
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	91 83       	std	Z+1, r25	; 0x01
    2eae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	de 01       	movw	r26, r28
    2eb2:	a7 5a       	subi	r26, 0xA7	; 167
    2eb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e7 5a       	subi	r30, 0xA7	; 167
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 81       	ld	r24, Z
    2ebe:	91 81       	ldd	r25, Z+1	; 0x01
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	11 96       	adiw	r26, 0x01	; 1
    2ec4:	9c 93       	st	X, r25
    2ec6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e7 5a       	subi	r30, 0xA7	; 167
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	d1 f6       	brne	.-76     	; 0x2e8a <STEPPER_voidOn+0x1f08>
    2ed6:	27 c0       	rjmp	.+78     	; 0x2f26 <STEPPER_voidOn+0x1fa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	8e 01       	movw	r16, r28
    2eda:	07 5a       	subi	r16, 0xA7	; 167
    2edc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e5 5a       	subi	r30, 0xA5	; 165
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	de 01       	movw	r26, r28
    2efc:	ab 5a       	subi	r26, 0xAB	; 171
    2efe:	bf 4f       	sbci	r27, 0xFF	; 255
    2f00:	fe 01       	movw	r30, r28
    2f02:	e7 5a       	subi	r30, 0xA7	; 167
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 81       	ld	r24, Z
    2f08:	91 81       	ldd	r25, Z+1	; 0x01
    2f0a:	8d 93       	st	X+, r24
    2f0c:	9c 93       	st	X, r25
    2f0e:	fe 01       	movw	r30, r28
    2f10:	eb 5a       	subi	r30, 0xAB	; 171
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <STEPPER_voidOn+0x1f96>
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	eb 5a       	subi	r30, 0xAB	; 171
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	91 83       	std	Z+1, r25	; 0x01
    2f24:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	67 e0       	ldi	r22, 0x07	; 7
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	66 e0       	ldi	r22, 0x06	; 6
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_HIGH );
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	65 e0       	ldi	r22, 0x05	; 5
    2f3e:	41 e0       	ldi	r20, 0x01	; 1
    2f40:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_HIGH );
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	64 e0       	ldi	r22, 0x04	; 4
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e9 5a       	subi	r30, 0xA9	; 169
    2f52:	fe 4f       	sbci	r31, 0xFE	; 254
    2f54:	80 81       	ld	r24, Z
    2f56:	88 2f       	mov	r24, r24
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	a0 e0       	ldi	r26, 0x00	; 0
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ef 5a       	subi	r30, 0xAF	; 175
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 83       	st	Z, r24
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	a2 83       	std	Z+2, r26	; 0x02
    2f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f78:	8e 01       	movw	r16, r28
    2f7a:	03 5b       	subi	r16, 0xB3	; 179
    2f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ef 5a       	subi	r30, 0xAF	; 175
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	4a e7       	ldi	r20, 0x7A	; 122
    2f92:	53 e4       	ldi	r21, 0x43	; 67
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	80 83       	st	Z, r24
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	a2 83       	std	Z+2, r26	; 0x02
    2fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e3 5b       	subi	r30, 0xB3	; 179
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e8       	ldi	r20, 0x80	; 128
    2fba:	5f e3       	ldi	r21, 0x3F	; 63
    2fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	44 f4       	brge	.+16     	; 0x2fd4 <STEPPER_voidOn+0x2052>
		__ticks = 1;
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e5 5b       	subi	r30, 0xB5	; 181
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	64 c0       	rjmp	.+200    	; 0x309c <STEPPER_voidOn+0x211a>
	else if (__tmp > 65535)
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e3 5b       	subi	r30, 0xB3	; 179
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	0c f0       	brlt	.+2      	; 0x2ff4 <STEPPER_voidOn+0x2072>
    2ff2:	43 c0       	rjmp	.+134    	; 0x307a <STEPPER_voidOn+0x20f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ef 5a       	subi	r30, 0xAF	; 175
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e2       	ldi	r20, 0x20	; 32
    3008:	51 e4       	ldi	r21, 0x41	; 65
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	8e 01       	movw	r16, r28
    3014:	05 5b       	subi	r16, 0xB5	; 181
    3016:	1f 4f       	sbci	r17, 0xFF	; 255
    3018:	bc 01       	movw	r22, r24
    301a:	cd 01       	movw	r24, r26
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	f8 01       	movw	r30, r16
    3026:	91 83       	std	Z+1, r25	; 0x01
    3028:	80 83       	st	Z, r24
    302a:	1f c0       	rjmp	.+62     	; 0x306a <STEPPER_voidOn+0x20e8>
    302c:	fe 01       	movw	r30, r28
    302e:	e7 5b       	subi	r30, 0xB7	; 183
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	89 e1       	ldi	r24, 0x19	; 25
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
    303a:	fe 01       	movw	r30, r28
    303c:	e7 5b       	subi	r30, 0xB7	; 183
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	80 81       	ld	r24, Z
    3042:	91 81       	ldd	r25, Z+1	; 0x01
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <STEPPER_voidOn+0x20c2>
    3048:	fe 01       	movw	r30, r28
    304a:	e7 5b       	subi	r30, 0xB7	; 183
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	91 83       	std	Z+1, r25	; 0x01
    3050:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	de 01       	movw	r26, r28
    3054:	a5 5b       	subi	r26, 0xB5	; 181
    3056:	bf 4f       	sbci	r27, 0xFF	; 255
    3058:	fe 01       	movw	r30, r28
    305a:	e5 5b       	subi	r30, 0xB5	; 181
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	80 81       	ld	r24, Z
    3060:	91 81       	ldd	r25, Z+1	; 0x01
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	11 96       	adiw	r26, 0x01	; 1
    3066:	9c 93       	st	X, r25
    3068:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	fe 01       	movw	r30, r28
    306c:	e5 5b       	subi	r30, 0xB5	; 181
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	d1 f6       	brne	.-76     	; 0x302c <STEPPER_voidOn+0x20aa>
    3078:	27 c0       	rjmp	.+78     	; 0x30c8 <STEPPER_voidOn+0x2146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	8e 01       	movw	r16, r28
    307c:	05 5b       	subi	r16, 0xB5	; 181
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	fe 01       	movw	r30, r28
    3082:	e3 5b       	subi	r30, 0xB3	; 179
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	f8 01       	movw	r30, r16
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
    309c:	de 01       	movw	r26, r28
    309e:	a9 5b       	subi	r26, 0xB9	; 185
    30a0:	bf 4f       	sbci	r27, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	e5 5b       	subi	r30, 0xB5	; 181
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	8d 93       	st	X+, r24
    30ae:	9c 93       	st	X, r25
    30b0:	fe 01       	movw	r30, r28
    30b2:	e9 5b       	subi	r30, 0xB9	; 185
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <STEPPER_voidOn+0x2138>
    30be:	fe 01       	movw	r30, r28
    30c0:	e9 5b       	subi	r30, 0xB9	; 185
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	67 e0       	ldi	r22, 0x07	; 7
    30cc:	40 e0       	ldi	r20, 0x00	; 0
    30ce:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	66 e0       	ldi	r22, 0x06	; 6
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_HIGH );
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	65 e0       	ldi	r22, 0x05	; 5
    30e0:	41 e0       	ldi	r20, 0x01	; 1
    30e2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	64 e0       	ldi	r22, 0x04	; 4
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    30f0:	fe 01       	movw	r30, r28
    30f2:	e9 5a       	subi	r30, 0xA9	; 169
    30f4:	fe 4f       	sbci	r31, 0xFE	; 254
    30f6:	80 81       	ld	r24, Z
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a0 e0       	ldi	r26, 0x00	; 0
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	fe 01       	movw	r30, r28
    310e:	ed 5b       	subi	r30, 0xBD	; 189
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 83       	st	Z, r24
    3114:	91 83       	std	Z+1, r25	; 0x01
    3116:	a2 83       	std	Z+2, r26	; 0x02
    3118:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311a:	8e 01       	movw	r16, r28
    311c:	01 5c       	subi	r16, 0xC1	; 193
    311e:	1f 4f       	sbci	r17, 0xFF	; 255
    3120:	fe 01       	movw	r30, r28
    3122:	ed 5b       	subi	r30, 0xBD	; 189
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	60 81       	ld	r22, Z
    3128:	71 81       	ldd	r23, Z+1	; 0x01
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	93 81       	ldd	r25, Z+3	; 0x03
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	4a e7       	ldi	r20, 0x7A	; 122
    3134:	53 e4       	ldi	r21, 0x43	; 67
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	f8 01       	movw	r30, r16
    3140:	80 83       	st	Z, r24
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	a2 83       	std	Z+2, r26	; 0x02
    3146:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3148:	fe 01       	movw	r30, r28
    314a:	ff 96       	adiw	r30, 0x3f	; 63
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	2c f4       	brge	.+10     	; 0x316e <STEPPER_voidOn+0x21ec>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9e af       	std	Y+62, r25	; 0x3e
    316a:	8d af       	std	Y+61, r24	; 0x3d
    316c:	46 c0       	rjmp	.+140    	; 0x31fa <STEPPER_voidOn+0x2278>
	else if (__tmp > 65535)
    316e:	fe 01       	movw	r30, r28
    3170:	ff 96       	adiw	r30, 0x3f	; 63
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	3f ef       	ldi	r19, 0xFF	; 255
    317e:	4f e7       	ldi	r20, 0x7F	; 127
    3180:	57 e4       	ldi	r21, 0x47	; 71
    3182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3186:	18 16       	cp	r1, r24
    3188:	64 f5       	brge	.+88     	; 0x31e2 <STEPPER_voidOn+0x2260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318a:	fe 01       	movw	r30, r28
    318c:	ed 5b       	subi	r30, 0xBD	; 189
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	60 81       	ld	r22, Z
    3192:	71 81       	ldd	r23, Z+1	; 0x01
    3194:	82 81       	ldd	r24, Z+2	; 0x02
    3196:	93 81       	ldd	r25, Z+3	; 0x03
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e2       	ldi	r20, 0x20	; 32
    319e:	51 e4       	ldi	r21, 0x41	; 65
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9e af       	std	Y+62, r25	; 0x3e
    31b6:	8d af       	std	Y+61, r24	; 0x3d
    31b8:	0f c0       	rjmp	.+30     	; 0x31d8 <STEPPER_voidOn+0x2256>
    31ba:	89 e1       	ldi	r24, 0x19	; 25
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9c af       	std	Y+60, r25	; 0x3c
    31c0:	8b af       	std	Y+59, r24	; 0x3b
    31c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    31c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <STEPPER_voidOn+0x2244>
    31ca:	9c af       	std	Y+60, r25	; 0x3c
    31cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    31d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	9e af       	std	Y+62, r25	; 0x3e
    31d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    31da:	9e ad       	ldd	r25, Y+62	; 0x3e
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	69 f7       	brne	.-38     	; 0x31ba <STEPPER_voidOn+0x2238>
    31e0:	16 c0       	rjmp	.+44     	; 0x320e <STEPPER_voidOn+0x228c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e2:	fe 01       	movw	r30, r28
    31e4:	ff 96       	adiw	r30, 0x3f	; 63
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9e af       	std	Y+62, r25	; 0x3e
    31f8:	8d af       	std	Y+61, r24	; 0x3d
    31fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    31fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    31fe:	9a af       	std	Y+58, r25	; 0x3a
    3200:	89 af       	std	Y+57, r24	; 0x39
    3202:	89 ad       	ldd	r24, Y+57	; 0x39
    3204:	9a ad       	ldd	r25, Y+58	; 0x3a
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <STEPPER_voidOn+0x2284>
    320a:	9a af       	std	Y+58, r25	; 0x3a
    320c:	89 af       	std	Y+57, r24	; 0x39

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	67 e0       	ldi	r22, 0x07	; 7
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	66 e0       	ldi	r22, 0x06	; 6
    321c:	41 e0       	ldi	r20, 0x01	; 1
    321e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_HIGH );
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	65 e0       	ldi	r22, 0x05	; 5
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	64 e0       	ldi	r22, 0x04	; 4
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    3236:	fe 01       	movw	r30, r28
    3238:	e9 5a       	subi	r30, 0xA9	; 169
    323a:	fe 4f       	sbci	r31, 0xFE	; 254
    323c:	80 81       	ld	r24, Z
    323e:	88 2f       	mov	r24, r24
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a0 e0       	ldi	r26, 0x00	; 0
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	8d ab       	std	Y+53, r24	; 0x35
    3254:	9e ab       	std	Y+54, r25	; 0x36
    3256:	af ab       	std	Y+55, r26	; 0x37
    3258:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325a:	6d a9       	ldd	r22, Y+53	; 0x35
    325c:	7e a9       	ldd	r23, Y+54	; 0x36
    325e:	8f a9       	ldd	r24, Y+55	; 0x37
    3260:	98 ad       	ldd	r25, Y+56	; 0x38
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4a e7       	ldi	r20, 0x7A	; 122
    3268:	53 e4       	ldi	r21, 0x43	; 67
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	89 ab       	std	Y+49, r24	; 0x31
    3274:	9a ab       	std	Y+50, r25	; 0x32
    3276:	ab ab       	std	Y+51, r26	; 0x33
    3278:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    327a:	69 a9       	ldd	r22, Y+49	; 0x31
    327c:	7a a9       	ldd	r23, Y+50	; 0x32
    327e:	8b a9       	ldd	r24, Y+51	; 0x33
    3280:	9c a9       	ldd	r25, Y+52	; 0x34
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	2c f4       	brge	.+10     	; 0x329c <STEPPER_voidOn+0x231a>
		__ticks = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	98 ab       	std	Y+48, r25	; 0x30
    3298:	8f a7       	std	Y+47, r24	; 0x2f
    329a:	3f c0       	rjmp	.+126    	; 0x331a <STEPPER_voidOn+0x2398>
	else if (__tmp > 65535)
    329c:	69 a9       	ldd	r22, Y+49	; 0x31
    329e:	7a a9       	ldd	r23, Y+50	; 0x32
    32a0:	8b a9       	ldd	r24, Y+51	; 0x33
    32a2:	9c a9       	ldd	r25, Y+52	; 0x34
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	4c f5       	brge	.+82     	; 0x3306 <STEPPER_voidOn+0x2384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	6d a9       	ldd	r22, Y+53	; 0x35
    32b6:	7e a9       	ldd	r23, Y+54	; 0x36
    32b8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ba:	98 ad       	ldd	r25, Y+56	; 0x38
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	98 ab       	std	Y+48, r25	; 0x30
    32da:	8f a7       	std	Y+47, r24	; 0x2f
    32dc:	0f c0       	rjmp	.+30     	; 0x32fc <STEPPER_voidOn+0x237a>
    32de:	89 e1       	ldi	r24, 0x19	; 25
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	9e a7       	std	Y+46, r25	; 0x2e
    32e4:	8d a7       	std	Y+45, r24	; 0x2d
    32e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    32e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <STEPPER_voidOn+0x2368>
    32ee:	9e a7       	std	Y+46, r25	; 0x2e
    32f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f4:	98 a9       	ldd	r25, Y+48	; 0x30
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	98 ab       	std	Y+48, r25	; 0x30
    32fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	69 f7       	brne	.-38     	; 0x32de <STEPPER_voidOn+0x235c>
    3304:	14 c0       	rjmp	.+40     	; 0x332e <STEPPER_voidOn+0x23ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3306:	69 a9       	ldd	r22, Y+49	; 0x31
    3308:	7a a9       	ldd	r23, Y+50	; 0x32
    330a:	8b a9       	ldd	r24, Y+51	; 0x33
    330c:	9c a9       	ldd	r25, Y+52	; 0x34
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	98 ab       	std	Y+48, r25	; 0x30
    3318:	8f a7       	std	Y+47, r24	; 0x2f
    331a:	8f a5       	ldd	r24, Y+47	; 0x2f
    331c:	98 a9       	ldd	r25, Y+48	; 0x30
    331e:	9c a7       	std	Y+44, r25	; 0x2c
    3320:	8b a7       	std	Y+43, r24	; 0x2b
    3322:	8b a5       	ldd	r24, Y+43	; 0x2b
    3324:	9c a5       	ldd	r25, Y+44	; 0x2c
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <STEPPER_voidOn+0x23a4>
    332a:	9c a7       	std	Y+44, r25	; 0x2c
    332c:	8b a7       	std	Y+43, r24	; 0x2b

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_LOW  );
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	67 e0       	ldi	r22, 0x07	; 7
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	66 e0       	ldi	r22, 0x06	; 6
    333c:	41 e0       	ldi	r20, 0x01	; 1
    333e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	65 e0       	ldi	r22, 0x05	; 5
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	64 e0       	ldi	r22, 0x04	; 4
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    3356:	fe 01       	movw	r30, r28
    3358:	e9 5a       	subi	r30, 0xA9	; 169
    335a:	fe 4f       	sbci	r31, 0xFE	; 254
    335c:	80 81       	ld	r24, Z
    335e:	88 2f       	mov	r24, r24
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	a0 e0       	ldi	r26, 0x00	; 0
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	8f a3       	std	Y+39, r24	; 0x27
    3374:	98 a7       	std	Y+40, r25	; 0x28
    3376:	a9 a7       	std	Y+41, r26	; 0x29
    3378:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337a:	6f a1       	ldd	r22, Y+39	; 0x27
    337c:	78 a5       	ldd	r23, Y+40	; 0x28
    337e:	89 a5       	ldd	r24, Y+41	; 0x29
    3380:	9a a5       	ldd	r25, Y+42	; 0x2a
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a e7       	ldi	r20, 0x7A	; 122
    3388:	53 e4       	ldi	r21, 0x43	; 67
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	8b a3       	std	Y+35, r24	; 0x23
    3394:	9c a3       	std	Y+36, r25	; 0x24
    3396:	ad a3       	std	Y+37, r26	; 0x25
    3398:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    339a:	6b a1       	ldd	r22, Y+35	; 0x23
    339c:	7c a1       	ldd	r23, Y+36	; 0x24
    339e:	8d a1       	ldd	r24, Y+37	; 0x25
    33a0:	9e a1       	ldd	r25, Y+38	; 0x26
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ae:	88 23       	and	r24, r24
    33b0:	2c f4       	brge	.+10     	; 0x33bc <STEPPER_voidOn+0x243a>
		__ticks = 1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9a a3       	std	Y+34, r25	; 0x22
    33b8:	89 a3       	std	Y+33, r24	; 0x21
    33ba:	3f c0       	rjmp	.+126    	; 0x343a <STEPPER_voidOn+0x24b8>
	else if (__tmp > 65535)
    33bc:	6b a1       	ldd	r22, Y+35	; 0x23
    33be:	7c a1       	ldd	r23, Y+36	; 0x24
    33c0:	8d a1       	ldd	r24, Y+37	; 0x25
    33c2:	9e a1       	ldd	r25, Y+38	; 0x26
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	4c f5       	brge	.+82     	; 0x3426 <STEPPER_voidOn+0x24a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d4:	6f a1       	ldd	r22, Y+39	; 0x27
    33d6:	78 a5       	ldd	r23, Y+40	; 0x28
    33d8:	89 a5       	ldd	r24, Y+41	; 0x29
    33da:	9a a5       	ldd	r25, Y+42	; 0x2a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9a a3       	std	Y+34, r25	; 0x22
    33fa:	89 a3       	std	Y+33, r24	; 0x21
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <STEPPER_voidOn+0x249a>
    33fe:	89 e1       	ldi	r24, 0x19	; 25
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	98 a3       	std	Y+32, r25	; 0x20
    3404:	8f 8f       	std	Y+31, r24	; 0x1f
    3406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3408:	98 a1       	ldd	r25, Y+32	; 0x20
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <STEPPER_voidOn+0x2488>
    340e:	98 a3       	std	Y+32, r25	; 0x20
    3410:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	89 a1       	ldd	r24, Y+33	; 0x21
    3414:	9a a1       	ldd	r25, Y+34	; 0x22
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9a a3       	std	Y+34, r25	; 0x22
    341a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341c:	89 a1       	ldd	r24, Y+33	; 0x21
    341e:	9a a1       	ldd	r25, Y+34	; 0x22
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	69 f7       	brne	.-38     	; 0x33fe <STEPPER_voidOn+0x247c>
    3424:	14 c0       	rjmp	.+40     	; 0x344e <STEPPER_voidOn+0x24cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	6b a1       	ldd	r22, Y+35	; 0x23
    3428:	7c a1       	ldd	r23, Y+36	; 0x24
    342a:	8d a1       	ldd	r24, Y+37	; 0x25
    342c:	9e a1       	ldd	r25, Y+38	; 0x26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9a a3       	std	Y+34, r25	; 0x22
    3438:	89 a3       	std	Y+33, r24	; 0x21
    343a:	89 a1       	ldd	r24, Y+33	; 0x21
    343c:	9a a1       	ldd	r25, Y+34	; 0x22
    343e:	9e 8f       	std	Y+30, r25	; 0x1e
    3440:	8d 8f       	std	Y+29, r24	; 0x1d
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <STEPPER_voidOn+0x24c4>
    344a:	9e 8f       	std	Y+30, r25	; 0x1e
    344c:	8d 8f       	std	Y+29, r24	; 0x1d

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	67 e0       	ldi	r22, 0x07	; 7
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_HIGH );
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	66 e0       	ldi	r22, 0x06	; 6
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	65 e0       	ldi	r22, 0x05	; 5
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	64 e0       	ldi	r22, 0x04	; 4
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    3476:	fe 01       	movw	r30, r28
    3478:	e9 5a       	subi	r30, 0xA9	; 169
    347a:	fe 4f       	sbci	r31, 0xFE	; 254
    347c:	80 81       	ld	r24, Z
    347e:	88 2f       	mov	r24, r24
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	a0 e0       	ldi	r26, 0x00	; 0
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	89 8f       	std	Y+25, r24	; 0x19
    3494:	9a 8f       	std	Y+26, r25	; 0x1a
    3496:	ab 8f       	std	Y+27, r26	; 0x1b
    3498:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349a:	69 8d       	ldd	r22, Y+25	; 0x19
    349c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    349e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	4a e7       	ldi	r20, 0x7A	; 122
    34a8:	53 e4       	ldi	r21, 0x43	; 67
    34aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	8d 8b       	std	Y+21, r24	; 0x15
    34b4:	9e 8b       	std	Y+22, r25	; 0x16
    34b6:	af 8b       	std	Y+23, r26	; 0x17
    34b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ba:	6d 89       	ldd	r22, Y+21	; 0x15
    34bc:	7e 89       	ldd	r23, Y+22	; 0x16
    34be:	8f 89       	ldd	r24, Y+23	; 0x17
    34c0:	98 8d       	ldd	r25, Y+24	; 0x18
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e8       	ldi	r20, 0x80	; 128
    34c8:	5f e3       	ldi	r21, 0x3F	; 63
    34ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ce:	88 23       	and	r24, r24
    34d0:	2c f4       	brge	.+10     	; 0x34dc <STEPPER_voidOn+0x255a>
		__ticks = 1;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	9c 8b       	std	Y+20, r25	; 0x14
    34d8:	8b 8b       	std	Y+19, r24	; 0x13
    34da:	3f c0       	rjmp	.+126    	; 0x355a <STEPPER_voidOn+0x25d8>
	else if (__tmp > 65535)
    34dc:	6d 89       	ldd	r22, Y+21	; 0x15
    34de:	7e 89       	ldd	r23, Y+22	; 0x16
    34e0:	8f 89       	ldd	r24, Y+23	; 0x17
    34e2:	98 8d       	ldd	r25, Y+24	; 0x18
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	3f ef       	ldi	r19, 0xFF	; 255
    34e8:	4f e7       	ldi	r20, 0x7F	; 127
    34ea:	57 e4       	ldi	r21, 0x47	; 71
    34ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34f0:	18 16       	cp	r1, r24
    34f2:	4c f5       	brge	.+82     	; 0x3546 <STEPPER_voidOn+0x25c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f4:	69 8d       	ldd	r22, Y+25	; 0x19
    34f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e2       	ldi	r20, 0x20	; 32
    3502:	51 e4       	ldi	r21, 0x41	; 65
    3504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	bc 01       	movw	r22, r24
    350e:	cd 01       	movw	r24, r26
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9c 8b       	std	Y+20, r25	; 0x14
    351a:	8b 8b       	std	Y+19, r24	; 0x13
    351c:	0f c0       	rjmp	.+30     	; 0x353c <STEPPER_voidOn+0x25ba>
    351e:	89 e1       	ldi	r24, 0x19	; 25
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9a 8b       	std	Y+18, r25	; 0x12
    3524:	89 8b       	std	Y+17, r24	; 0x11
    3526:	89 89       	ldd	r24, Y+17	; 0x11
    3528:	9a 89       	ldd	r25, Y+18	; 0x12
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <STEPPER_voidOn+0x25a8>
    352e:	9a 8b       	std	Y+18, r25	; 0x12
    3530:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3532:	8b 89       	ldd	r24, Y+19	; 0x13
    3534:	9c 89       	ldd	r25, Y+20	; 0x14
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	9c 8b       	std	Y+20, r25	; 0x14
    353a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353c:	8b 89       	ldd	r24, Y+19	; 0x13
    353e:	9c 89       	ldd	r25, Y+20	; 0x14
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	69 f7       	brne	.-38     	; 0x351e <STEPPER_voidOn+0x259c>
    3544:	14 c0       	rjmp	.+40     	; 0x356e <STEPPER_voidOn+0x25ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3546:	6d 89       	ldd	r22, Y+21	; 0x15
    3548:	7e 89       	ldd	r23, Y+22	; 0x16
    354a:	8f 89       	ldd	r24, Y+23	; 0x17
    354c:	98 8d       	ldd	r25, Y+24	; 0x18
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9c 8b       	std	Y+20, r25	; 0x14
    3558:	8b 8b       	std	Y+19, r24	; 0x13
    355a:	8b 89       	ldd	r24, Y+19	; 0x13
    355c:	9c 89       	ldd	r25, Y+20	; 0x14
    355e:	98 8b       	std	Y+16, r25	; 0x10
    3560:	8f 87       	std	Y+15, r24	; 0x0f
    3562:	8f 85       	ldd	r24, Y+15	; 0x0f
    3564:	98 89       	ldd	r25, Y+16	; 0x10
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	f1 f7       	brne	.-4      	; 0x3566 <STEPPER_voidOn+0x25e4>
    356a:	98 8b       	std	Y+16, r25	; 0x10
    356c:	8f 87       	std	Y+15, r24	; 0x0f

				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN0 , DIO_PIN_HIGH );
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	67 e0       	ldi	r22, 0x07	; 7
    3572:	41 e0       	ldi	r20, 0x01	; 1
    3574:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN1 , DIO_PIN_LOW  );
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	66 e0       	ldi	r22, 0x06	; 6
    357c:	40 e0       	ldi	r20, 0x00	; 0
    357e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN2 , DIO_PIN_LOW  );
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	65 e0       	ldi	r22, 0x05	; 5
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				DIO_enumSetPinValue( STEPPER_PORT , STEPPER_PIN3 , DIO_PIN_LOW  );
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	64 e0       	ldi	r22, 0x04	; 4
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
				_delay_ms( Speed );
    3596:	fe 01       	movw	r30, r28
    3598:	e9 5a       	subi	r30, 0xA9	; 169
    359a:	fe 4f       	sbci	r31, 0xFE	; 254
    359c:	80 81       	ld	r24, Z
    359e:	88 2f       	mov	r24, r24
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	a0 e0       	ldi	r26, 0x00	; 0
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	bc 01       	movw	r22, r24
    35a8:	cd 01       	movw	r24, r26
    35aa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	8b 87       	std	Y+11, r24	; 0x0b
    35b4:	9c 87       	std	Y+12, r25	; 0x0c
    35b6:	ad 87       	std	Y+13, r26	; 0x0d
    35b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    35bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35be:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	4a e7       	ldi	r20, 0x7A	; 122
    35c8:	53 e4       	ldi	r21, 0x43	; 67
    35ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	8f 83       	std	Y+7, r24	; 0x07
    35d4:	98 87       	std	Y+8, r25	; 0x08
    35d6:	a9 87       	std	Y+9, r26	; 0x09
    35d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35da:	6f 81       	ldd	r22, Y+7	; 0x07
    35dc:	78 85       	ldd	r23, Y+8	; 0x08
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e8       	ldi	r20, 0x80	; 128
    35e8:	5f e3       	ldi	r21, 0x3F	; 63
    35ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ee:	88 23       	and	r24, r24
    35f0:	2c f4       	brge	.+10     	; 0x35fc <STEPPER_voidOn+0x267a>
		__ticks = 1;
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	3f c0       	rjmp	.+126    	; 0x367a <STEPPER_voidOn+0x26f8>
	else if (__tmp > 65535)
    35fc:	6f 81       	ldd	r22, Y+7	; 0x07
    35fe:	78 85       	ldd	r23, Y+8	; 0x08
    3600:	89 85       	ldd	r24, Y+9	; 0x09
    3602:	9a 85       	ldd	r25, Y+10	; 0x0a
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	3f ef       	ldi	r19, 0xFF	; 255
    3608:	4f e7       	ldi	r20, 0x7F	; 127
    360a:	57 e4       	ldi	r21, 0x47	; 71
    360c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3610:	18 16       	cp	r1, r24
    3612:	4c f5       	brge	.+82     	; 0x3666 <STEPPER_voidOn+0x26e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3614:	6b 85       	ldd	r22, Y+11	; 0x0b
    3616:	7c 85       	ldd	r23, Y+12	; 0x0c
    3618:	8d 85       	ldd	r24, Y+13	; 0x0d
    361a:	9e 85       	ldd	r25, Y+14	; 0x0e
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e2       	ldi	r20, 0x20	; 32
    3622:	51 e4       	ldi	r21, 0x41	; 65
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	bc 01       	movw	r22, r24
    362e:	cd 01       	movw	r24, r26
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	0f c0       	rjmp	.+30     	; 0x365c <STEPPER_voidOn+0x26da>
    363e:	89 e1       	ldi	r24, 0x19	; 25
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9c 83       	std	Y+4, r25	; 0x04
    3644:	8b 83       	std	Y+3, r24	; 0x03
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	9c 81       	ldd	r25, Y+4	; 0x04
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <STEPPER_voidOn+0x26c8>
    364e:	9c 83       	std	Y+4, r25	; 0x04
    3650:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	69 f7       	brne	.-38     	; 0x363e <STEPPER_voidOn+0x26bc>
    3664:	14 c0       	rjmp	.+40     	; 0x368e <STEPPER_voidOn+0x270c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3666:	6f 81       	ldd	r22, Y+7	; 0x07
    3668:	78 85       	ldd	r23, Y+8	; 0x08
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	9a 83       	std	Y+2, r25	; 0x02
    3680:	89 83       	std	Y+1, r24	; 0x01
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <STEPPER_voidOn+0x2704>
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
			}

		}else if( Direction == STEPPER_ANTI_CLOCK_WISE ){


			for( LOC_u16Iterator = 0 ; LOC_u16Iterator < ( ( (u32)Degree * 512 ) / 45 ) / 8 ; LOC_u16Iterator++  ){
    368e:	9e 01       	movw	r18, r28
    3690:	2f 5a       	subi	r18, 0xAF	; 175
    3692:	3e 4f       	sbci	r19, 0xFE	; 254
    3694:	fe 01       	movw	r30, r28
    3696:	ef 5a       	subi	r30, 0xAF	; 175
    3698:	fe 4f       	sbci	r31, 0xFE	; 254
    369a:	80 81       	ld	r24, Z
    369c:	91 81       	ldd	r25, Z+1	; 0x01
    369e:	a2 81       	ldd	r26, Z+2	; 0x02
    36a0:	b3 81       	ldd	r27, Z+3	; 0x03
    36a2:	01 96       	adiw	r24, 0x01	; 1
    36a4:	a1 1d       	adc	r26, r1
    36a6:	b1 1d       	adc	r27, r1
    36a8:	f9 01       	movw	r30, r18
    36aa:	80 83       	st	Z, r24
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	a2 83       	std	Z+2, r26	; 0x02
    36b0:	b3 83       	std	Z+3, r27	; 0x03
    36b2:	fe 01       	movw	r30, r28
    36b4:	e8 5a       	subi	r30, 0xA8	; 168
    36b6:	fe 4f       	sbci	r31, 0xFE	; 254
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	cc 01       	movw	r24, r24
    36be:	a0 e0       	ldi	r26, 0x00	; 0
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	07 2e       	mov	r0, r23
    36c4:	79 e0       	ldi	r23, 0x09	; 9
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	aa 1f       	adc	r26, r26
    36cc:	bb 1f       	adc	r27, r27
    36ce:	7a 95       	dec	r23
    36d0:	d1 f7       	brne	.-12     	; 0x36c6 <STEPPER_voidOn+0x2744>
    36d2:	70 2d       	mov	r23, r0
    36d4:	28 e6       	ldi	r18, 0x68	; 104
    36d6:	31 e0       	ldi	r19, 0x01	; 1
    36d8:	40 e0       	ldi	r20, 0x00	; 0
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	bc 01       	movw	r22, r24
    36de:	cd 01       	movw	r24, r26
    36e0:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__udivmodsi4>
    36e4:	da 01       	movw	r26, r20
    36e6:	c9 01       	movw	r24, r18
    36e8:	9c 01       	movw	r18, r24
    36ea:	ad 01       	movw	r20, r26
    36ec:	fe 01       	movw	r30, r28
    36ee:	ef 5a       	subi	r30, 0xAF	; 175
    36f0:	fe 4f       	sbci	r31, 0xFE	; 254
    36f2:	80 81       	ld	r24, Z
    36f4:	91 81       	ldd	r25, Z+1	; 0x01
    36f6:	a2 81       	ldd	r26, Z+2	; 0x02
    36f8:	b3 81       	ldd	r27, Z+3	; 0x03
    36fa:	82 17       	cp	r24, r18
    36fc:	93 07       	cpc	r25, r19
    36fe:	a4 07       	cpc	r26, r20
    3700:	b5 07       	cpc	r27, r21
    3702:	08 f4       	brcc	.+2      	; 0x3706 <STEPPER_voidOn+0x2784>
    3704:	6e ca       	rjmp	.-2852   	; 0x2be2 <STEPPER_voidOn+0x1c60>

		}

	}

}
    3706:	c7 5a       	subi	r28, 0xA7	; 167
    3708:	de 4f       	sbci	r29, 0xFE	; 254
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	08 95       	ret

0000371e <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

void KPD_voidInit(void)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
	/* ROWS -> INT_PULLUP */
	DIO_enumSetPinDirection(KPD_PORT, KPD_R0, DIO_PIN_INPUT);
    3726:	82 e0       	ldi	r24, 0x02	; 2
    3728:	60 e0       	ldi	r22, 0x00	; 0
    372a:	40 e0       	ldi	r20, 0x00	; 0
    372c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    3730:	82 e0       	ldi	r24, 0x02	; 2
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R1, DIO_PIN_INPUT);
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	61 e0       	ldi	r22, 0x01	; 1
    3748:	41 e0       	ldi	r20, 0x01	; 1
    374a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R2, DIO_PIN_INPUT);
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	62 e0       	ldi	r22, 0x02	; 2
    3752:	40 e0       	ldi	r20, 0x00	; 0
    3754:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    3758:	82 e0       	ldi	r24, 0x02	; 2
    375a:	62 e0       	ldi	r22, 0x02	; 2
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R3, DIO_PIN_INPUT);
    3762:	82 e0       	ldi	r24, 0x02	; 2
    3764:	63 e0       	ldi	r22, 0x03	; 3
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    376c:	82 e0       	ldi	r24, 0x02	; 2
    376e:	63 e0       	ldi	r22, 0x03	; 3
    3770:	41 e0       	ldi	r20, 0x01	; 1
    3772:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	/* COLS -> OUTPUT, HIGH */
	DIO_enumSetPinDirection(KPD_PORT, KPD_C0, DIO_PIN_OUTPUT);
    3776:	82 e0       	ldi	r24, 0x02	; 2
    3778:	64 e0       	ldi	r22, 0x04	; 4
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	64 e0       	ldi	r22, 0x04	; 4
    3784:	41 e0       	ldi	r20, 0x01	; 1
    3786:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C1, DIO_PIN_OUTPUT);
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	65 e0       	ldi	r22, 0x05	; 5
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    3794:	82 e0       	ldi	r24, 0x02	; 2
    3796:	65 e0       	ldi	r22, 0x05	; 5
    3798:	41 e0       	ldi	r20, 0x01	; 1
    379a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C2, DIO_PIN_OUTPUT);
    379e:	82 e0       	ldi	r24, 0x02	; 2
    37a0:	66 e0       	ldi	r22, 0x06	; 6
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	66 e0       	ldi	r22, 0x06	; 6
    37ac:	41 e0       	ldi	r20, 0x01	; 1
    37ae:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C3, DIO_PIN_OUTPUT);
    37b2:	82 e0       	ldi	r24, 0x02	; 2
    37b4:	67 e0       	ldi	r22, 0x07	; 7
    37b6:	41 e0       	ldi	r20, 0x01	; 1
    37b8:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	67 e0       	ldi	r22, 0x07	; 7
    37c0:	41 e0       	ldi	r20, 0x01	; 1
    37c2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	
	
	
}
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <KPD_u8GetPressed>:

u8 KPD_u8GetPressed(void)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	a0 97       	sbiw	r28, 0x20	; 32
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8RetVal = NOT_PRESSED;
    37e0:	8f ef       	ldi	r24, 0xFF	; 255
    37e2:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
    37e4:	84 e0       	ldi	r24, 0x04	; 4
    37e6:	8d 8f       	std	Y+29, r24	; 0x1d
    37e8:	27 c1       	rjmp	.+590    	; 0x3a38 <KPD_u8GetPressed+0x26c>
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
    37ea:	82 e0       	ldi	r24, 0x02	; 2
    37ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    37ee:	40 e0       	ldi	r20, 0x00	; 0
    37f0:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
    37f4:	1e 8e       	std	Y+30, r1	; 0x1e
    37f6:	14 c1       	rjmp	.+552    	; 0x3a20 <KPD_u8GetPressed+0x254>
		{
			DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
    37f8:	9e 01       	movw	r18, r28
    37fa:	20 5e       	subi	r18, 0xE0	; 224
    37fc:	3f 4f       	sbci	r19, 0xFF	; 255
    37fe:	82 e0       	ldi	r24, 0x02	; 2
    3800:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3802:	a9 01       	movw	r20, r18
    3804:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_enumGetPinValue>
			
			if(LOC_u8GetPressed == 0)
    3808:	88 a1       	ldd	r24, Y+32	; 0x20
    380a:	88 23       	and	r24, r24
    380c:	09 f0       	breq	.+2      	; 0x3810 <KPD_u8GetPressed+0x44>
    380e:	05 c1       	rjmp	.+522    	; 0x3a1a <KPD_u8GetPressed+0x24e>
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	a8 e4       	ldi	r26, 0x48	; 72
    3816:	b2 e4       	ldi	r27, 0x42	; 66
    3818:	89 8f       	std	Y+25, r24	; 0x19
    381a:	9a 8f       	std	Y+26, r25	; 0x1a
    381c:	ab 8f       	std	Y+27, r26	; 0x1b
    381e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3820:	69 8d       	ldd	r22, Y+25	; 0x19
    3822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	4a e7       	ldi	r20, 0x7A	; 122
    382e:	53 e4       	ldi	r21, 0x43	; 67
    3830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	8d 8b       	std	Y+21, r24	; 0x15
    383a:	9e 8b       	std	Y+22, r25	; 0x16
    383c:	af 8b       	std	Y+23, r26	; 0x17
    383e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3840:	6d 89       	ldd	r22, Y+21	; 0x15
    3842:	7e 89       	ldd	r23, Y+22	; 0x16
    3844:	8f 89       	ldd	r24, Y+23	; 0x17
    3846:	98 8d       	ldd	r25, Y+24	; 0x18
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e8       	ldi	r20, 0x80	; 128
    384e:	5f e3       	ldi	r21, 0x3F	; 63
    3850:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3854:	88 23       	and	r24, r24
    3856:	2c f4       	brge	.+10     	; 0x3862 <KPD_u8GetPressed+0x96>
		__ticks = 1;
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	9c 8b       	std	Y+20, r25	; 0x14
    385e:	8b 8b       	std	Y+19, r24	; 0x13
    3860:	3f c0       	rjmp	.+126    	; 0x38e0 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    3862:	6d 89       	ldd	r22, Y+21	; 0x15
    3864:	7e 89       	ldd	r23, Y+22	; 0x16
    3866:	8f 89       	ldd	r24, Y+23	; 0x17
    3868:	98 8d       	ldd	r25, Y+24	; 0x18
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	3f ef       	ldi	r19, 0xFF	; 255
    386e:	4f e7       	ldi	r20, 0x7F	; 127
    3870:	57 e4       	ldi	r21, 0x47	; 71
    3872:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3876:	18 16       	cp	r1, r24
    3878:	4c f5       	brge	.+82     	; 0x38cc <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387a:	69 8d       	ldd	r22, Y+25	; 0x19
    387c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    387e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e2       	ldi	r20, 0x20	; 32
    3888:	51 e4       	ldi	r21, 0x41	; 65
    388a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9c 8b       	std	Y+20, r25	; 0x14
    38a0:	8b 8b       	std	Y+19, r24	; 0x13
    38a2:	0f c0       	rjmp	.+30     	; 0x38c2 <KPD_u8GetPressed+0xf6>
    38a4:	89 e1       	ldi	r24, 0x19	; 25
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9a 8b       	std	Y+18, r25	; 0x12
    38aa:	89 8b       	std	Y+17, r24	; 0x11
    38ac:	89 89       	ldd	r24, Y+17	; 0x11
    38ae:	9a 89       	ldd	r25, Y+18	; 0x12
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <KPD_u8GetPressed+0xe4>
    38b4:	9a 8b       	std	Y+18, r25	; 0x12
    38b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ba:	9c 89       	ldd	r25, Y+20	; 0x14
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	9c 8b       	std	Y+20, r25	; 0x14
    38c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c2:	8b 89       	ldd	r24, Y+19	; 0x13
    38c4:	9c 89       	ldd	r25, Y+20	; 0x14
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	69 f7       	brne	.-38     	; 0x38a4 <KPD_u8GetPressed+0xd8>
    38ca:	14 c0       	rjmp	.+40     	; 0x38f4 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38cc:	6d 89       	ldd	r22, Y+21	; 0x15
    38ce:	7e 89       	ldd	r23, Y+22	; 0x16
    38d0:	8f 89       	ldd	r24, Y+23	; 0x17
    38d2:	98 8d       	ldd	r25, Y+24	; 0x18
    38d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	9c 8b       	std	Y+20, r25	; 0x14
    38de:	8b 8b       	std	Y+19, r24	; 0x13
    38e0:	8b 89       	ldd	r24, Y+19	; 0x13
    38e2:	9c 89       	ldd	r25, Y+20	; 0x14
    38e4:	98 8b       	std	Y+16, r25	; 0x10
    38e6:	8f 87       	std	Y+15, r24	; 0x0f
    38e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ea:	98 89       	ldd	r25, Y+16	; 0x10
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	f1 f7       	brne	.-4      	; 0x38ec <KPD_u8GetPressed+0x120>
    38f0:	98 8b       	std	Y+16, r25	; 0x10
    38f2:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50); // bouncing
				DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
    38f4:	9e 01       	movw	r18, r28
    38f6:	20 5e       	subi	r18, 0xE0	; 224
    38f8:	3f 4f       	sbci	r19, 0xFF	; 255
    38fa:	82 e0       	ldi	r24, 0x02	; 2
    38fc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    38fe:	a9 01       	movw	r20, r18
    3900:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_enumGetPinValue>
				
				if(LOC_u8GetPressed == 0)
    3904:	88 a1       	ldd	r24, Y+32	; 0x20
    3906:	88 23       	and	r24, r24
    3908:	a9 f4       	brne	.+42     	; 0x3934 <KPD_u8GetPressed+0x168>
				{
					LOC_u8RetVal = KPD_u8Buttons[LOC_u8ROW_Iterator - KPD_ROW_INIT][LOC_u8COL_Iterator - KPD_COL_INIT];
    390a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    390c:	48 2f       	mov	r20, r24
    390e:	50 e0       	ldi	r21, 0x00	; 0
    3910:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3912:	88 2f       	mov	r24, r24
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9c 01       	movw	r18, r24
    3918:	24 50       	subi	r18, 0x04	; 4
    391a:	30 40       	sbci	r19, 0x00	; 0
    391c:	ca 01       	movw	r24, r20
    391e:	88 0f       	add	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	88 0f       	add	r24, r24
    3924:	99 1f       	adc	r25, r25
    3926:	82 0f       	add	r24, r18
    3928:	93 1f       	adc	r25, r19
    392a:	fc 01       	movw	r30, r24
    392c:	e8 59       	subi	r30, 0x98	; 152
    392e:	fe 4f       	sbci	r31, 0xFE	; 254
    3930:	80 81       	ld	r24, Z
    3932:	8f 8f       	std	Y+31, r24	; 0x1f
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a8 e4       	ldi	r26, 0x48	; 72
    393a:	b3 e4       	ldi	r27, 0x43	; 67
    393c:	8b 87       	std	Y+11, r24	; 0x0b
    393e:	9c 87       	std	Y+12, r25	; 0x0c
    3940:	ad 87       	std	Y+13, r26	; 0x0d
    3942:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3944:	6b 85       	ldd	r22, Y+11	; 0x0b
    3946:	7c 85       	ldd	r23, Y+12	; 0x0c
    3948:	8d 85       	ldd	r24, Y+13	; 0x0d
    394a:	9e 85       	ldd	r25, Y+14	; 0x0e
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	4a e7       	ldi	r20, 0x7A	; 122
    3952:	53 e4       	ldi	r21, 0x43	; 67
    3954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	8f 83       	std	Y+7, r24	; 0x07
    395e:	98 87       	std	Y+8, r25	; 0x08
    3960:	a9 87       	std	Y+9, r26	; 0x09
    3962:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3964:	6f 81       	ldd	r22, Y+7	; 0x07
    3966:	78 85       	ldd	r23, Y+8	; 0x08
    3968:	89 85       	ldd	r24, Y+9	; 0x09
    396a:	9a 85       	ldd	r25, Y+10	; 0x0a
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e8       	ldi	r20, 0x80	; 128
    3972:	5f e3       	ldi	r21, 0x3F	; 63
    3974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3978:	88 23       	and	r24, r24
    397a:	2c f4       	brge	.+10     	; 0x3986 <KPD_u8GetPressed+0x1ba>
		__ticks = 1;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	9e 83       	std	Y+6, r25	; 0x06
    3982:	8d 83       	std	Y+5, r24	; 0x05
    3984:	3f c0       	rjmp	.+126    	; 0x3a04 <KPD_u8GetPressed+0x238>
	else if (__tmp > 65535)
    3986:	6f 81       	ldd	r22, Y+7	; 0x07
    3988:	78 85       	ldd	r23, Y+8	; 0x08
    398a:	89 85       	ldd	r24, Y+9	; 0x09
    398c:	9a 85       	ldd	r25, Y+10	; 0x0a
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	3f ef       	ldi	r19, 0xFF	; 255
    3992:	4f e7       	ldi	r20, 0x7F	; 127
    3994:	57 e4       	ldi	r21, 0x47	; 71
    3996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    399a:	18 16       	cp	r1, r24
    399c:	4c f5       	brge	.+82     	; 0x39f0 <KPD_u8GetPressed+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399e:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e2       	ldi	r20, 0x20	; 32
    39ac:	51 e4       	ldi	r21, 0x41	; 65
    39ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	bc 01       	movw	r22, r24
    39b8:	cd 01       	movw	r24, r26
    39ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	9e 83       	std	Y+6, r25	; 0x06
    39c4:	8d 83       	std	Y+5, r24	; 0x05
    39c6:	0f c0       	rjmp	.+30     	; 0x39e6 <KPD_u8GetPressed+0x21a>
    39c8:	89 e1       	ldi	r24, 0x19	; 25
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	9c 83       	std	Y+4, r25	; 0x04
    39ce:	8b 83       	std	Y+3, r24	; 0x03
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	9c 81       	ldd	r25, Y+4	; 0x04
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <KPD_u8GetPressed+0x208>
    39d8:	9c 83       	std	Y+4, r25	; 0x04
    39da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39dc:	8d 81       	ldd	r24, Y+5	; 0x05
    39de:	9e 81       	ldd	r25, Y+6	; 0x06
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e6:	8d 81       	ldd	r24, Y+5	; 0x05
    39e8:	9e 81       	ldd	r25, Y+6	; 0x06
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	69 f7       	brne	.-38     	; 0x39c8 <KPD_u8GetPressed+0x1fc>
    39ee:	1c c0       	rjmp	.+56     	; 0x3a28 <KPD_u8GetPressed+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f0:	6f 81       	ldd	r22, Y+7	; 0x07
    39f2:	78 85       	ldd	r23, Y+8	; 0x08
    39f4:	89 85       	ldd	r24, Y+9	; 0x09
    39f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	9e 83       	std	Y+6, r25	; 0x06
    3a02:	8d 83       	std	Y+5, r24	; 0x05
    3a04:	8d 81       	ldd	r24, Y+5	; 0x05
    3a06:	9e 81       	ldd	r25, Y+6	; 0x06
    3a08:	9a 83       	std	Y+2, r25	; 0x02
    3a0a:	89 83       	std	Y+1, r24	; 0x01
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <KPD_u8GetPressed+0x244>
    3a14:	9a 83       	std	Y+2, r25	; 0x02
    3a16:	89 83       	std	Y+1, r24	; 0x01
    3a18:	07 c0       	rjmp	.+14     	; 0x3a28 <KPD_u8GetPressed+0x25c>
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
    3a1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a1c:	8f 5f       	subi	r24, 0xFF	; 255
    3a1e:	8e 8f       	std	Y+30, r24	; 0x1e
    3a20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a22:	83 30       	cpi	r24, 0x03	; 3
    3a24:	08 f4       	brcc	.+2      	; 0x3a28 <KPD_u8GetPressed+0x25c>
    3a26:	e8 ce       	rjmp	.-560    	; 0x37f8 <KPD_u8GetPressed+0x2c>
				_delay_ms(200); // if continuous pressing
				break;
			}
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3a2c:	41 e0       	ldi	r20, 0x01	; 1
    3a2e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
    3a32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a34:	8f 5f       	subi	r24, 0xFF	; 255
    3a36:	8d 8f       	std	Y+29, r24	; 0x1d
    3a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a3a:	87 30       	cpi	r24, 0x07	; 7
    3a3c:	08 f4       	brcc	.+2      	; 0x3a40 <KPD_u8GetPressed+0x274>
    3a3e:	d5 ce       	rjmp	.-598    	; 0x37ea <KPD_u8GetPressed+0x1e>
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
	}
	
	return LOC_u8RetVal;
    3a40:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3a42:	a0 96       	adiw	r28, 0x20	; 32
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	cf 91       	pop	r28
    3a50:	df 91       	pop	r29
    3a52:	08 95       	ret

00003a54 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "util/delay.h"

void LCD_voidInit()
{
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	df 93       	push	r29
    3a5a:	cf 93       	push	r28
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    3a60:	c4 55       	subi	r28, 0x54	; 84
    3a62:	d0 40       	sbci	r29, 0x00	; 0
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	de bf       	out	0x3e, r29	; 62
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(LCD_CTRL_PORT, DIO_PORT_OUTPUT);
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	6f ef       	ldi	r22, 0xFF	; 255
    3a72:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <DIO_enumSetPortDirection>
	DIO_enumSetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	6f ef       	ldi	r22, 0xFF	; 255
    3a7a:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <DIO_enumSetPortDirection>
    3a7e:	fe 01       	movw	r30, r28
    3a80:	ef 5a       	subi	r30, 0xAF	; 175
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	a0 ef       	ldi	r26, 0xF0	; 240
    3a8a:	b1 e4       	ldi	r27, 0x41	; 65
    3a8c:	80 83       	st	Z, r24
    3a8e:	91 83       	std	Z+1, r25	; 0x01
    3a90:	a2 83       	std	Z+2, r26	; 0x02
    3a92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a94:	8e 01       	movw	r16, r28
    3a96:	03 5b       	subi	r16, 0xB3	; 179
    3a98:	1f 4f       	sbci	r17, 0xFF	; 255
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	ef 5a       	subi	r30, 0xAF	; 175
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	4a e7       	ldi	r20, 0x7A	; 122
    3aae:	53 e4       	ldi	r21, 0x43	; 67
    3ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	f8 01       	movw	r30, r16
    3aba:	80 83       	st	Z, r24
    3abc:	91 83       	std	Z+1, r25	; 0x01
    3abe:	a2 83       	std	Z+2, r26	; 0x02
    3ac0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e3 5b       	subi	r30, 0xB3	; 179
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e8       	ldi	r20, 0x80	; 128
    3ad6:	5f e3       	ldi	r21, 0x3F	; 63
    3ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3adc:	88 23       	and	r24, r24
    3ade:	44 f4       	brge	.+16     	; 0x3af0 <LCD_voidInit+0x9c>
		__ticks = 1;
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e5 5b       	subi	r30, 0xB5	; 181
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	91 83       	std	Z+1, r25	; 0x01
    3aec:	80 83       	st	Z, r24
    3aee:	64 c0       	rjmp	.+200    	; 0x3bb8 <LCD_voidInit+0x164>
	else if (__tmp > 65535)
    3af0:	fe 01       	movw	r30, r28
    3af2:	e3 5b       	subi	r30, 0xB3	; 179
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	60 81       	ld	r22, Z
    3af8:	71 81       	ldd	r23, Z+1	; 0x01
    3afa:	82 81       	ldd	r24, Z+2	; 0x02
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	3f ef       	ldi	r19, 0xFF	; 255
    3b02:	4f e7       	ldi	r20, 0x7F	; 127
    3b04:	57 e4       	ldi	r21, 0x47	; 71
    3b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b0a:	18 16       	cp	r1, r24
    3b0c:	0c f0       	brlt	.+2      	; 0x3b10 <LCD_voidInit+0xbc>
    3b0e:	43 c0       	rjmp	.+134    	; 0x3b96 <LCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b10:	fe 01       	movw	r30, r28
    3b12:	ef 5a       	subi	r30, 0xAF	; 175
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	82 81       	ldd	r24, Z+2	; 0x02
    3b1c:	93 81       	ldd	r25, Z+3	; 0x03
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	40 e2       	ldi	r20, 0x20	; 32
    3b24:	51 e4       	ldi	r21, 0x41	; 65
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	8e 01       	movw	r16, r28
    3b30:	05 5b       	subi	r16, 0xB5	; 181
    3b32:	1f 4f       	sbci	r17, 0xFF	; 255
    3b34:	bc 01       	movw	r22, r24
    3b36:	cd 01       	movw	r24, r26
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	f8 01       	movw	r30, r16
    3b42:	91 83       	std	Z+1, r25	; 0x01
    3b44:	80 83       	st	Z, r24
    3b46:	1f c0       	rjmp	.+62     	; 0x3b86 <LCD_voidInit+0x132>
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e7 5b       	subi	r30, 0xB7	; 183
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	89 e1       	ldi	r24, 0x19	; 25
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	80 83       	st	Z, r24
    3b56:	fe 01       	movw	r30, r28
    3b58:	e7 5b       	subi	r30, 0xB7	; 183
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <LCD_voidInit+0x10c>
    3b64:	fe 01       	movw	r30, r28
    3b66:	e7 5b       	subi	r30, 0xB7	; 183
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b6e:	de 01       	movw	r26, r28
    3b70:	a5 5b       	subi	r26, 0xB5	; 181
    3b72:	bf 4f       	sbci	r27, 0xFF	; 255
    3b74:	fe 01       	movw	r30, r28
    3b76:	e5 5b       	subi	r30, 0xB5	; 181
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	11 96       	adiw	r26, 0x01	; 1
    3b82:	9c 93       	st	X, r25
    3b84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b86:	fe 01       	movw	r30, r28
    3b88:	e5 5b       	subi	r30, 0xB5	; 181
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	80 81       	ld	r24, Z
    3b8e:	91 81       	ldd	r25, Z+1	; 0x01
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	d1 f6       	brne	.-76     	; 0x3b48 <LCD_voidInit+0xf4>
    3b94:	27 c0       	rjmp	.+78     	; 0x3be4 <LCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b96:	8e 01       	movw	r16, r28
    3b98:	05 5b       	subi	r16, 0xB5	; 181
    3b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e3 5b       	subi	r30, 0xB3	; 179
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	60 81       	ld	r22, Z
    3ba4:	71 81       	ldd	r23, Z+1	; 0x01
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	f8 01       	movw	r30, r16
    3bb4:	91 83       	std	Z+1, r25	; 0x01
    3bb6:	80 83       	st	Z, r24
    3bb8:	de 01       	movw	r26, r28
    3bba:	a9 5b       	subi	r26, 0xB9	; 185
    3bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e5 5b       	subi	r30, 0xB5	; 181
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	8d 93       	st	X+, r24
    3bca:	9c 93       	st	X, r25
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e9 5b       	subi	r30, 0xB9	; 185
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <LCD_voidInit+0x182>
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e9 5b       	subi	r30, 0xB9	; 185
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	91 83       	std	Z+1, r25	; 0x01
    3be2:	80 83       	st	Z, r24
	//DIO_enumSetPortValue(LCD_CTRL_PORT, DIO_PORT_HIGH);
	_delay_ms(30);

	LCD_voidSendCommand(LCD_HOME);
    3be4:	82 e0       	ldi	r24, 0x02	; 2
    3be6:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_voidSendCommand>
    3bea:	fe 01       	movw	r30, r28
    3bec:	ed 5b       	subi	r30, 0xBD	; 189
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a0 e8       	ldi	r26, 0x80	; 128
    3bf6:	bf e3       	ldi	r27, 0x3F	; 63
    3bf8:	80 83       	st	Z, r24
    3bfa:	91 83       	std	Z+1, r25	; 0x01
    3bfc:	a2 83       	std	Z+2, r26	; 0x02
    3bfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c00:	8e 01       	movw	r16, r28
    3c02:	01 5c       	subi	r16, 0xC1	; 193
    3c04:	1f 4f       	sbci	r17, 0xFF	; 255
    3c06:	fe 01       	movw	r30, r28
    3c08:	ed 5b       	subi	r30, 0xBD	; 189
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	4a e7       	ldi	r20, 0x7A	; 122
    3c1a:	53 e4       	ldi	r21, 0x43	; 67
    3c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	f8 01       	movw	r30, r16
    3c26:	80 83       	st	Z, r24
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	a2 83       	std	Z+2, r26	; 0x02
    3c2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c2e:	fe 01       	movw	r30, r28
    3c30:	ff 96       	adiw	r30, 0x3f	; 63
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e8       	ldi	r20, 0x80	; 128
    3c40:	5f e3       	ldi	r21, 0x3F	; 63
    3c42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c46:	88 23       	and	r24, r24
    3c48:	2c f4       	brge	.+10     	; 0x3c54 <LCD_voidInit+0x200>
		__ticks = 1;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	9e af       	std	Y+62, r25	; 0x3e
    3c50:	8d af       	std	Y+61, r24	; 0x3d
    3c52:	46 c0       	rjmp	.+140    	; 0x3ce0 <LCD_voidInit+0x28c>
	else if (__tmp > 65535)
    3c54:	fe 01       	movw	r30, r28
    3c56:	ff 96       	adiw	r30, 0x3f	; 63
    3c58:	60 81       	ld	r22, Z
    3c5a:	71 81       	ldd	r23, Z+1	; 0x01
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	3f ef       	ldi	r19, 0xFF	; 255
    3c64:	4f e7       	ldi	r20, 0x7F	; 127
    3c66:	57 e4       	ldi	r21, 0x47	; 71
    3c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c6c:	18 16       	cp	r1, r24
    3c6e:	64 f5       	brge	.+88     	; 0x3cc8 <LCD_voidInit+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c70:	fe 01       	movw	r30, r28
    3c72:	ed 5b       	subi	r30, 0xBD	; 189
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	60 81       	ld	r22, Z
    3c78:	71 81       	ldd	r23, Z+1	; 0x01
    3c7a:	82 81       	ldd	r24, Z+2	; 0x02
    3c7c:	93 81       	ldd	r25, Z+3	; 0x03
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	40 e2       	ldi	r20, 0x20	; 32
    3c84:	51 e4       	ldi	r21, 0x41	; 65
    3c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	bc 01       	movw	r22, r24
    3c90:	cd 01       	movw	r24, r26
    3c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	9e af       	std	Y+62, r25	; 0x3e
    3c9c:	8d af       	std	Y+61, r24	; 0x3d
    3c9e:	0f c0       	rjmp	.+30     	; 0x3cbe <LCD_voidInit+0x26a>
    3ca0:	89 e1       	ldi	r24, 0x19	; 25
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	9c af       	std	Y+60, r25	; 0x3c
    3ca6:	8b af       	std	Y+59, r24	; 0x3b
    3ca8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3caa:	9c ad       	ldd	r25, Y+60	; 0x3c
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	f1 f7       	brne	.-4      	; 0x3cac <LCD_voidInit+0x258>
    3cb0:	9c af       	std	Y+60, r25	; 0x3c
    3cb2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	9e af       	std	Y+62, r25	; 0x3e
    3cbc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cc2:	00 97       	sbiw	r24, 0x00	; 0
    3cc4:	69 f7       	brne	.-38     	; 0x3ca0 <LCD_voidInit+0x24c>
    3cc6:	16 c0       	rjmp	.+44     	; 0x3cf4 <LCD_voidInit+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc8:	fe 01       	movw	r30, r28
    3cca:	ff 96       	adiw	r30, 0x3f	; 63
    3ccc:	60 81       	ld	r22, Z
    3cce:	71 81       	ldd	r23, Z+1	; 0x01
    3cd0:	82 81       	ldd	r24, Z+2	; 0x02
    3cd2:	93 81       	ldd	r25, Z+3	; 0x03
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	9e af       	std	Y+62, r25	; 0x3e
    3cde:	8d af       	std	Y+61, r24	; 0x3d
    3ce0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ce2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ce4:	9a af       	std	Y+58, r25	; 0x3a
    3ce6:	89 af       	std	Y+57, r24	; 0x39
    3ce8:	89 ad       	ldd	r24, Y+57	; 0x39
    3cea:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <LCD_voidInit+0x298>
    3cf0:	9a af       	std	Y+58, r25	; 0x3a
    3cf2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	LCD_voidSendCommand(0X38);
    3cf4:	88 e3       	ldi	r24, 0x38	; 56
    3cf6:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_voidSendCommand>
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	a0 e8       	ldi	r26, 0x80	; 128
    3d00:	bf e3       	ldi	r27, 0x3F	; 63
    3d02:	8d ab       	std	Y+53, r24	; 0x35
    3d04:	9e ab       	std	Y+54, r25	; 0x36
    3d06:	af ab       	std	Y+55, r26	; 0x37
    3d08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d0a:	6d a9       	ldd	r22, Y+53	; 0x35
    3d0c:	7e a9       	ldd	r23, Y+54	; 0x36
    3d0e:	8f a9       	ldd	r24, Y+55	; 0x37
    3d10:	98 ad       	ldd	r25, Y+56	; 0x38
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	4a e7       	ldi	r20, 0x7A	; 122
    3d18:	53 e4       	ldi	r21, 0x43	; 67
    3d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	89 ab       	std	Y+49, r24	; 0x31
    3d24:	9a ab       	std	Y+50, r25	; 0x32
    3d26:	ab ab       	std	Y+51, r26	; 0x33
    3d28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    3d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    3d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    3d30:	9c a9       	ldd	r25, Y+52	; 0x34
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e8       	ldi	r20, 0x80	; 128
    3d38:	5f e3       	ldi	r21, 0x3F	; 63
    3d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d3e:	88 23       	and	r24, r24
    3d40:	2c f4       	brge	.+10     	; 0x3d4c <LCD_voidInit+0x2f8>
		__ticks = 1;
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	98 ab       	std	Y+48, r25	; 0x30
    3d48:	8f a7       	std	Y+47, r24	; 0x2f
    3d4a:	3f c0       	rjmp	.+126    	; 0x3dca <LCD_voidInit+0x376>
	else if (__tmp > 65535)
    3d4c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d4e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d50:	8b a9       	ldd	r24, Y+51	; 0x33
    3d52:	9c a9       	ldd	r25, Y+52	; 0x34
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	3f ef       	ldi	r19, 0xFF	; 255
    3d58:	4f e7       	ldi	r20, 0x7F	; 127
    3d5a:	57 e4       	ldi	r21, 0x47	; 71
    3d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d60:	18 16       	cp	r1, r24
    3d62:	4c f5       	brge	.+82     	; 0x3db6 <LCD_voidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d64:	6d a9       	ldd	r22, Y+53	; 0x35
    3d66:	7e a9       	ldd	r23, Y+54	; 0x36
    3d68:	8f a9       	ldd	r24, Y+55	; 0x37
    3d6a:	98 ad       	ldd	r25, Y+56	; 0x38
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e2       	ldi	r20, 0x20	; 32
    3d72:	51 e4       	ldi	r21, 0x41	; 65
    3d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	cd 01       	movw	r24, r26
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	98 ab       	std	Y+48, r25	; 0x30
    3d8a:	8f a7       	std	Y+47, r24	; 0x2f
    3d8c:	0f c0       	rjmp	.+30     	; 0x3dac <LCD_voidInit+0x358>
    3d8e:	89 e1       	ldi	r24, 0x19	; 25
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	9e a7       	std	Y+46, r25	; 0x2e
    3d94:	8d a7       	std	Y+45, r24	; 0x2d
    3d96:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d98:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <LCD_voidInit+0x346>
    3d9e:	9e a7       	std	Y+46, r25	; 0x2e
    3da0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3da4:	98 a9       	ldd	r25, Y+48	; 0x30
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	98 ab       	std	Y+48, r25	; 0x30
    3daa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dae:	98 a9       	ldd	r25, Y+48	; 0x30
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	69 f7       	brne	.-38     	; 0x3d8e <LCD_voidInit+0x33a>
    3db4:	14 c0       	rjmp	.+40     	; 0x3dde <LCD_voidInit+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db6:	69 a9       	ldd	r22, Y+49	; 0x31
    3db8:	7a a9       	ldd	r23, Y+50	; 0x32
    3dba:	8b a9       	ldd	r24, Y+51	; 0x33
    3dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	98 ab       	std	Y+48, r25	; 0x30
    3dc8:	8f a7       	std	Y+47, r24	; 0x2f
    3dca:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dcc:	98 a9       	ldd	r25, Y+48	; 0x30
    3dce:	9c a7       	std	Y+44, r25	; 0x2c
    3dd0:	8b a7       	std	Y+43, r24	; 0x2b
    3dd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	f1 f7       	brne	.-4      	; 0x3dd6 <LCD_voidInit+0x382>
    3dda:	9c a7       	std	Y+44, r25	; 0x2c
    3ddc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    3dde:	8c e0       	ldi	r24, 0x0C	; 12
    3de0:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_voidSendCommand>
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	a0 e8       	ldi	r26, 0x80	; 128
    3dea:	bf e3       	ldi	r27, 0x3F	; 63
    3dec:	8f a3       	std	Y+39, r24	; 0x27
    3dee:	98 a7       	std	Y+40, r25	; 0x28
    3df0:	a9 a7       	std	Y+41, r26	; 0x29
    3df2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df4:	6f a1       	ldd	r22, Y+39	; 0x27
    3df6:	78 a5       	ldd	r23, Y+40	; 0x28
    3df8:	89 a5       	ldd	r24, Y+41	; 0x29
    3dfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	4a e7       	ldi	r20, 0x7A	; 122
    3e02:	53 e4       	ldi	r21, 0x43	; 67
    3e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	8b a3       	std	Y+35, r24	; 0x23
    3e0e:	9c a3       	std	Y+36, r25	; 0x24
    3e10:	ad a3       	std	Y+37, r26	; 0x25
    3e12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e14:	6b a1       	ldd	r22, Y+35	; 0x23
    3e16:	7c a1       	ldd	r23, Y+36	; 0x24
    3e18:	8d a1       	ldd	r24, Y+37	; 0x25
    3e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e8       	ldi	r20, 0x80	; 128
    3e22:	5f e3       	ldi	r21, 0x3F	; 63
    3e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e28:	88 23       	and	r24, r24
    3e2a:	2c f4       	brge	.+10     	; 0x3e36 <LCD_voidInit+0x3e2>
		__ticks = 1;
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	9a a3       	std	Y+34, r25	; 0x22
    3e32:	89 a3       	std	Y+33, r24	; 0x21
    3e34:	3f c0       	rjmp	.+126    	; 0x3eb4 <LCD_voidInit+0x460>
	else if (__tmp > 65535)
    3e36:	6b a1       	ldd	r22, Y+35	; 0x23
    3e38:	7c a1       	ldd	r23, Y+36	; 0x24
    3e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	3f ef       	ldi	r19, 0xFF	; 255
    3e42:	4f e7       	ldi	r20, 0x7F	; 127
    3e44:	57 e4       	ldi	r21, 0x47	; 71
    3e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e4a:	18 16       	cp	r1, r24
    3e4c:	4c f5       	brge	.+82     	; 0x3ea0 <LCD_voidInit+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e4e:	6f a1       	ldd	r22, Y+39	; 0x27
    3e50:	78 a5       	ldd	r23, Y+40	; 0x28
    3e52:	89 a5       	ldd	r24, Y+41	; 0x29
    3e54:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e2       	ldi	r20, 0x20	; 32
    3e5c:	51 e4       	ldi	r21, 0x41	; 65
    3e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	bc 01       	movw	r22, r24
    3e68:	cd 01       	movw	r24, r26
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	9a a3       	std	Y+34, r25	; 0x22
    3e74:	89 a3       	std	Y+33, r24	; 0x21
    3e76:	0f c0       	rjmp	.+30     	; 0x3e96 <LCD_voidInit+0x442>
    3e78:	89 e1       	ldi	r24, 0x19	; 25
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	98 a3       	std	Y+32, r25	; 0x20
    3e7e:	8f 8f       	std	Y+31, r24	; 0x1f
    3e80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e82:	98 a1       	ldd	r25, Y+32	; 0x20
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	f1 f7       	brne	.-4      	; 0x3e84 <LCD_voidInit+0x430>
    3e88:	98 a3       	std	Y+32, r25	; 0x20
    3e8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	9a a3       	std	Y+34, r25	; 0x22
    3e94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e96:	89 a1       	ldd	r24, Y+33	; 0x21
    3e98:	9a a1       	ldd	r25, Y+34	; 0x22
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	69 f7       	brne	.-38     	; 0x3e78 <LCD_voidInit+0x424>
    3e9e:	14 c0       	rjmp	.+40     	; 0x3ec8 <LCD_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	9a a3       	std	Y+34, r25	; 0x22
    3eb2:	89 a3       	std	Y+33, r24	; 0x21
    3eb4:	89 a1       	ldd	r24, Y+33	; 0x21
    3eb6:	9a a1       	ldd	r25, Y+34	; 0x22
    3eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    3eba:	8d 8f       	std	Y+29, r24	; 0x1d
    3ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ebe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <LCD_voidInit+0x46c>
    3ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ec6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidSendCommand(LCD_CLEAR);
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_voidSendCommand>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	a0 e0       	ldi	r26, 0x00	; 0
    3ed4:	b0 e4       	ldi	r27, 0x40	; 64
    3ed6:	89 8f       	std	Y+25, r24	; 0x19
    3ed8:	9a 8f       	std	Y+26, r25	; 0x1a
    3eda:	ab 8f       	std	Y+27, r26	; 0x1b
    3edc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ede:	69 8d       	ldd	r22, Y+25	; 0x19
    3ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	4a e7       	ldi	r20, 0x7A	; 122
    3eec:	53 e4       	ldi	r21, 0x43	; 67
    3eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	8d 8b       	std	Y+21, r24	; 0x15
    3ef8:	9e 8b       	std	Y+22, r25	; 0x16
    3efa:	af 8b       	std	Y+23, r26	; 0x17
    3efc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3efe:	6d 89       	ldd	r22, Y+21	; 0x15
    3f00:	7e 89       	ldd	r23, Y+22	; 0x16
    3f02:	8f 89       	ldd	r24, Y+23	; 0x17
    3f04:	98 8d       	ldd	r25, Y+24	; 0x18
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	40 e8       	ldi	r20, 0x80	; 128
    3f0c:	5f e3       	ldi	r21, 0x3F	; 63
    3f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f12:	88 23       	and	r24, r24
    3f14:	2c f4       	brge	.+10     	; 0x3f20 <LCD_voidInit+0x4cc>
		__ticks = 1;
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	9c 8b       	std	Y+20, r25	; 0x14
    3f1c:	8b 8b       	std	Y+19, r24	; 0x13
    3f1e:	3f c0       	rjmp	.+126    	; 0x3f9e <LCD_voidInit+0x54a>
	else if (__tmp > 65535)
    3f20:	6d 89       	ldd	r22, Y+21	; 0x15
    3f22:	7e 89       	ldd	r23, Y+22	; 0x16
    3f24:	8f 89       	ldd	r24, Y+23	; 0x17
    3f26:	98 8d       	ldd	r25, Y+24	; 0x18
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	3f ef       	ldi	r19, 0xFF	; 255
    3f2c:	4f e7       	ldi	r20, 0x7F	; 127
    3f2e:	57 e4       	ldi	r21, 0x47	; 71
    3f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f34:	18 16       	cp	r1, r24
    3f36:	4c f5       	brge	.+82     	; 0x3f8a <LCD_voidInit+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f38:	69 8d       	ldd	r22, Y+25	; 0x19
    3f3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	40 e2       	ldi	r20, 0x20	; 32
    3f46:	51 e4       	ldi	r21, 0x41	; 65
    3f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	cb 01       	movw	r24, r22
    3f50:	bc 01       	movw	r22, r24
    3f52:	cd 01       	movw	r24, r26
    3f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	9c 8b       	std	Y+20, r25	; 0x14
    3f5e:	8b 8b       	std	Y+19, r24	; 0x13
    3f60:	0f c0       	rjmp	.+30     	; 0x3f80 <LCD_voidInit+0x52c>
    3f62:	89 e1       	ldi	r24, 0x19	; 25
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	9a 8b       	std	Y+18, r25	; 0x12
    3f68:	89 8b       	std	Y+17, r24	; 0x11
    3f6a:	89 89       	ldd	r24, Y+17	; 0x11
    3f6c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f6e:	01 97       	sbiw	r24, 0x01	; 1
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <LCD_voidInit+0x51a>
    3f72:	9a 8b       	std	Y+18, r25	; 0x12
    3f74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f76:	8b 89       	ldd	r24, Y+19	; 0x13
    3f78:	9c 89       	ldd	r25, Y+20	; 0x14
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	9c 8b       	std	Y+20, r25	; 0x14
    3f7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f80:	8b 89       	ldd	r24, Y+19	; 0x13
    3f82:	9c 89       	ldd	r25, Y+20	; 0x14
    3f84:	00 97       	sbiw	r24, 0x00	; 0
    3f86:	69 f7       	brne	.-38     	; 0x3f62 <LCD_voidInit+0x50e>
    3f88:	14 c0       	rjmp	.+40     	; 0x3fb2 <LCD_voidInit+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f90:	98 8d       	ldd	r25, Y+24	; 0x18
    3f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22
    3f9a:	9c 8b       	std	Y+20, r25	; 0x14
    3f9c:	8b 8b       	std	Y+19, r24	; 0x13
    3f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa2:	98 8b       	std	Y+16, r25	; 0x10
    3fa4:	8f 87       	std	Y+15, r24	; 0x0f
    3fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fa8:	98 89       	ldd	r25, Y+16	; 0x10
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <LCD_voidInit+0x556>
    3fae:	98 8b       	std	Y+16, r25	; 0x10
    3fb0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidSendCommand(LCD_ENTRY_MODE);
    3fb2:	86 e0       	ldi	r24, 0x06	; 6
    3fb4:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_voidSendCommand>
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	a0 e8       	ldi	r26, 0x80	; 128
    3fbe:	bf e3       	ldi	r27, 0x3F	; 63
    3fc0:	8b 87       	std	Y+11, r24	; 0x0b
    3fc2:	9c 87       	std	Y+12, r25	; 0x0c
    3fc4:	ad 87       	std	Y+13, r26	; 0x0d
    3fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	4a e7       	ldi	r20, 0x7A	; 122
    3fd6:	53 e4       	ldi	r21, 0x43	; 67
    3fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	8f 83       	std	Y+7, r24	; 0x07
    3fe2:	98 87       	std	Y+8, r25	; 0x08
    3fe4:	a9 87       	std	Y+9, r26	; 0x09
    3fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fea:	78 85       	ldd	r23, Y+8	; 0x08
    3fec:	89 85       	ldd	r24, Y+9	; 0x09
    3fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	40 e8       	ldi	r20, 0x80	; 128
    3ff6:	5f e3       	ldi	r21, 0x3F	; 63
    3ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ffc:	88 23       	and	r24, r24
    3ffe:	2c f4       	brge	.+10     	; 0x400a <LCD_voidInit+0x5b6>
		__ticks = 1;
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	9e 83       	std	Y+6, r25	; 0x06
    4006:	8d 83       	std	Y+5, r24	; 0x05
    4008:	3f c0       	rjmp	.+126    	; 0x4088 <LCD_voidInit+0x634>
	else if (__tmp > 65535)
    400a:	6f 81       	ldd	r22, Y+7	; 0x07
    400c:	78 85       	ldd	r23, Y+8	; 0x08
    400e:	89 85       	ldd	r24, Y+9	; 0x09
    4010:	9a 85       	ldd	r25, Y+10	; 0x0a
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	3f ef       	ldi	r19, 0xFF	; 255
    4016:	4f e7       	ldi	r20, 0x7F	; 127
    4018:	57 e4       	ldi	r21, 0x47	; 71
    401a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    401e:	18 16       	cp	r1, r24
    4020:	4c f5       	brge	.+82     	; 0x4074 <LCD_voidInit+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4022:	6b 85       	ldd	r22, Y+11	; 0x0b
    4024:	7c 85       	ldd	r23, Y+12	; 0x0c
    4026:	8d 85       	ldd	r24, Y+13	; 0x0d
    4028:	9e 85       	ldd	r25, Y+14	; 0x0e
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	40 e2       	ldi	r20, 0x20	; 32
    4030:	51 e4       	ldi	r21, 0x41	; 65
    4032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	bc 01       	movw	r22, r24
    403c:	cd 01       	movw	r24, r26
    403e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	9e 83       	std	Y+6, r25	; 0x06
    4048:	8d 83       	std	Y+5, r24	; 0x05
    404a:	0f c0       	rjmp	.+30     	; 0x406a <LCD_voidInit+0x616>
    404c:	89 e1       	ldi	r24, 0x19	; 25
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	9c 83       	std	Y+4, r25	; 0x04
    4052:	8b 83       	std	Y+3, r24	; 0x03
    4054:	8b 81       	ldd	r24, Y+3	; 0x03
    4056:	9c 81       	ldd	r25, Y+4	; 0x04
    4058:	01 97       	sbiw	r24, 0x01	; 1
    405a:	f1 f7       	brne	.-4      	; 0x4058 <LCD_voidInit+0x604>
    405c:	9c 83       	std	Y+4, r25	; 0x04
    405e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4060:	8d 81       	ldd	r24, Y+5	; 0x05
    4062:	9e 81       	ldd	r25, Y+6	; 0x06
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	9e 83       	std	Y+6, r25	; 0x06
    4068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406a:	8d 81       	ldd	r24, Y+5	; 0x05
    406c:	9e 81       	ldd	r25, Y+6	; 0x06
    406e:	00 97       	sbiw	r24, 0x00	; 0
    4070:	69 f7       	brne	.-38     	; 0x404c <LCD_voidInit+0x5f8>
    4072:	14 c0       	rjmp	.+40     	; 0x409c <LCD_voidInit+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4074:	6f 81       	ldd	r22, Y+7	; 0x07
    4076:	78 85       	ldd	r23, Y+8	; 0x08
    4078:	89 85       	ldd	r24, Y+9	; 0x09
    407a:	9a 85       	ldd	r25, Y+10	; 0x0a
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	9e 83       	std	Y+6, r25	; 0x06
    4086:	8d 83       	std	Y+5, r24	; 0x05
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	9e 81       	ldd	r25, Y+6	; 0x06
    408c:	9a 83       	std	Y+2, r25	; 0x02
    408e:	89 83       	std	Y+1, r24	; 0x01
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	9a 81       	ldd	r25, Y+2	; 0x02
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <LCD_voidInit+0x640>
    4098:	9a 83       	std	Y+2, r25	; 0x02
    409a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    409c:	cc 5a       	subi	r28, 0xAC	; 172
    409e:	df 4f       	sbci	r29, 0xFF	; 255
    40a0:	0f b6       	in	r0, 0x3f	; 63
    40a2:	f8 94       	cli
    40a4:	de bf       	out	0x3e, r29	; 62
    40a6:	0f be       	out	0x3f, r0	; 63
    40a8:	cd bf       	out	0x3d, r28	; 61
    40aa:	cf 91       	pop	r28
    40ac:	df 91       	pop	r29
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	08 95       	ret

000040b4 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command)
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	0f 92       	push	r0
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortValue(LCD_DATA_PORT, command);
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	69 81       	ldd	r22, Y+1	; 0x01
    40c4:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <DIO_enumSetPortValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_LOW);
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	40 e0       	ldi	r20, 0x00	; 0
    40ce:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	61 e0       	ldi	r22, 0x01	; 1
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>

	//Send Pulse
	LCD_voidSendPulse();
    40dc:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <LCD_voidSendPulse>
}
    40e0:	0f 90       	pop	r0
    40e2:	cf 91       	pop	r28
    40e4:	df 91       	pop	r29
    40e6:	08 95       	ret

000040e8 <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    40e8:	df 93       	push	r29
    40ea:	cf 93       	push	r28
    40ec:	0f 92       	push	r0
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62
    40f2:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_HIGH);
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	60 e0       	ldi	r22, 0x00	; 0
    40f8:	41 e0       	ldi	r20, 0x01	; 1
    40fa:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	61 e0       	ldi	r22, 0x01	; 1
    4102:	40 e0       	ldi	r20, 0x00	; 0
    4104:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	DIO_enumSetPortValue(LCD_DATA_PORT, data);
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	69 81       	ldd	r22, Y+1	; 0x01
    410c:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <DIO_enumSetPortValue>

	//Send Pulse
	LCD_voidSendPulse();
    4110:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <LCD_voidSendPulse>
}
    4114:	0f 90       	pop	r0
    4116:	cf 91       	pop	r28
    4118:	df 91       	pop	r29
    411a:	08 95       	ret

0000411c <LCD_voidSetCursorPosition>:

void LCD_voidSetCursorPosition(u8 row, u8 col)
{
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	00 d0       	rcall	.+0      	; 0x4122 <LCD_voidSetCursorPosition+0x6>
    4122:	0f 92       	push	r0
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	8a 83       	std	Y+2, r24	; 0x02
    412a:	6b 83       	std	Y+3, r22	; 0x03
	u8 pos;
	if(row == 1)
    412c:	8a 81       	ldd	r24, Y+2	; 0x02
    412e:	81 30       	cpi	r24, 0x01	; 1
    4130:	21 f4       	brne	.+8      	; 0x413a <LCD_voidSetCursorPosition+0x1e>
		pos = LCD_CURSOR + (col - 1);
    4132:	8b 81       	ldd	r24, Y+3	; 0x03
    4134:	81 58       	subi	r24, 0x81	; 129
    4136:	89 83       	std	Y+1, r24	; 0x01
    4138:	03 c0       	rjmp	.+6      	; 0x4140 <LCD_voidSetCursorPosition+0x24>
	else
		pos = LCD_CURSOR + (col - 1) + 64;
    413a:	8b 81       	ldd	r24, Y+3	; 0x03
    413c:	81 54       	subi	r24, 0x41	; 65
    413e:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(pos);
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <LCD_voidSendCommand>
}
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	0f 90       	pop	r0
    414c:	cf 91       	pop	r28
    414e:	df 91       	pop	r29
    4150:	08 95       	ret

00004152 <LCD_voidSendString>:

void LCD_voidSendString(u8* str)
{
    4152:	df 93       	push	r29
    4154:	cf 93       	push	r28
    4156:	00 d0       	rcall	.+0      	; 0x4158 <LCD_voidSendString+0x6>
    4158:	0f 92       	push	r0
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	9b 83       	std	Y+3, r25	; 0x03
    4160:	8a 83       	std	Y+2, r24	; 0x02
	u8 ptr = 0;
    4162:	19 82       	std	Y+1, r1	; 0x01
    4164:	0e c0       	rjmp	.+28     	; 0x4182 <LCD_voidSendString+0x30>
	while(str[ptr] != '\0')
	{
		LCD_voidSendData(str[ptr]);
    4166:	89 81       	ldd	r24, Y+1	; 0x01
    4168:	28 2f       	mov	r18, r24
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	8a 81       	ldd	r24, Y+2	; 0x02
    416e:	9b 81       	ldd	r25, Y+3	; 0x03
    4170:	fc 01       	movw	r30, r24
    4172:	e2 0f       	add	r30, r18
    4174:	f3 1f       	adc	r31, r19
    4176:	80 81       	ld	r24, Z
    4178:	0e 94 74 20 	call	0x40e8	; 0x40e8 <LCD_voidSendData>
		ptr++;
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	8f 5f       	subi	r24, 0xFF	; 255
    4180:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8* str)
{
	u8 ptr = 0;
	while(str[ptr] != '\0')
    4182:	89 81       	ldd	r24, Y+1	; 0x01
    4184:	28 2f       	mov	r18, r24
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	8a 81       	ldd	r24, Y+2	; 0x02
    418a:	9b 81       	ldd	r25, Y+3	; 0x03
    418c:	fc 01       	movw	r30, r24
    418e:	e2 0f       	add	r30, r18
    4190:	f3 1f       	adc	r31, r19
    4192:	80 81       	ld	r24, Z
    4194:	88 23       	and	r24, r24
    4196:	39 f7       	brne	.-50     	; 0x4166 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[ptr]);
		ptr++;
	}
}
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	cf 91       	pop	r28
    41a0:	df 91       	pop	r29
    41a2:	08 95       	ret

000041a4 <LCD_voidSendPulse>:
static void LCD_voidSendPulse()
{
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	2e 97       	sbiw	r28, 0x0e	; 14
    41ae:	0f b6       	in	r0, 0x3f	; 63
    41b0:	f8 94       	cli
    41b2:	de bf       	out	0x3e, r29	; 62
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_HIGH);
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	62 e0       	ldi	r22, 0x02	; 2
    41bc:	41 e0       	ldi	r20, 0x01	; 1
    41be:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	a0 e8       	ldi	r26, 0x80	; 128
    41c8:	bf e3       	ldi	r27, 0x3F	; 63
    41ca:	8b 87       	std	Y+11, r24	; 0x0b
    41cc:	9c 87       	std	Y+12, r25	; 0x0c
    41ce:	ad 87       	std	Y+13, r26	; 0x0d
    41d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	4a e7       	ldi	r20, 0x7A	; 122
    41e0:	53 e4       	ldi	r21, 0x43	; 67
    41e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	8f 83       	std	Y+7, r24	; 0x07
    41ec:	98 87       	std	Y+8, r25	; 0x08
    41ee:	a9 87       	std	Y+9, r26	; 0x09
    41f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41f2:	6f 81       	ldd	r22, Y+7	; 0x07
    41f4:	78 85       	ldd	r23, Y+8	; 0x08
    41f6:	89 85       	ldd	r24, Y+9	; 0x09
    41f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	40 e8       	ldi	r20, 0x80	; 128
    4200:	5f e3       	ldi	r21, 0x3F	; 63
    4202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4206:	88 23       	and	r24, r24
    4208:	2c f4       	brge	.+10     	; 0x4214 <LCD_voidSendPulse+0x70>
		__ticks = 1;
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	8d 83       	std	Y+5, r24	; 0x05
    4212:	3f c0       	rjmp	.+126    	; 0x4292 <LCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    4214:	6f 81       	ldd	r22, Y+7	; 0x07
    4216:	78 85       	ldd	r23, Y+8	; 0x08
    4218:	89 85       	ldd	r24, Y+9	; 0x09
    421a:	9a 85       	ldd	r25, Y+10	; 0x0a
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	3f ef       	ldi	r19, 0xFF	; 255
    4220:	4f e7       	ldi	r20, 0x7F	; 127
    4222:	57 e4       	ldi	r21, 0x47	; 71
    4224:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4228:	18 16       	cp	r1, r24
    422a:	4c f5       	brge	.+82     	; 0x427e <LCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422c:	6b 85       	ldd	r22, Y+11	; 0x0b
    422e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4230:	8d 85       	ldd	r24, Y+13	; 0x0d
    4232:	9e 85       	ldd	r25, Y+14	; 0x0e
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	40 e2       	ldi	r20, 0x20	; 32
    423a:	51 e4       	ldi	r21, 0x41	; 65
    423c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4240:	dc 01       	movw	r26, r24
    4242:	cb 01       	movw	r24, r22
    4244:	bc 01       	movw	r22, r24
    4246:	cd 01       	movw	r24, r26
    4248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	9e 83       	std	Y+6, r25	; 0x06
    4252:	8d 83       	std	Y+5, r24	; 0x05
    4254:	0f c0       	rjmp	.+30     	; 0x4274 <LCD_voidSendPulse+0xd0>
    4256:	89 e1       	ldi	r24, 0x19	; 25
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	9c 83       	std	Y+4, r25	; 0x04
    425c:	8b 83       	std	Y+3, r24	; 0x03
    425e:	8b 81       	ldd	r24, Y+3	; 0x03
    4260:	9c 81       	ldd	r25, Y+4	; 0x04
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	f1 f7       	brne	.-4      	; 0x4262 <LCD_voidSendPulse+0xbe>
    4266:	9c 83       	std	Y+4, r25	; 0x04
    4268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426a:	8d 81       	ldd	r24, Y+5	; 0x05
    426c:	9e 81       	ldd	r25, Y+6	; 0x06
    426e:	01 97       	sbiw	r24, 0x01	; 1
    4270:	9e 83       	std	Y+6, r25	; 0x06
    4272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4274:	8d 81       	ldd	r24, Y+5	; 0x05
    4276:	9e 81       	ldd	r25, Y+6	; 0x06
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	69 f7       	brne	.-38     	; 0x4256 <LCD_voidSendPulse+0xb2>
    427c:	14 c0       	rjmp	.+40     	; 0x42a6 <LCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427e:	6f 81       	ldd	r22, Y+7	; 0x07
    4280:	78 85       	ldd	r23, Y+8	; 0x08
    4282:	89 85       	ldd	r24, Y+9	; 0x09
    4284:	9a 85       	ldd	r25, Y+10	; 0x0a
    4286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428a:	dc 01       	movw	r26, r24
    428c:	cb 01       	movw	r24, r22
    428e:	9e 83       	std	Y+6, r25	; 0x06
    4290:	8d 83       	std	Y+5, r24	; 0x05
    4292:	8d 81       	ldd	r24, Y+5	; 0x05
    4294:	9e 81       	ldd	r25, Y+6	; 0x06
    4296:	9a 83       	std	Y+2, r25	; 0x02
    4298:	89 83       	std	Y+1, r24	; 0x01
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	9a 81       	ldd	r25, Y+2	; 0x02
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <LCD_voidSendPulse+0xfa>
    42a2:	9a 83       	std	Y+2, r25	; 0x02
    42a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_LOW);
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	62 e0       	ldi	r22, 0x02	; 2
    42aa:	40 e0       	ldi	r20, 0x00	; 0
    42ac:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>

}
    42b0:	2e 96       	adiw	r28, 0x0e	; 14
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	08 95       	ret

000042c2 <SSD_voidInit>:
#include "SSD_config.h"

static u8 Local_u8SSDNums[10] = SSD_ArrNums;

void SSD_voidInit(SSD_Type SSD_Configuration)
{
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	00 d0       	rcall	.+0      	; 0x42c8 <SSD_voidInit+0x6>
    42c8:	00 d0       	rcall	.+0      	; 0x42ca <SSD_voidInit+0x8>
    42ca:	cd b7       	in	r28, 0x3d	; 61
    42cc:	de b7       	in	r29, 0x3e	; 62
    42ce:	69 83       	std	Y+1, r22	; 0x01
    42d0:	7a 83       	std	Y+2, r23	; 0x02
    42d2:	8b 83       	std	Y+3, r24	; 0x03
    42d4:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection (SSD_Configuration.DataPort, DIO_PORT_OUTPUT);
    42d6:	8a 81       	ldd	r24, Y+2	; 0x02
    42d8:	6f ef       	ldi	r22, 0xFF	; 255
    42da:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <DIO_enumSetPortDirection>
}
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	0f 90       	pop	r0
    42e4:	0f 90       	pop	r0
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <SSD_voidSendNumber>:

void SSD_voidSendNumber(SSD_Type SSD_Configuration, u8 Copy_u8Number)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	00 d0       	rcall	.+0      	; 0x42f2 <SSD_voidSendNumber+0x6>
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <SSD_voidSendNumber+0x8>
    42f4:	0f 92       	push	r0
    42f6:	cd b7       	in	r28, 0x3d	; 61
    42f8:	de b7       	in	r29, 0x3e	; 62
    42fa:	69 83       	std	Y+1, r22	; 0x01
    42fc:	7a 83       	std	Y+2, r23	; 0x02
    42fe:	8b 83       	std	Y+3, r24	; 0x03
    4300:	9c 83       	std	Y+4, r25	; 0x04
    4302:	4d 83       	std	Y+5, r20	; 0x05
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    4304:	89 81       	ldd	r24, Y+1	; 0x01
    4306:	88 23       	and	r24, r24
    4308:	69 f4       	brne	.+26     	; 0x4324 <SSD_voidSendNumber+0x38>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, Local_u8SSDNums[Copy_u8Number] );
    430a:	2a 81       	ldd	r18, Y+2	; 0x02
    430c:	8d 81       	ldd	r24, Y+5	; 0x05
    430e:	88 2f       	mov	r24, r24
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	fc 01       	movw	r30, r24
    4314:	e8 58       	subi	r30, 0x88	; 136
    4316:	fe 4f       	sbci	r31, 0xFE	; 254
    4318:	90 81       	ld	r25, Z
    431a:	82 2f       	mov	r24, r18
    431c:	69 2f       	mov	r22, r25
    431e:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <DIO_enumSetPortValue>
    4322:	11 c0       	rjmp	.+34     	; 0x4346 <SSD_voidSendNumber+0x5a>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    4324:	89 81       	ldd	r24, Y+1	; 0x01
    4326:	81 30       	cpi	r24, 0x01	; 1
    4328:	71 f4       	brne	.+28     	; 0x4346 <SSD_voidSendNumber+0x5a>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, ~Local_u8SSDNums[Copy_u8Number]);
    432a:	2a 81       	ldd	r18, Y+2	; 0x02
    432c:	8d 81       	ldd	r24, Y+5	; 0x05
    432e:	88 2f       	mov	r24, r24
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	fc 01       	movw	r30, r24
    4334:	e8 58       	subi	r30, 0x88	; 136
    4336:	fe 4f       	sbci	r31, 0xFE	; 254
    4338:	80 81       	ld	r24, Z
    433a:	98 2f       	mov	r25, r24
    433c:	90 95       	com	r25
    433e:	82 2f       	mov	r24, r18
    4340:	69 2f       	mov	r22, r25
    4342:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <DIO_enumSetPortValue>
	}
}
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	cf 91       	pop	r28
    4352:	df 91       	pop	r29
    4354:	08 95       	ret

00004356 <SSD_voidEnable>:

void SSD_voidEnable(SSD_Type SSD_Configuration)
{
    4356:	df 93       	push	r29
    4358:	cf 93       	push	r28
    435a:	00 d0       	rcall	.+0      	; 0x435c <SSD_voidEnable+0x6>
    435c:	00 d0       	rcall	.+0      	; 0x435e <SSD_voidEnable+0x8>
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
    4362:	69 83       	std	Y+1, r22	; 0x01
    4364:	7a 83       	std	Y+2, r23	; 0x02
    4366:	8b 83       	std	Y+3, r24	; 0x03
    4368:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    436a:	8a 81       	ldd	r24, Y+2	; 0x02
    436c:	9c 81       	ldd	r25, Y+4	; 0x04
    436e:	69 2f       	mov	r22, r25
    4370:	41 e0       	ldi	r20, 0x01	; 1
    4372:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    4376:	89 81       	ldd	r24, Y+1	; 0x01
    4378:	88 23       	and	r24, r24
    437a:	39 f4       	brne	.+14     	; 0x438a <SSD_voidEnable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    437c:	8a 81       	ldd	r24, Y+2	; 0x02
    437e:	9c 81       	ldd	r25, Y+4	; 0x04
    4380:	69 2f       	mov	r22, r25
    4382:	40 e0       	ldi	r20, 0x00	; 0
    4384:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
    4388:	09 c0       	rjmp	.+18     	; 0x439c <SSD_voidEnable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	81 30       	cpi	r24, 0x01	; 1
    438e:	31 f4       	brne	.+12     	; 0x439c <SSD_voidEnable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	9c 81       	ldd	r25, Y+4	; 0x04
    4394:	69 2f       	mov	r22, r25
    4396:	41 e0       	ldi	r20, 0x01	; 1
    4398:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	}
}
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	cf 91       	pop	r28
    43a6:	df 91       	pop	r29
    43a8:	08 95       	ret

000043aa <SSD_voidDisable>:

void SSD_voidDisable(SSD_Type SSD_Configuration)
{
    43aa:	df 93       	push	r29
    43ac:	cf 93       	push	r28
    43ae:	00 d0       	rcall	.+0      	; 0x43b0 <SSD_voidDisable+0x6>
    43b0:	00 d0       	rcall	.+0      	; 0x43b2 <SSD_voidDisable+0x8>
    43b2:	cd b7       	in	r28, 0x3d	; 61
    43b4:	de b7       	in	r29, 0x3e	; 62
    43b6:	69 83       	std	Y+1, r22	; 0x01
    43b8:	7a 83       	std	Y+2, r23	; 0x02
    43ba:	8b 83       	std	Y+3, r24	; 0x03
    43bc:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    43be:	8a 81       	ldd	r24, Y+2	; 0x02
    43c0:	9c 81       	ldd	r25, Y+4	; 0x04
    43c2:	69 2f       	mov	r22, r25
    43c4:	41 e0       	ldi	r20, 0x01	; 1
    43c6:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	88 23       	and	r24, r24
    43ce:	39 f4       	brne	.+14     	; 0x43de <SSD_voidDisable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    43d0:	8a 81       	ldd	r24, Y+2	; 0x02
    43d2:	9c 81       	ldd	r25, Y+4	; 0x04
    43d4:	69 2f       	mov	r22, r25
    43d6:	41 e0       	ldi	r20, 0x01	; 1
    43d8:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
    43dc:	09 c0       	rjmp	.+18     	; 0x43f0 <SSD_voidDisable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	81 30       	cpi	r24, 0x01	; 1
    43e2:	31 f4       	brne	.+12     	; 0x43f0 <SSD_voidDisable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    43e4:	8a 81       	ldd	r24, Y+2	; 0x02
    43e6:	9c 81       	ldd	r25, Y+4	; 0x04
    43e8:	69 2f       	mov	r22, r25
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	}
}
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
    43f4:	0f 90       	pop	r0
    43f6:	0f 90       	pop	r0
    43f8:	cf 91       	pop	r28
    43fa:	df 91       	pop	r29
    43fc:	08 95       	ret

000043fe <SW_voidInit>:
#include "SW_interface.h"
#include "SW_config.h"
#include "SW_private.h"

void SW_voidInit(SW_Type SW_Config)
{
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	00 d0       	rcall	.+0      	; 0x4404 <SW_voidInit+0x6>
    4404:	0f 92       	push	r0
    4406:	cd b7       	in	r28, 0x3d	; 61
    4408:	de b7       	in	r29, 0x3e	; 62
    440a:	69 83       	std	Y+1, r22	; 0x01
    440c:	7a 83       	std	Y+2, r23	; 0x02
    440e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(SW_Config.PORT, SW_Config.PIN, DIO_PIN_INPUT);
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	9a 81       	ldd	r25, Y+2	; 0x02
    4414:	69 2f       	mov	r22, r25
    4416:	40 e0       	ldi	r20, 0x00	; 0
    4418:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
	if(SW_Config.PULL_STATE == SW_INT_PULL_UP)
    441c:	8b 81       	ldd	r24, Y+3	; 0x03
    441e:	88 23       	and	r24, r24
    4420:	31 f4       	brne	.+12     	; 0x442e <SW_voidInit+0x30>
		DIO_enumSetPinValue(SW_Config.PORT, SW_Config.PIN, DIO_PIN_OUTPUT);
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	9a 81       	ldd	r25, Y+2	; 0x02
    4426:	69 2f       	mov	r22, r25
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
}
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <SW_u8GetPressed>:

u8 SW_u8GetPressed (SW_Type SW_Config){
    443a:	df 93       	push	r29
    443c:	cf 93       	push	r28
    443e:	00 d0       	rcall	.+0      	; 0x4440 <SW_u8GetPressed+0x6>
    4440:	00 d0       	rcall	.+0      	; 0x4442 <SW_u8GetPressed+0x8>
    4442:	0f 92       	push	r0
    4444:	cd b7       	in	r28, 0x3d	; 61
    4446:	de b7       	in	r29, 0x3e	; 62
    4448:	6b 83       	std	Y+3, r22	; 0x03
    444a:	7c 83       	std	Y+4, r23	; 0x04
    444c:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    444e:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    4450:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.PULL_STATE == SW_INT_PULL_UP) || (SW_Config.PULL_STATE == SW_EXT_PULL_UP) )
    4452:	8d 81       	ldd	r24, Y+5	; 0x05
    4454:	88 23       	and	r24, r24
    4456:	19 f0       	breq	.+6      	; 0x445e <SW_u8GetPressed+0x24>
    4458:	8d 81       	ldd	r24, Y+5	; 0x05
    445a:	81 30       	cpi	r24, 0x01	; 1
    445c:	a1 f4       	brne	.+40     	; 0x4486 <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    445e:	8b 81       	ldd	r24, Y+3	; 0x03
    4460:	9c 81       	ldd	r25, Y+4	; 0x04
    4462:	9e 01       	movw	r18, r28
    4464:	2e 5f       	subi	r18, 0xFE	; 254
    4466:	3f 4f       	sbci	r19, 0xFF	; 255
    4468:	69 2f       	mov	r22, r25
    446a:	a9 01       	movw	r20, r18
    446c:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    4470:	8a 81       	ldd	r24, Y+2	; 0x02
    4472:	88 23       	and	r24, r24
    4474:	19 f4       	brne	.+6      	; 0x447c <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	89 83       	std	Y+1, r24	; 0x01
    447a:	1b c0       	rjmp	.+54     	; 0x44b2 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    447c:	8a 81       	ldd	r24, Y+2	; 0x02
    447e:	81 30       	cpi	r24, 0x01	; 1
    4480:	c1 f4       	brne	.+48     	; 0x44b2 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    4482:	19 82       	std	Y+1, r1	; 0x01
    4484:	16 c0       	rjmp	.+44     	; 0x44b2 <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.PULL_STATE == SW_EXT_PULL_DOWN)
    4486:	8d 81       	ldd	r24, Y+5	; 0x05
    4488:	82 30       	cpi	r24, 0x02	; 2
    448a:	99 f4       	brne	.+38     	; 0x44b2 <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    448c:	8b 81       	ldd	r24, Y+3	; 0x03
    448e:	9c 81       	ldd	r25, Y+4	; 0x04
    4490:	9e 01       	movw	r18, r28
    4492:	2e 5f       	subi	r18, 0xFE	; 254
    4494:	3f 4f       	sbci	r19, 0xFF	; 255
    4496:	69 2f       	mov	r22, r25
    4498:	a9 01       	movw	r20, r18
    449a:	0e 94 00 2a 	call	0x5400	; 0x5400 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    449e:	8a 81       	ldd	r24, Y+2	; 0x02
    44a0:	88 23       	and	r24, r24
    44a2:	11 f4       	brne	.+4      	; 0x44a8 <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    44a4:	19 82       	std	Y+1, r1	; 0x01
    44a6:	05 c0       	rjmp	.+10     	; 0x44b2 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
    44aa:	81 30       	cpi	r24, 0x01	; 1
    44ac:	11 f4       	brne	.+4      	; 0x44b2 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
    44b2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    44b4:	0f 90       	pop	r0
    44b6:	0f 90       	pop	r0
    44b8:	0f 90       	pop	r0
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	08 95       	ret

000044c4 <BUZ_voidInit>:


#include "BUZ_interface.h"

void BUZ_voidInit(BUZ_Type BUZ_Configuration)
{
    44c4:	df 93       	push	r29
    44c6:	cf 93       	push	r28
    44c8:	00 d0       	rcall	.+0      	; 0x44ca <BUZ_voidInit+0x6>
    44ca:	0f 92       	push	r0
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
    44d0:	69 83       	std	Y+1, r22	; 0x01
    44d2:	7a 83       	std	Y+2, r23	; 0x02
    44d4:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_OUTPUT);
    44d6:	89 81       	ldd	r24, Y+1	; 0x01
    44d8:	9a 81       	ldd	r25, Y+2	; 0x02
    44da:	69 2f       	mov	r22, r25
    44dc:	41 e0       	ldi	r20, 0x01	; 1
    44de:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
}
    44e2:	0f 90       	pop	r0
    44e4:	0f 90       	pop	r0
    44e6:	0f 90       	pop	r0
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <BUZ_voidON>:

void BUZ_voidON(BUZ_Type BUZ_Configuration)
{
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	00 d0       	rcall	.+0      	; 0x44f4 <BUZ_voidON+0x6>
    44f4:	0f 92       	push	r0
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62
    44fa:	69 83       	std	Y+1, r22	; 0x01
    44fc:	7a 83       	std	Y+2, r23	; 0x02
    44fe:	8b 83       	std	Y+3, r24	; 0x03
	if(BUZ_Configuration.Active_State == ACTIVE_HIGH)
    4500:	8b 81       	ldd	r24, Y+3	; 0x03
    4502:	81 30       	cpi	r24, 0x01	; 1
    4504:	39 f4       	brne	.+14     	; 0x4514 <BUZ_voidON+0x26>
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_HIGH);
    4506:	89 81       	ldd	r24, Y+1	; 0x01
    4508:	9a 81       	ldd	r25, Y+2	; 0x02
    450a:	69 2f       	mov	r22, r25
    450c:	41 e0       	ldi	r20, 0x01	; 1
    450e:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
    4512:	06 c0       	rjmp	.+12     	; 0x4520 <BUZ_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_LOW);
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	9a 81       	ldd	r25, Y+2	; 0x02
    4518:	69 2f       	mov	r22, r25
    451a:	40 e0       	ldi	r20, 0x00	; 0
    451c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	}
}
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	cf 91       	pop	r28
    4528:	df 91       	pop	r29
    452a:	08 95       	ret

0000452c <BUZ_voidOff>:

void BUZ_voidOff ( BUZ_Type BUZ_Configuration )
{
    452c:	df 93       	push	r29
    452e:	cf 93       	push	r28
    4530:	00 d0       	rcall	.+0      	; 0x4532 <BUZ_voidOff+0x6>
    4532:	0f 92       	push	r0
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	69 83       	std	Y+1, r22	; 0x01
    453a:	7a 83       	std	Y+2, r23	; 0x02
    453c:	8b 83       	std	Y+3, r24	; 0x03

	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
    453e:	8b 81       	ldd	r24, Y+3	; 0x03
    4540:	81 30       	cpi	r24, 0x01	; 1
    4542:	39 f4       	brne	.+14     	; 0x4552 <BUZ_voidOff+0x26>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	9a 81       	ldd	r25, Y+2	; 0x02
    4548:	69 2f       	mov	r22, r25
    454a:	40 e0       	ldi	r20, 0x00	; 0
    454c:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
    4550:	09 c0       	rjmp	.+18     	; 0x4564 <BUZ_voidOff+0x38>

	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
    4552:	8b 81       	ldd	r24, Y+3	; 0x03
    4554:	88 23       	and	r24, r24
    4556:	31 f4       	brne	.+12     	; 0x4564 <BUZ_voidOff+0x38>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH  );
    4558:	89 81       	ldd	r24, Y+1	; 0x01
    455a:	9a 81       	ldd	r25, Y+2	; 0x02
    455c:	69 2f       	mov	r22, r25
    455e:	41 e0       	ldi	r20, 0x01	; 1
    4560:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>

	}

}
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	cf 91       	pop	r28
    456c:	df 91       	pop	r29
    456e:	08 95       	ret

00004570 <BUZ_voidToggle>:


void BUZ_voidToggle(BUZ_Type BUZ_Configuration)
{
    4570:	df 93       	push	r29
    4572:	cf 93       	push	r28
    4574:	00 d0       	rcall	.+0      	; 0x4576 <BUZ_voidToggle+0x6>
    4576:	0f 92       	push	r0
    4578:	cd b7       	in	r28, 0x3d	; 61
    457a:	de b7       	in	r29, 0x3e	; 62
    457c:	69 83       	std	Y+1, r22	; 0x01
    457e:	7a 83       	std	Y+2, r23	; 0x02
    4580:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin);
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	9a 81       	ldd	r25, Y+2	; 0x02
    4586:	69 2f       	mov	r22, r25
    4588:	0e 94 c5 2a 	call	0x558a	; 0x558a <DIO_enumTogglePinValue>
}
    458c:	0f 90       	pop	r0
    458e:	0f 90       	pop	r0
    4590:	0f 90       	pop	r0
    4592:	cf 91       	pop	r28
    4594:	df 91       	pop	r29
    4596:	08 95       	ret

00004598 <LED_voidInit>:

#include <util/delay.h>


void LED_voidInit(LED_Type LED_Configuration)
{
    4598:	df 93       	push	r29
    459a:	cf 93       	push	r28
    459c:	00 d0       	rcall	.+0      	; 0x459e <LED_voidInit+0x6>
    459e:	0f 92       	push	r0
    45a0:	cd b7       	in	r28, 0x3d	; 61
    45a2:	de b7       	in	r29, 0x3e	; 62
    45a4:	69 83       	std	Y+1, r22	; 0x01
    45a6:	7a 83       	std	Y+2, r23	; 0x02
    45a8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_OUTPUT);
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	9a 81       	ldd	r25, Y+2	; 0x02
    45ae:	69 2f       	mov	r22, r25
    45b0:	41 e0       	ldi	r20, 0x01	; 1
    45b2:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <DIO_enumSetPinDirection>
}
    45b6:	0f 90       	pop	r0
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	cf 91       	pop	r28
    45be:	df 91       	pop	r29
    45c0:	08 95       	ret

000045c2 <LED_voidON>:

void LED_voidON(LED_Type LED_Configuration)
{
    45c2:	df 93       	push	r29
    45c4:	cf 93       	push	r28
    45c6:	00 d0       	rcall	.+0      	; 0x45c8 <LED_voidON+0x6>
    45c8:	0f 92       	push	r0
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	69 83       	std	Y+1, r22	; 0x01
    45d0:	7a 83       	std	Y+2, r23	; 0x02
    45d2:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
    45d4:	8b 81       	ldd	r24, Y+3	; 0x03
    45d6:	81 30       	cpi	r24, 0x01	; 1
    45d8:	39 f4       	brne	.+14     	; 0x45e8 <LED_voidON+0x26>
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_HIGH);
    45da:	89 81       	ldd	r24, Y+1	; 0x01
    45dc:	9a 81       	ldd	r25, Y+2	; 0x02
    45de:	69 2f       	mov	r22, r25
    45e0:	41 e0       	ldi	r20, 0x01	; 1
    45e2:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
    45e6:	06 c0       	rjmp	.+12     	; 0x45f4 <LED_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_LOW);
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	9a 81       	ldd	r25, Y+2	; 0x02
    45ec:	69 2f       	mov	r22, r25
    45ee:	40 e0       	ldi	r20, 0x00	; 0
    45f0:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
	}
}
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	08 95       	ret

00004600 <LED_voidOff>:

void LED_voidOff ( LED_Type LED_Configuration )
{
    4600:	df 93       	push	r29
    4602:	cf 93       	push	r28
    4604:	00 d0       	rcall	.+0      	; 0x4606 <LED_voidOff+0x6>
    4606:	0f 92       	push	r0
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
    460c:	69 83       	std	Y+1, r22	; 0x01
    460e:	7a 83       	std	Y+2, r23	; 0x02
    4610:	8b 83       	std	Y+3, r24	; 0x03

	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    4612:	8b 81       	ldd	r24, Y+3	; 0x03
    4614:	81 30       	cpi	r24, 0x01	; 1
    4616:	39 f4       	brne	.+14     	; 0x4626 <LED_voidOff+0x26>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_LOW  );
    4618:	89 81       	ldd	r24, Y+1	; 0x01
    461a:	9a 81       	ldd	r25, Y+2	; 0x02
    461c:	69 2f       	mov	r22, r25
    461e:	40 e0       	ldi	r20, 0x00	; 0
    4620:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>
    4624:	09 c0       	rjmp	.+18     	; 0x4638 <LED_voidOff+0x38>

	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    4626:	8b 81       	ldd	r24, Y+3	; 0x03
    4628:	88 23       	and	r24, r24
    462a:	31 f4       	brne	.+12     	; 0x4638 <LED_voidOff+0x38>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_HIGH  );
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	9a 81       	ldd	r25, Y+2	; 0x02
    4630:	69 2f       	mov	r22, r25
    4632:	41 e0       	ldi	r20, 0x01	; 1
    4634:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <DIO_enumSetPinValue>

	}

}
    4638:	0f 90       	pop	r0
    463a:	0f 90       	pop	r0
    463c:	0f 90       	pop	r0
    463e:	cf 91       	pop	r28
    4640:	df 91       	pop	r29
    4642:	08 95       	ret

00004644 <LED_voidToggle>:


void LED_voidToggle(LED_Type LED_Configuration)
{
    4644:	df 93       	push	r29
    4646:	cf 93       	push	r28
    4648:	00 d0       	rcall	.+0      	; 0x464a <LED_voidToggle+0x6>
    464a:	0f 92       	push	r0
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
    4650:	69 83       	std	Y+1, r22	; 0x01
    4652:	7a 83       	std	Y+2, r23	; 0x02
    4654:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.port, LED_Configuration.pin);
    4656:	89 81       	ldd	r24, Y+1	; 0x01
    4658:	9a 81       	ldd	r25, Y+2	; 0x02
    465a:	69 2f       	mov	r22, r25
    465c:	0e 94 c5 2a 	call	0x558a	; 0x558a <DIO_enumTogglePinValue>
}
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	0f 90       	pop	r0
    4666:	cf 91       	pop	r28
    4668:	df 91       	pop	r29
    466a:	08 95       	ret

0000466c <LED_voidBinaryCounter>:

void LED_voidBinaryCounter(u8 Copy_u8PORT)
{
    466c:	df 93       	push	r29
    466e:	cf 93       	push	r28
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
    4674:	60 97       	sbiw	r28, 0x10	; 16
    4676:	0f b6       	in	r0, 0x3f	; 63
    4678:	f8 94       	cli
    467a:	de bf       	out	0x3e, r29	; 62
    467c:	0f be       	out	0x3f, r0	; 63
    467e:	cd bf       	out	0x3d, r28	; 61
    4680:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enumSetPortDirection( Copy_u8PORT , DIO_PORT_OUTPUT );
    4682:	88 89       	ldd	r24, Y+16	; 0x10
    4684:	6f ef       	ldi	r22, 0xFF	; 255
    4686:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <DIO_enumSetPortDirection>
	u8 i = 0;
    468a:	1f 86       	std	Y+15, r1	; 0x0f
	for(i = 0; i < 10; i++)
    468c:	1f 86       	std	Y+15, r1	; 0x0f
    468e:	79 c0       	rjmp	.+242    	; 0x4782 <LED_voidBinaryCounter+0x116>
	{
		DIO_enumSetPortValue(Copy_u8PORT, i);
    4690:	88 89       	ldd	r24, Y+16	; 0x10
    4692:	6f 85       	ldd	r22, Y+15	; 0x0f
    4694:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <DIO_enumSetPortValue>
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	aa e7       	ldi	r26, 0x7A	; 122
    469e:	b4 e4       	ldi	r27, 0x44	; 68
    46a0:	8b 87       	std	Y+11, r24	; 0x0b
    46a2:	9c 87       	std	Y+12, r25	; 0x0c
    46a4:	ad 87       	std	Y+13, r26	; 0x0d
    46a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    46aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	4a e7       	ldi	r20, 0x7A	; 122
    46b6:	53 e4       	ldi	r21, 0x43	; 67
    46b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46bc:	dc 01       	movw	r26, r24
    46be:	cb 01       	movw	r24, r22
    46c0:	8f 83       	std	Y+7, r24	; 0x07
    46c2:	98 87       	std	Y+8, r25	; 0x08
    46c4:	a9 87       	std	Y+9, r26	; 0x09
    46c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46c8:	6f 81       	ldd	r22, Y+7	; 0x07
    46ca:	78 85       	ldd	r23, Y+8	; 0x08
    46cc:	89 85       	ldd	r24, Y+9	; 0x09
    46ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	40 e8       	ldi	r20, 0x80	; 128
    46d6:	5f e3       	ldi	r21, 0x3F	; 63
    46d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46dc:	88 23       	and	r24, r24
    46de:	2c f4       	brge	.+10     	; 0x46ea <LED_voidBinaryCounter+0x7e>
		__ticks = 1;
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	9e 83       	std	Y+6, r25	; 0x06
    46e6:	8d 83       	std	Y+5, r24	; 0x05
    46e8:	3f c0       	rjmp	.+126    	; 0x4768 <LED_voidBinaryCounter+0xfc>
	else if (__tmp > 65535)
    46ea:	6f 81       	ldd	r22, Y+7	; 0x07
    46ec:	78 85       	ldd	r23, Y+8	; 0x08
    46ee:	89 85       	ldd	r24, Y+9	; 0x09
    46f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	3f ef       	ldi	r19, 0xFF	; 255
    46f6:	4f e7       	ldi	r20, 0x7F	; 127
    46f8:	57 e4       	ldi	r21, 0x47	; 71
    46fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46fe:	18 16       	cp	r1, r24
    4700:	4c f5       	brge	.+82     	; 0x4754 <LED_voidBinaryCounter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4702:	6b 85       	ldd	r22, Y+11	; 0x0b
    4704:	7c 85       	ldd	r23, Y+12	; 0x0c
    4706:	8d 85       	ldd	r24, Y+13	; 0x0d
    4708:	9e 85       	ldd	r25, Y+14	; 0x0e
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e2       	ldi	r20, 0x20	; 32
    4710:	51 e4       	ldi	r21, 0x41	; 65
    4712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	bc 01       	movw	r22, r24
    471c:	cd 01       	movw	r24, r26
    471e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4722:	dc 01       	movw	r26, r24
    4724:	cb 01       	movw	r24, r22
    4726:	9e 83       	std	Y+6, r25	; 0x06
    4728:	8d 83       	std	Y+5, r24	; 0x05
    472a:	0f c0       	rjmp	.+30     	; 0x474a <LED_voidBinaryCounter+0xde>
    472c:	89 e1       	ldi	r24, 0x19	; 25
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	9c 83       	std	Y+4, r25	; 0x04
    4732:	8b 83       	std	Y+3, r24	; 0x03
    4734:	8b 81       	ldd	r24, Y+3	; 0x03
    4736:	9c 81       	ldd	r25, Y+4	; 0x04
    4738:	01 97       	sbiw	r24, 0x01	; 1
    473a:	f1 f7       	brne	.-4      	; 0x4738 <LED_voidBinaryCounter+0xcc>
    473c:	9c 83       	std	Y+4, r25	; 0x04
    473e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4740:	8d 81       	ldd	r24, Y+5	; 0x05
    4742:	9e 81       	ldd	r25, Y+6	; 0x06
    4744:	01 97       	sbiw	r24, 0x01	; 1
    4746:	9e 83       	std	Y+6, r25	; 0x06
    4748:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474a:	8d 81       	ldd	r24, Y+5	; 0x05
    474c:	9e 81       	ldd	r25, Y+6	; 0x06
    474e:	00 97       	sbiw	r24, 0x00	; 0
    4750:	69 f7       	brne	.-38     	; 0x472c <LED_voidBinaryCounter+0xc0>
    4752:	14 c0       	rjmp	.+40     	; 0x477c <LED_voidBinaryCounter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4754:	6f 81       	ldd	r22, Y+7	; 0x07
    4756:	78 85       	ldd	r23, Y+8	; 0x08
    4758:	89 85       	ldd	r24, Y+9	; 0x09
    475a:	9a 85       	ldd	r25, Y+10	; 0x0a
    475c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	9e 83       	std	Y+6, r25	; 0x06
    4766:	8d 83       	std	Y+5, r24	; 0x05
    4768:	8d 81       	ldd	r24, Y+5	; 0x05
    476a:	9e 81       	ldd	r25, Y+6	; 0x06
    476c:	9a 83       	std	Y+2, r25	; 0x02
    476e:	89 83       	std	Y+1, r24	; 0x01
    4770:	89 81       	ldd	r24, Y+1	; 0x01
    4772:	9a 81       	ldd	r25, Y+2	; 0x02
    4774:	01 97       	sbiw	r24, 0x01	; 1
    4776:	f1 f7       	brne	.-4      	; 0x4774 <LED_voidBinaryCounter+0x108>
    4778:	9a 83       	std	Y+2, r25	; 0x02
    477a:	89 83       	std	Y+1, r24	; 0x01

void LED_voidBinaryCounter(u8 Copy_u8PORT)
{
	DIO_enumSetPortDirection( Copy_u8PORT , DIO_PORT_OUTPUT );
	u8 i = 0;
	for(i = 0; i < 10; i++)
    477c:	8f 85       	ldd	r24, Y+15	; 0x0f
    477e:	8f 5f       	subi	r24, 0xFF	; 255
    4780:	8f 87       	std	Y+15, r24	; 0x0f
    4782:	8f 85       	ldd	r24, Y+15	; 0x0f
    4784:	8a 30       	cpi	r24, 0x0A	; 10
    4786:	08 f4       	brcc	.+2      	; 0x478a <LED_voidBinaryCounter+0x11e>
    4788:	83 cf       	rjmp	.-250    	; 0x4690 <LED_voidBinaryCounter+0x24>
	{
		DIO_enumSetPortValue(Copy_u8PORT, i);
		_delay_ms(1000);
	}

}
    478a:	60 96       	adiw	r28, 0x10	; 16
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	08 95       	ret

0000479c <GIE_voidEnable>:
#include "../../4-LIB/BIT_MATH.h"
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(void)
{
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	cd b7       	in	r28, 0x3d	; 61
    47a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I_Bit);
    47a4:	af e5       	ldi	r26, 0x5F	; 95
    47a6:	b0 e0       	ldi	r27, 0x00	; 0
    47a8:	ef e5       	ldi	r30, 0x5F	; 95
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 81       	ld	r24, Z
    47ae:	80 68       	ori	r24, 0x80	; 128
    47b0:	8c 93       	st	X, r24
}
    47b2:	cf 91       	pop	r28
    47b4:	df 91       	pop	r29
    47b6:	08 95       	ret

000047b8 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    47b8:	df 93       	push	r29
    47ba:	cf 93       	push	r28
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, I_Bit);
    47c0:	af e5       	ldi	r26, 0x5F	; 95
    47c2:	b0 e0       	ldi	r27, 0x00	; 0
    47c4:	ef e5       	ldi	r30, 0x5F	; 95
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	80 81       	ld	r24, Z
    47ca:	8f 77       	andi	r24, 0x7F	; 127
    47cc:	8c 93       	st	X, r24
}
    47ce:	cf 91       	pop	r28
    47d0:	df 91       	pop	r29
    47d2:	08 95       	ret

000047d4 <TMR1_voidInitFAST_PWM>:
#include "TMR1_config.h"

static void (*TMR1_CALL_BACK_PF)(void) = NULL;

void TMR1_voidInitFAST_PWM(u16 period_us)
{
    47d4:	df 93       	push	r29
    47d6:	cf 93       	push	r28
    47d8:	00 d0       	rcall	.+0      	; 0x47da <TMR1_voidInitFAST_PWM+0x6>
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	9a 83       	std	Y+2, r25	; 0x02
    47e0:	89 83       	std	Y+1, r24	; 0x01
	/*  Normal port operation, OC1A/OC1B disconnected */
	CLR_BIT(TCCR1A, COM1A1); CLR_BIT(TCCR1A, COM1A1);
    47e2:	af e4       	ldi	r26, 0x4F	; 79
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	ef e4       	ldi	r30, 0x4F	; 79
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 81       	ld	r24, Z
    47ec:	8f 77       	andi	r24, 0x7F	; 127
    47ee:	8c 93       	st	X, r24
    47f0:	af e4       	ldi	r26, 0x4F	; 79
    47f2:	b0 e0       	ldi	r27, 0x00	; 0
    47f4:	ef e4       	ldi	r30, 0x4F	; 79
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	80 81       	ld	r24, Z
    47fa:	8f 77       	andi	r24, 0x7F	; 127
    47fc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B1); CLR_BIT(TCCR1A, COM1B1);
    47fe:	af e4       	ldi	r26, 0x4F	; 79
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	ef e4       	ldi	r30, 0x4F	; 79
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	8f 7d       	andi	r24, 0xDF	; 223
    480a:	8c 93       	st	X, r24
    480c:	af e4       	ldi	r26, 0x4F	; 79
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	ef e4       	ldi	r30, 0x4F	; 79
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	8f 7d       	andi	r24, 0xDF	; 223
    4818:	8c 93       	st	X, r24
	
	/*MODE 14 FAST PWM*/
	SET_BIT(TCCR1B, WGM13); SET_BIT(TCCR1B, WGM12);
    481a:	ae e4       	ldi	r26, 0x4E	; 78
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	ee e4       	ldi	r30, 0x4E	; 78
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	80 61       	ori	r24, 0x10	; 16
    4826:	8c 93       	st	X, r24
    4828:	ae e4       	ldi	r26, 0x4E	; 78
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	ee e4       	ldi	r30, 0x4E	; 78
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	80 81       	ld	r24, Z
    4832:	88 60       	ori	r24, 0x08	; 8
    4834:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11); CLR_BIT(TCCR1A, WGM10);
    4836:	af e4       	ldi	r26, 0x4F	; 79
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	ef e4       	ldi	r30, 0x4F	; 79
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	80 81       	ld	r24, Z
    4840:	82 60       	ori	r24, 0x02	; 2
    4842:	8c 93       	st	X, r24
    4844:	af e4       	ldi	r26, 0x4F	; 79
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	ef e4       	ldi	r30, 0x4F	; 79
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	80 81       	ld	r24, Z
    484e:	8e 7f       	andi	r24, 0xFE	; 254
    4850:	8c 93       	st	X, r24
	
	/* SELECT OC1A MODE */
	TCCR1A &= ~(0b11 << COM1A0);
    4852:	af e4       	ldi	r26, 0x4F	; 79
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	ef e4       	ldi	r30, 0x4F	; 79
    4858:	f0 e0       	ldi	r31, 0x00	; 0
    485a:	80 81       	ld	r24, Z
    485c:	8f 73       	andi	r24, 0x3F	; 63
    485e:	8c 93       	st	X, r24
	TCCR1A |= TMR1_PWM_OC1A_MODE << COM1A0;
    4860:	af e4       	ldi	r26, 0x4F	; 79
    4862:	b0 e0       	ldi	r27, 0x00	; 0
    4864:	ef e4       	ldi	r30, 0x4F	; 79
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	80 81       	ld	r24, Z
    486a:	80 68       	ori	r24, 0x80	; 128
    486c:	8c 93       	st	X, r24

	/* SELECT OC1B MODE */
	TCCR1A &= ~(0b11 << COM1B0);
    486e:	af e4       	ldi	r26, 0x4F	; 79
    4870:	b0 e0       	ldi	r27, 0x00	; 0
    4872:	ef e4       	ldi	r30, 0x4F	; 79
    4874:	f0 e0       	ldi	r31, 0x00	; 0
    4876:	80 81       	ld	r24, Z
    4878:	8f 7c       	andi	r24, 0xCF	; 207
    487a:	8c 93       	st	X, r24
	TCCR1A |= TMR1_PWM_OC1B_MODE << COM1B0;
    487c:	af e4       	ldi	r26, 0x4F	; 79
    487e:	b0 e0       	ldi	r27, 0x00	; 0
    4880:	ef e4       	ldi	r30, 0x4F	; 79
    4882:	f0 e0       	ldi	r31, 0x00	; 0
    4884:	80 81       	ld	r24, Z
    4886:	80 63       	ori	r24, 0x30	; 48
    4888:	8c 93       	st	X, r24

	ICR1A_ALL = period_us;
    488a:	e6 e4       	ldi	r30, 0x46	; 70
    488c:	f0 e0       	ldi	r31, 0x00	; 0
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	9a 81       	ldd	r25, Y+2	; 0x02
    4892:	91 83       	std	Z+1, r25	; 0x01
    4894:	80 83       	st	Z, r24
	
	/* CLOCK SELECT F/8 */ 
	CLR_BIT(TCCR1B, CS12); SET_BIT(TCCR1B, CS11); CLR_BIT(TCCR1B, CS10);
    4896:	ae e4       	ldi	r26, 0x4E	; 78
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	ee e4       	ldi	r30, 0x4E	; 78
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	8b 7f       	andi	r24, 0xFB	; 251
    48a2:	8c 93       	st	X, r24
    48a4:	ae e4       	ldi	r26, 0x4E	; 78
    48a6:	b0 e0       	ldi	r27, 0x00	; 0
    48a8:	ee e4       	ldi	r30, 0x4E	; 78
    48aa:	f0 e0       	ldi	r31, 0x00	; 0
    48ac:	80 81       	ld	r24, Z
    48ae:	82 60       	ori	r24, 0x02	; 2
    48b0:	8c 93       	st	X, r24
    48b2:	ae e4       	ldi	r26, 0x4E	; 78
    48b4:	b0 e0       	ldi	r27, 0x00	; 0
    48b6:	ee e4       	ldi	r30, 0x4E	; 78
    48b8:	f0 e0       	ldi	r31, 0x00	; 0
    48ba:	80 81       	ld	r24, Z
    48bc:	8e 7f       	andi	r24, 0xFE	; 254
    48be:	8c 93       	st	X, r24
}
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	cf 91       	pop	r28
    48c6:	df 91       	pop	r29
    48c8:	08 95       	ret

000048ca <TMR1_voidSetDutyCycle>:

void TMR1_voidSetDutyCycle(u8 channel, u16 DC_us)
{
    48ca:	df 93       	push	r29
    48cc:	cf 93       	push	r28
    48ce:	00 d0       	rcall	.+0      	; 0x48d0 <TMR1_voidSetDutyCycle+0x6>
    48d0:	00 d0       	rcall	.+0      	; 0x48d2 <TMR1_voidSetDutyCycle+0x8>
    48d2:	0f 92       	push	r0
    48d4:	cd b7       	in	r28, 0x3d	; 61
    48d6:	de b7       	in	r29, 0x3e	; 62
    48d8:	89 83       	std	Y+1, r24	; 0x01
    48da:	7b 83       	std	Y+3, r23	; 0x03
    48dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel)
    48de:	89 81       	ldd	r24, Y+1	; 0x01
    48e0:	28 2f       	mov	r18, r24
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	3d 83       	std	Y+5, r19	; 0x05
    48e6:	2c 83       	std	Y+4, r18	; 0x04
    48e8:	8c 81       	ldd	r24, Y+4	; 0x04
    48ea:	9d 81       	ldd	r25, Y+5	; 0x05
    48ec:	00 97       	sbiw	r24, 0x00	; 0
    48ee:	31 f0       	breq	.+12     	; 0x48fc <TMR1_voidSetDutyCycle+0x32>
    48f0:	2c 81       	ldd	r18, Y+4	; 0x04
    48f2:	3d 81       	ldd	r19, Y+5	; 0x05
    48f4:	21 30       	cpi	r18, 0x01	; 1
    48f6:	31 05       	cpc	r19, r1
    48f8:	41 f0       	breq	.+16     	; 0x490a <TMR1_voidSetDutyCycle+0x40>
    48fa:	0d c0       	rjmp	.+26     	; 0x4916 <TMR1_voidSetDutyCycle+0x4c>
	{
	case PWM_OCR1A:	OCR1A_ALL = DC_us; break;
    48fc:	ea e4       	ldi	r30, 0x4A	; 74
    48fe:	f0 e0       	ldi	r31, 0x00	; 0
    4900:	8a 81       	ldd	r24, Y+2	; 0x02
    4902:	9b 81       	ldd	r25, Y+3	; 0x03
    4904:	91 83       	std	Z+1, r25	; 0x01
    4906:	80 83       	st	Z, r24
    4908:	06 c0       	rjmp	.+12     	; 0x4916 <TMR1_voidSetDutyCycle+0x4c>
	case PWM_OCR1B:	OCR1B_ALL = DC_us; break;
    490a:	e8 e4       	ldi	r30, 0x48	; 72
    490c:	f0 e0       	ldi	r31, 0x00	; 0
    490e:	8a 81       	ldd	r24, Y+2	; 0x02
    4910:	9b 81       	ldd	r25, Y+3	; 0x03
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	80 83       	st	Z, r24
	}
}
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	cf 91       	pop	r28
    4922:	df 91       	pop	r29
    4924:	08 95       	ret

00004926 <TMR1_voidICU_Init>:


/* ICU */
void TMR1_voidICU_Init(void)
{
    4926:	df 93       	push	r29
    4928:	cf 93       	push	r28
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
	/* OVF MODE ENABLE */
	CLR_BIT(TCCR1A, WGM10); CLR_BIT(TCCR1A, WGM11);
    492e:	af e4       	ldi	r26, 0x4F	; 79
    4930:	b0 e0       	ldi	r27, 0x00	; 0
    4932:	ef e4       	ldi	r30, 0x4F	; 79
    4934:	f0 e0       	ldi	r31, 0x00	; 0
    4936:	80 81       	ld	r24, Z
    4938:	8e 7f       	andi	r24, 0xFE	; 254
    493a:	8c 93       	st	X, r24
    493c:	af e4       	ldi	r26, 0x4F	; 79
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	ef e4       	ldi	r30, 0x4F	; 79
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	8d 7f       	andi	r24, 0xFD	; 253
    4948:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12); CLR_BIT(TCCR1A, WGM13);
    494a:	ae e4       	ldi	r26, 0x4E	; 78
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	ee e4       	ldi	r30, 0x4E	; 78
    4950:	f0 e0       	ldi	r31, 0x00	; 0
    4952:	80 81       	ld	r24, Z
    4954:	87 7f       	andi	r24, 0xF7	; 247
    4956:	8c 93       	st	X, r24
    4958:	af e4       	ldi	r26, 0x4F	; 79
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	ef e4       	ldi	r30, 0x4F	; 79
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	80 81       	ld	r24, Z
    4962:	8f 7e       	andi	r24, 0xEF	; 239
    4964:	8c 93       	st	X, r24
	
	/* ICU INT ENABLE */
	SET_BIT(TIMSK, 5);
    4966:	a9 e5       	ldi	r26, 0x59	; 89
    4968:	b0 e0       	ldi	r27, 0x00	; 0
    496a:	e9 e5       	ldi	r30, 0x59	; 89
    496c:	f0 e0       	ldi	r31, 0x00	; 0
    496e:	80 81       	ld	r24, Z
    4970:	80 62       	ori	r24, 0x20	; 32
    4972:	8c 93       	st	X, r24
	
	/* CLOCK SELECT F/8 */ 
	CLR_BIT(TCCR1B, CS12); SET_BIT(TCCR1B, CS11); CLR_BIT(TCCR1B, CS10);
    4974:	ae e4       	ldi	r26, 0x4E	; 78
    4976:	b0 e0       	ldi	r27, 0x00	; 0
    4978:	ee e4       	ldi	r30, 0x4E	; 78
    497a:	f0 e0       	ldi	r31, 0x00	; 0
    497c:	80 81       	ld	r24, Z
    497e:	8b 7f       	andi	r24, 0xFB	; 251
    4980:	8c 93       	st	X, r24
    4982:	ae e4       	ldi	r26, 0x4E	; 78
    4984:	b0 e0       	ldi	r27, 0x00	; 0
    4986:	ee e4       	ldi	r30, 0x4E	; 78
    4988:	f0 e0       	ldi	r31, 0x00	; 0
    498a:	80 81       	ld	r24, Z
    498c:	82 60       	ori	r24, 0x02	; 2
    498e:	8c 93       	st	X, r24
    4990:	ae e4       	ldi	r26, 0x4E	; 78
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	ee e4       	ldi	r30, 0x4E	; 78
    4996:	f0 e0       	ldi	r31, 0x00	; 0
    4998:	80 81       	ld	r24, Z
    499a:	8e 7f       	andi	r24, 0xFE	; 254
    499c:	8c 93       	st	X, r24
}
    499e:	cf 91       	pop	r28
    49a0:	df 91       	pop	r29
    49a2:	08 95       	ret

000049a4 <TMR1_u16ICU_Read>:

u16 TMR1_u16ICU_Read(void)
{
    49a4:	df 93       	push	r29
    49a6:	cf 93       	push	r28
    49a8:	cd b7       	in	r28, 0x3d	; 61
    49aa:	de b7       	in	r29, 0x3e	; 62
	return ICR1A_ALL;
    49ac:	e6 e4       	ldi	r30, 0x46	; 70
    49ae:	f0 e0       	ldi	r31, 0x00	; 0
    49b0:	80 81       	ld	r24, Z
    49b2:	91 81       	ldd	r25, Z+1	; 0x01
}
    49b4:	cf 91       	pop	r28
    49b6:	df 91       	pop	r29
    49b8:	08 95       	ret

000049ba <TMR1_voidICU_SetEdge>:

void TMR1_voidICU_SetEdge(u8 edge)
{
    49ba:	df 93       	push	r29
    49bc:	cf 93       	push	r28
    49be:	00 d0       	rcall	.+0      	; 0x49c0 <TMR1_voidICU_SetEdge+0x6>
    49c0:	0f 92       	push	r0
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
    49c8:	89 81       	ldd	r24, Y+1	; 0x01
    49ca:	28 2f       	mov	r18, r24
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	3b 83       	std	Y+3, r19	; 0x03
    49d0:	2a 83       	std	Y+2, r18	; 0x02
    49d2:	8a 81       	ldd	r24, Y+2	; 0x02
    49d4:	9b 81       	ldd	r25, Y+3	; 0x03
    49d6:	00 97       	sbiw	r24, 0x00	; 0
    49d8:	31 f0       	breq	.+12     	; 0x49e6 <TMR1_voidICU_SetEdge+0x2c>
    49da:	2a 81       	ldd	r18, Y+2	; 0x02
    49dc:	3b 81       	ldd	r19, Y+3	; 0x03
    49de:	21 30       	cpi	r18, 0x01	; 1
    49e0:	31 05       	cpc	r19, r1
    49e2:	49 f0       	breq	.+18     	; 0x49f6 <TMR1_voidICU_SetEdge+0x3c>
    49e4:	0f c0       	rjmp	.+30     	; 0x4a04 <TMR1_voidICU_SetEdge+0x4a>
	{
	case ICU_FALLING_EDGE : CLR_BIT(TCCR1B, ICES1); break;
    49e6:	ae e4       	ldi	r26, 0x4E	; 78
    49e8:	b0 e0       	ldi	r27, 0x00	; 0
    49ea:	ee e4       	ldi	r30, 0x4E	; 78
    49ec:	f0 e0       	ldi	r31, 0x00	; 0
    49ee:	80 81       	ld	r24, Z
    49f0:	8f 7b       	andi	r24, 0xBF	; 191
    49f2:	8c 93       	st	X, r24
    49f4:	07 c0       	rjmp	.+14     	; 0x4a04 <TMR1_voidICU_SetEdge+0x4a>
	case ICU_RISING_EDGE  : SET_BIT(TCCR1B, ICES1); break;
    49f6:	ae e4       	ldi	r26, 0x4E	; 78
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	ee e4       	ldi	r30, 0x4E	; 78
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	80 64       	ori	r24, 0x40	; 64
    4a02:	8c 93       	st	X, r24
	}
}
    4a04:	0f 90       	pop	r0
    4a06:	0f 90       	pop	r0
    4a08:	0f 90       	pop	r0
    4a0a:	cf 91       	pop	r28
    4a0c:	df 91       	pop	r29
    4a0e:	08 95       	ret

00004a10 <TMR1_voidSetCallBack>:

void TMR1_voidSetCallBack(void (*pf)(void))
{
    4a10:	df 93       	push	r29
    4a12:	cf 93       	push	r28
    4a14:	00 d0       	rcall	.+0      	; 0x4a16 <TMR1_voidSetCallBack+0x6>
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	9a 83       	std	Y+2, r25	; 0x02
    4a1c:	89 83       	std	Y+1, r24	; 0x01
	TMR1_CALL_BACK_PF = pf;
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	9a 81       	ldd	r25, Y+2	; 0x02
    4a22:	90 93 8b 01 	sts	0x018B, r25
    4a26:	80 93 8a 01 	sts	0x018A, r24
}
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	cf 91       	pop	r28
    4a30:	df 91       	pop	r29
    4a32:	08 95       	ret

00004a34 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    4a34:	1f 92       	push	r1
    4a36:	0f 92       	push	r0
    4a38:	0f b6       	in	r0, 0x3f	; 63
    4a3a:	0f 92       	push	r0
    4a3c:	11 24       	eor	r1, r1
    4a3e:	2f 93       	push	r18
    4a40:	3f 93       	push	r19
    4a42:	4f 93       	push	r20
    4a44:	5f 93       	push	r21
    4a46:	6f 93       	push	r22
    4a48:	7f 93       	push	r23
    4a4a:	8f 93       	push	r24
    4a4c:	9f 93       	push	r25
    4a4e:	af 93       	push	r26
    4a50:	bf 93       	push	r27
    4a52:	ef 93       	push	r30
    4a54:	ff 93       	push	r31
    4a56:	df 93       	push	r29
    4a58:	cf 93       	push	r28
    4a5a:	cd b7       	in	r28, 0x3d	; 61
    4a5c:	de b7       	in	r29, 0x3e	; 62
	TMR1_CALL_BACK_PF();
    4a5e:	e0 91 8a 01 	lds	r30, 0x018A
    4a62:	f0 91 8b 01 	lds	r31, 0x018B
    4a66:	09 95       	icall
}
    4a68:	cf 91       	pop	r28
    4a6a:	df 91       	pop	r29
    4a6c:	ff 91       	pop	r31
    4a6e:	ef 91       	pop	r30
    4a70:	bf 91       	pop	r27
    4a72:	af 91       	pop	r26
    4a74:	9f 91       	pop	r25
    4a76:	8f 91       	pop	r24
    4a78:	7f 91       	pop	r23
    4a7a:	6f 91       	pop	r22
    4a7c:	5f 91       	pop	r21
    4a7e:	4f 91       	pop	r20
    4a80:	3f 91       	pop	r19
    4a82:	2f 91       	pop	r18
    4a84:	0f 90       	pop	r0
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	0f 90       	pop	r0
    4a8a:	1f 90       	pop	r1
    4a8c:	18 95       	reti

00004a8e <TMR2_voidInitCTC>:
#include "TMR2_config.h"

static void (*TMR2_CALL_BACK_PF)(void) = NULL;

void TMR2_voidInitCTC(void)
{
    4a8e:	df 93       	push	r29
    4a90:	cf 93       	push	r28
    4a92:	cd b7       	in	r28, 0x3d	; 61
    4a94:	de b7       	in	r29, 0x3e	; 62
	/* CTC MODE */
	SET_BIT(TCCR2, WGM21);
    4a96:	a5 e4       	ldi	r26, 0x45	; 69
    4a98:	b0 e0       	ldi	r27, 0x00	; 0
    4a9a:	e5 e4       	ldi	r30, 0x45	; 69
    4a9c:	f0 e0       	ldi	r31, 0x00	; 0
    4a9e:	80 81       	ld	r24, Z
    4aa0:	88 60       	ori	r24, 0x08	; 8
    4aa2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM20);
    4aa4:	a5 e4       	ldi	r26, 0x45	; 69
    4aa6:	b0 e0       	ldi	r27, 0x00	; 0
    4aa8:	e5 e4       	ldi	r30, 0x45	; 69
    4aaa:	f0 e0       	ldi	r31, 0x00	; 0
    4aac:	80 81       	ld	r24, Z
    4aae:	8f 7b       	andi	r24, 0xBF	; 191
    4ab0:	8c 93       	st	X, r24
	
	/* SET REQUIRED CTC VAL */
	OCR2 = CTC_VAL;
    4ab2:	e3 e4       	ldi	r30, 0x43	; 67
    4ab4:	f0 e0       	ldi	r31, 0x00	; 0
    4ab6:	8d e7       	ldi	r24, 0x7D	; 125
    4ab8:	80 83       	st	Z, r24

	/*  Normal port operation, OC2 disconnected */
	CLR_BIT(TCCR2, COM20);
    4aba:	a5 e4       	ldi	r26, 0x45	; 69
    4abc:	b0 e0       	ldi	r27, 0x00	; 0
    4abe:	e5 e4       	ldi	r30, 0x45	; 69
    4ac0:	f0 e0       	ldi	r31, 0x00	; 0
    4ac2:	80 81       	ld	r24, Z
    4ac4:	8f 7e       	andi	r24, 0xEF	; 239
    4ac6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM21);
    4ac8:	a5 e4       	ldi	r26, 0x45	; 69
    4aca:	b0 e0       	ldi	r27, 0x00	; 0
    4acc:	e5 e4       	ldi	r30, 0x45	; 69
    4ace:	f0 e0       	ldi	r31, 0x00	; 0
    4ad0:	80 81       	ld	r24, Z
    4ad2:	8f 7d       	andi	r24, 0xDF	; 223
    4ad4:	8c 93       	st	X, r24
	
	/* ENABLE INT*/
	SET_BIT(TIMSK , OCIE2) ;
    4ad6:	a9 e5       	ldi	r26, 0x59	; 89
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	e9 e5       	ldi	r30, 0x59	; 89
    4adc:	f0 e0       	ldi	r31, 0x00	; 0
    4ade:	80 81       	ld	r24, Z
    4ae0:	80 68       	ori	r24, 0x80	; 128
    4ae2:	8c 93       	st	X, r24

	/* CLOCK SELECT F/64 */
	SET_BIT(TCCR2, CS22);
    4ae4:	a5 e4       	ldi	r26, 0x45	; 69
    4ae6:	b0 e0       	ldi	r27, 0x00	; 0
    4ae8:	e5 e4       	ldi	r30, 0x45	; 69
    4aea:	f0 e0       	ldi	r31, 0x00	; 0
    4aec:	80 81       	ld	r24, Z
    4aee:	82 60       	ori	r24, 0x02	; 2
    4af0:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    4af2:	a5 e4       	ldi	r26, 0x45	; 69
    4af4:	b0 e0       	ldi	r27, 0x00	; 0
    4af6:	e5 e4       	ldi	r30, 0x45	; 69
    4af8:	f0 e0       	ldi	r31, 0x00	; 0
    4afa:	80 81       	ld	r24, Z
    4afc:	8b 7f       	andi	r24, 0xFB	; 251
    4afe:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS20);
    4b00:	a5 e4       	ldi	r26, 0x45	; 69
    4b02:	b0 e0       	ldi	r27, 0x00	; 0
    4b04:	e5 e4       	ldi	r30, 0x45	; 69
    4b06:	f0 e0       	ldi	r31, 0x00	; 0
    4b08:	80 81       	ld	r24, Z
    4b0a:	8e 7f       	andi	r24, 0xFE	; 254
    4b0c:	8c 93       	st	X, r24
}
    4b0e:	cf 91       	pop	r28
    4b10:	df 91       	pop	r29
    4b12:	08 95       	ret

00004b14 <TMR2_voidSetCTC>:

void TMR2_voidSetCTC(u8 time)
{
    4b14:	df 93       	push	r29
    4b16:	cf 93       	push	r28
    4b18:	0f 92       	push	r0
    4b1a:	cd b7       	in	r28, 0x3d	; 61
    4b1c:	de b7       	in	r29, 0x3e	; 62
    4b1e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = time;
    4b20:	e3 e4       	ldi	r30, 0x43	; 67
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	80 83       	st	Z, r24
}
    4b28:	0f 90       	pop	r0
    4b2a:	cf 91       	pop	r28
    4b2c:	df 91       	pop	r29
    4b2e:	08 95       	ret

00004b30 <TMR2_voidSetCallBackCTC>:

void TMR2_voidSetCallBackCTC(void (*pf)(void))
{
    4b30:	df 93       	push	r29
    4b32:	cf 93       	push	r28
    4b34:	00 d0       	rcall	.+0      	; 0x4b36 <TMR2_voidSetCallBackCTC+0x6>
    4b36:	cd b7       	in	r28, 0x3d	; 61
    4b38:	de b7       	in	r29, 0x3e	; 62
    4b3a:	9a 83       	std	Y+2, r25	; 0x02
    4b3c:	89 83       	std	Y+1, r24	; 0x01
	 TMR2_CALL_BACK_PF = pf;
    4b3e:	89 81       	ldd	r24, Y+1	; 0x01
    4b40:	9a 81       	ldd	r25, Y+2	; 0x02
    4b42:	90 93 8d 01 	sts	0x018D, r25
    4b46:	80 93 8c 01 	sts	0x018C, r24
}
    4b4a:	0f 90       	pop	r0
    4b4c:	0f 90       	pop	r0
    4b4e:	cf 91       	pop	r28
    4b50:	df 91       	pop	r29
    4b52:	08 95       	ret

00004b54 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    4b54:	1f 92       	push	r1
    4b56:	0f 92       	push	r0
    4b58:	0f b6       	in	r0, 0x3f	; 63
    4b5a:	0f 92       	push	r0
    4b5c:	11 24       	eor	r1, r1
    4b5e:	2f 93       	push	r18
    4b60:	3f 93       	push	r19
    4b62:	4f 93       	push	r20
    4b64:	5f 93       	push	r21
    4b66:	6f 93       	push	r22
    4b68:	7f 93       	push	r23
    4b6a:	8f 93       	push	r24
    4b6c:	9f 93       	push	r25
    4b6e:	af 93       	push	r26
    4b70:	bf 93       	push	r27
    4b72:	ef 93       	push	r30
    4b74:	ff 93       	push	r31
    4b76:	df 93       	push	r29
    4b78:	cf 93       	push	r28
    4b7a:	cd b7       	in	r28, 0x3d	; 61
    4b7c:	de b7       	in	r29, 0x3e	; 62
	TMR2_CALL_BACK_PF();
    4b7e:	e0 91 8c 01 	lds	r30, 0x018C
    4b82:	f0 91 8d 01 	lds	r31, 0x018D
    4b86:	09 95       	icall
}
    4b88:	cf 91       	pop	r28
    4b8a:	df 91       	pop	r29
    4b8c:	ff 91       	pop	r31
    4b8e:	ef 91       	pop	r30
    4b90:	bf 91       	pop	r27
    4b92:	af 91       	pop	r26
    4b94:	9f 91       	pop	r25
    4b96:	8f 91       	pop	r24
    4b98:	7f 91       	pop	r23
    4b9a:	6f 91       	pop	r22
    4b9c:	5f 91       	pop	r21
    4b9e:	4f 91       	pop	r20
    4ba0:	3f 91       	pop	r19
    4ba2:	2f 91       	pop	r18
    4ba4:	0f 90       	pop	r0
    4ba6:	0f be       	out	0x3f, r0	; 63
    4ba8:	0f 90       	pop	r0
    4baa:	1f 90       	pop	r1
    4bac:	18 95       	reti

00004bae <EXTI_voidEnable>:
void (*EXTI0_CallBackPF)(void) = NULL;
void (*EXTI1_CallBackPF)(void) = NULL;
void (*EXTI2_CallBackPF)(void) = NULL;

void EXTI_voidEnable(u8 line, u8 mode)
{
    4bae:	df 93       	push	r29
    4bb0:	cf 93       	push	r28
    4bb2:	cd b7       	in	r28, 0x3d	; 61
    4bb4:	de b7       	in	r29, 0x3e	; 62
    4bb6:	2a 97       	sbiw	r28, 0x0a	; 10
    4bb8:	0f b6       	in	r0, 0x3f	; 63
    4bba:	f8 94       	cli
    4bbc:	de bf       	out	0x3e, r29	; 62
    4bbe:	0f be       	out	0x3f, r0	; 63
    4bc0:	cd bf       	out	0x3d, r28	; 61
    4bc2:	89 83       	std	Y+1, r24	; 0x01
    4bc4:	6a 83       	std	Y+2, r22	; 0x02
	switch(line)
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	28 2f       	mov	r18, r24
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	3a 87       	std	Y+10, r19	; 0x0a
    4bce:	29 87       	std	Y+9, r18	; 0x09
    4bd0:	89 85       	ldd	r24, Y+9	; 0x09
    4bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd4:	81 30       	cpi	r24, 0x01	; 1
    4bd6:	91 05       	cpc	r25, r1
    4bd8:	61 f0       	breq	.+24     	; 0x4bf2 <EXTI_voidEnable+0x44>
    4bda:	29 85       	ldd	r18, Y+9	; 0x09
    4bdc:	3a 85       	ldd	r19, Y+10	; 0x0a
    4bde:	22 30       	cpi	r18, 0x02	; 2
    4be0:	31 05       	cpc	r19, r1
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <EXTI_voidEnable+0x38>
    4be4:	ca c0       	rjmp	.+404    	; 0x4d7a <EXTI_voidEnable+0x1cc>
    4be6:	89 85       	ldd	r24, Y+9	; 0x09
    4be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bea:	00 97       	sbiw	r24, 0x00	; 0
    4bec:	09 f4       	brne	.+2      	; 0x4bf0 <EXTI_voidEnable+0x42>
    4bee:	63 c0       	rjmp	.+198    	; 0x4cb6 <EXTI_voidEnable+0x108>
    4bf0:	e9 c0       	rjmp	.+466    	; 0x4dc4 <EXTI_voidEnable+0x216>
	{
	case EXTI_LINE1 :
		switch(mode)
    4bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf4:	28 2f       	mov	r18, r24
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	38 87       	std	Y+8, r19	; 0x08
    4bfa:	2f 83       	std	Y+7, r18	; 0x07
    4bfc:	8f 81       	ldd	r24, Y+7	; 0x07
    4bfe:	98 85       	ldd	r25, Y+8	; 0x08
    4c00:	81 30       	cpi	r24, 0x01	; 1
    4c02:	91 05       	cpc	r25, r1
    4c04:	21 f1       	breq	.+72     	; 0x4c4e <EXTI_voidEnable+0xa0>
    4c06:	2f 81       	ldd	r18, Y+7	; 0x07
    4c08:	38 85       	ldd	r19, Y+8	; 0x08
    4c0a:	22 30       	cpi	r18, 0x02	; 2
    4c0c:	31 05       	cpc	r19, r1
    4c0e:	2c f4       	brge	.+10     	; 0x4c1a <EXTI_voidEnable+0x6c>
    4c10:	8f 81       	ldd	r24, Y+7	; 0x07
    4c12:	98 85       	ldd	r25, Y+8	; 0x08
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	61 f0       	breq	.+24     	; 0x4c30 <EXTI_voidEnable+0x82>
    4c18:	46 c0       	rjmp	.+140    	; 0x4ca6 <EXTI_voidEnable+0xf8>
    4c1a:	2f 81       	ldd	r18, Y+7	; 0x07
    4c1c:	38 85       	ldd	r19, Y+8	; 0x08
    4c1e:	22 30       	cpi	r18, 0x02	; 2
    4c20:	31 05       	cpc	r19, r1
    4c22:	21 f1       	breq	.+72     	; 0x4c6c <EXTI_voidEnable+0xbe>
    4c24:	8f 81       	ldd	r24, Y+7	; 0x07
    4c26:	98 85       	ldd	r25, Y+8	; 0x08
    4c28:	83 30       	cpi	r24, 0x03	; 3
    4c2a:	91 05       	cpc	r25, r1
    4c2c:	71 f1       	breq	.+92     	; 0x4c8a <EXTI_voidEnable+0xdc>
    4c2e:	3b c0       	rjmp	.+118    	; 0x4ca6 <EXTI_voidEnable+0xf8>
		{
			case LOW_LEVEL      : CLR_BIT(MCUCR, ISC11); CLR_BIT(MCUCR, ISC10); break;
    4c30:	a5 e5       	ldi	r26, 0x55	; 85
    4c32:	b0 e0       	ldi	r27, 0x00	; 0
    4c34:	e5 e5       	ldi	r30, 0x55	; 85
    4c36:	f0 e0       	ldi	r31, 0x00	; 0
    4c38:	80 81       	ld	r24, Z
    4c3a:	87 7f       	andi	r24, 0xF7	; 247
    4c3c:	8c 93       	st	X, r24
    4c3e:	a5 e5       	ldi	r26, 0x55	; 85
    4c40:	b0 e0       	ldi	r27, 0x00	; 0
    4c42:	e5 e5       	ldi	r30, 0x55	; 85
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	80 81       	ld	r24, Z
    4c48:	8b 7f       	andi	r24, 0xFB	; 251
    4c4a:	8c 93       	st	X, r24
    4c4c:	2c c0       	rjmp	.+88     	; 0x4ca6 <EXTI_voidEnable+0xf8>
			case LOGICAL_CHANGE : CLR_BIT(MCUCR, ISC11); SET_BIT(MCUCR, ISC10); break;
    4c4e:	a5 e5       	ldi	r26, 0x55	; 85
    4c50:	b0 e0       	ldi	r27, 0x00	; 0
    4c52:	e5 e5       	ldi	r30, 0x55	; 85
    4c54:	f0 e0       	ldi	r31, 0x00	; 0
    4c56:	80 81       	ld	r24, Z
    4c58:	87 7f       	andi	r24, 0xF7	; 247
    4c5a:	8c 93       	st	X, r24
    4c5c:	a5 e5       	ldi	r26, 0x55	; 85
    4c5e:	b0 e0       	ldi	r27, 0x00	; 0
    4c60:	e5 e5       	ldi	r30, 0x55	; 85
    4c62:	f0 e0       	ldi	r31, 0x00	; 0
    4c64:	80 81       	ld	r24, Z
    4c66:	84 60       	ori	r24, 0x04	; 4
    4c68:	8c 93       	st	X, r24
    4c6a:	1d c0       	rjmp	.+58     	; 0x4ca6 <EXTI_voidEnable+0xf8>
			case FALLING_EDGE   : SET_BIT(MCUCR, ISC11); CLR_BIT(MCUCR, ISC10); break;
    4c6c:	a5 e5       	ldi	r26, 0x55	; 85
    4c6e:	b0 e0       	ldi	r27, 0x00	; 0
    4c70:	e5 e5       	ldi	r30, 0x55	; 85
    4c72:	f0 e0       	ldi	r31, 0x00	; 0
    4c74:	80 81       	ld	r24, Z
    4c76:	88 60       	ori	r24, 0x08	; 8
    4c78:	8c 93       	st	X, r24
    4c7a:	a5 e5       	ldi	r26, 0x55	; 85
    4c7c:	b0 e0       	ldi	r27, 0x00	; 0
    4c7e:	e5 e5       	ldi	r30, 0x55	; 85
    4c80:	f0 e0       	ldi	r31, 0x00	; 0
    4c82:	80 81       	ld	r24, Z
    4c84:	8b 7f       	andi	r24, 0xFB	; 251
    4c86:	8c 93       	st	X, r24
    4c88:	0e c0       	rjmp	.+28     	; 0x4ca6 <EXTI_voidEnable+0xf8>
			case RISING_EDGE    : SET_BIT(MCUCR, ISC11); SET_BIT(MCUCR, ISC10); break;
    4c8a:	a5 e5       	ldi	r26, 0x55	; 85
    4c8c:	b0 e0       	ldi	r27, 0x00	; 0
    4c8e:	e5 e5       	ldi	r30, 0x55	; 85
    4c90:	f0 e0       	ldi	r31, 0x00	; 0
    4c92:	80 81       	ld	r24, Z
    4c94:	88 60       	ori	r24, 0x08	; 8
    4c96:	8c 93       	st	X, r24
    4c98:	a5 e5       	ldi	r26, 0x55	; 85
    4c9a:	b0 e0       	ldi	r27, 0x00	; 0
    4c9c:	e5 e5       	ldi	r30, 0x55	; 85
    4c9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ca0:	80 81       	ld	r24, Z
    4ca2:	84 60       	ori	r24, 0x04	; 4
    4ca4:	8c 93       	st	X, r24
		}
		SET_BIT(GICR, INTF1);
    4ca6:	ab e5       	ldi	r26, 0x5B	; 91
    4ca8:	b0 e0       	ldi	r27, 0x00	; 0
    4caa:	eb e5       	ldi	r30, 0x5B	; 91
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	80 68       	ori	r24, 0x80	; 128
    4cb2:	8c 93       	st	X, r24
    4cb4:	87 c0       	rjmp	.+270    	; 0x4dc4 <EXTI_voidEnable+0x216>
		break;

	case EXTI_LINE0 :
		switch(mode)
    4cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb8:	28 2f       	mov	r18, r24
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	3e 83       	std	Y+6, r19	; 0x06
    4cbe:	2d 83       	std	Y+5, r18	; 0x05
    4cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc4:	81 30       	cpi	r24, 0x01	; 1
    4cc6:	91 05       	cpc	r25, r1
    4cc8:	21 f1       	breq	.+72     	; 0x4d12 <EXTI_voidEnable+0x164>
    4cca:	2d 81       	ldd	r18, Y+5	; 0x05
    4ccc:	3e 81       	ldd	r19, Y+6	; 0x06
    4cce:	22 30       	cpi	r18, 0x02	; 2
    4cd0:	31 05       	cpc	r19, r1
    4cd2:	2c f4       	brge	.+10     	; 0x4cde <EXTI_voidEnable+0x130>
    4cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd8:	00 97       	sbiw	r24, 0x00	; 0
    4cda:	61 f0       	breq	.+24     	; 0x4cf4 <EXTI_voidEnable+0x146>
    4cdc:	46 c0       	rjmp	.+140    	; 0x4d6a <EXTI_voidEnable+0x1bc>
    4cde:	2d 81       	ldd	r18, Y+5	; 0x05
    4ce0:	3e 81       	ldd	r19, Y+6	; 0x06
    4ce2:	22 30       	cpi	r18, 0x02	; 2
    4ce4:	31 05       	cpc	r19, r1
    4ce6:	21 f1       	breq	.+72     	; 0x4d30 <EXTI_voidEnable+0x182>
    4ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cea:	9e 81       	ldd	r25, Y+6	; 0x06
    4cec:	83 30       	cpi	r24, 0x03	; 3
    4cee:	91 05       	cpc	r25, r1
    4cf0:	71 f1       	breq	.+92     	; 0x4d4e <EXTI_voidEnable+0x1a0>
    4cf2:	3b c0       	rjmp	.+118    	; 0x4d6a <EXTI_voidEnable+0x1bc>
		{
			case LOW_LEVEL      : CLR_BIT(MCUCR, ISC01); CLR_BIT(MCUCR, ISC00); break;	
    4cf4:	a5 e5       	ldi	r26, 0x55	; 85
    4cf6:	b0 e0       	ldi	r27, 0x00	; 0
    4cf8:	e5 e5       	ldi	r30, 0x55	; 85
    4cfa:	f0 e0       	ldi	r31, 0x00	; 0
    4cfc:	80 81       	ld	r24, Z
    4cfe:	8d 7f       	andi	r24, 0xFD	; 253
    4d00:	8c 93       	st	X, r24
    4d02:	a5 e5       	ldi	r26, 0x55	; 85
    4d04:	b0 e0       	ldi	r27, 0x00	; 0
    4d06:	e5 e5       	ldi	r30, 0x55	; 85
    4d08:	f0 e0       	ldi	r31, 0x00	; 0
    4d0a:	80 81       	ld	r24, Z
    4d0c:	8e 7f       	andi	r24, 0xFE	; 254
    4d0e:	8c 93       	st	X, r24
    4d10:	2c c0       	rjmp	.+88     	; 0x4d6a <EXTI_voidEnable+0x1bc>
			case LOGICAL_CHANGE : CLR_BIT(MCUCR, ISC01); SET_BIT(MCUCR, ISC00); break;	
    4d12:	a5 e5       	ldi	r26, 0x55	; 85
    4d14:	b0 e0       	ldi	r27, 0x00	; 0
    4d16:	e5 e5       	ldi	r30, 0x55	; 85
    4d18:	f0 e0       	ldi	r31, 0x00	; 0
    4d1a:	80 81       	ld	r24, Z
    4d1c:	8d 7f       	andi	r24, 0xFD	; 253
    4d1e:	8c 93       	st	X, r24
    4d20:	a5 e5       	ldi	r26, 0x55	; 85
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
    4d24:	e5 e5       	ldi	r30, 0x55	; 85
    4d26:	f0 e0       	ldi	r31, 0x00	; 0
    4d28:	80 81       	ld	r24, Z
    4d2a:	81 60       	ori	r24, 0x01	; 1
    4d2c:	8c 93       	st	X, r24
    4d2e:	1d c0       	rjmp	.+58     	; 0x4d6a <EXTI_voidEnable+0x1bc>
			case FALLING_EDGE   : SET_BIT(MCUCR, ISC01); CLR_BIT(MCUCR, ISC00); break;	
    4d30:	a5 e5       	ldi	r26, 0x55	; 85
    4d32:	b0 e0       	ldi	r27, 0x00	; 0
    4d34:	e5 e5       	ldi	r30, 0x55	; 85
    4d36:	f0 e0       	ldi	r31, 0x00	; 0
    4d38:	80 81       	ld	r24, Z
    4d3a:	82 60       	ori	r24, 0x02	; 2
    4d3c:	8c 93       	st	X, r24
    4d3e:	a5 e5       	ldi	r26, 0x55	; 85
    4d40:	b0 e0       	ldi	r27, 0x00	; 0
    4d42:	e5 e5       	ldi	r30, 0x55	; 85
    4d44:	f0 e0       	ldi	r31, 0x00	; 0
    4d46:	80 81       	ld	r24, Z
    4d48:	8e 7f       	andi	r24, 0xFE	; 254
    4d4a:	8c 93       	st	X, r24
    4d4c:	0e c0       	rjmp	.+28     	; 0x4d6a <EXTI_voidEnable+0x1bc>
			case RISING_EDGE    : SET_BIT(MCUCR, ISC01); SET_BIT(MCUCR, ISC00); break;	
    4d4e:	a5 e5       	ldi	r26, 0x55	; 85
    4d50:	b0 e0       	ldi	r27, 0x00	; 0
    4d52:	e5 e5       	ldi	r30, 0x55	; 85
    4d54:	f0 e0       	ldi	r31, 0x00	; 0
    4d56:	80 81       	ld	r24, Z
    4d58:	82 60       	ori	r24, 0x02	; 2
    4d5a:	8c 93       	st	X, r24
    4d5c:	a5 e5       	ldi	r26, 0x55	; 85
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	e5 e5       	ldi	r30, 0x55	; 85
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	80 81       	ld	r24, Z
    4d66:	81 60       	ori	r24, 0x01	; 1
    4d68:	8c 93       	st	X, r24
		}
		SET_BIT(GICR, INTF0);
    4d6a:	ab e5       	ldi	r26, 0x5B	; 91
    4d6c:	b0 e0       	ldi	r27, 0x00	; 0
    4d6e:	eb e5       	ldi	r30, 0x5B	; 91
    4d70:	f0 e0       	ldi	r31, 0x00	; 0
    4d72:	80 81       	ld	r24, Z
    4d74:	80 64       	ori	r24, 0x40	; 64
    4d76:	8c 93       	st	X, r24
    4d78:	25 c0       	rjmp	.+74     	; 0x4dc4 <EXTI_voidEnable+0x216>
		break;

	case EXTI_LINE2 : 
		switch(mode)
    4d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7c:	28 2f       	mov	r18, r24
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	3c 83       	std	Y+4, r19	; 0x04
    4d82:	2b 83       	std	Y+3, r18	; 0x03
    4d84:	8b 81       	ldd	r24, Y+3	; 0x03
    4d86:	9c 81       	ldd	r25, Y+4	; 0x04
    4d88:	00 97       	sbiw	r24, 0x00	; 0
    4d8a:	31 f0       	breq	.+12     	; 0x4d98 <EXTI_voidEnable+0x1ea>
    4d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    4d8e:	3c 81       	ldd	r19, Y+4	; 0x04
    4d90:	21 30       	cpi	r18, 0x01	; 1
    4d92:	31 05       	cpc	r19, r1
    4d94:	49 f0       	breq	.+18     	; 0x4da8 <EXTI_voidEnable+0x1fa>
    4d96:	0f c0       	rjmp	.+30     	; 0x4db6 <EXTI_voidEnable+0x208>
		{
			case EXTI2_FALLING_EDGE : CLR_BIT(MCUCSR, ISC2); break;
    4d98:	a4 e5       	ldi	r26, 0x54	; 84
    4d9a:	b0 e0       	ldi	r27, 0x00	; 0
    4d9c:	e4 e5       	ldi	r30, 0x54	; 84
    4d9e:	f0 e0       	ldi	r31, 0x00	; 0
    4da0:	80 81       	ld	r24, Z
    4da2:	8f 7b       	andi	r24, 0xBF	; 191
    4da4:	8c 93       	st	X, r24
    4da6:	07 c0       	rjmp	.+14     	; 0x4db6 <EXTI_voidEnable+0x208>
			case EXTI2_RISING_EDGE  : SET_BIT(MCUCSR, ISC2); break;
    4da8:	a4 e5       	ldi	r26, 0x54	; 84
    4daa:	b0 e0       	ldi	r27, 0x00	; 0
    4dac:	e4 e5       	ldi	r30, 0x54	; 84
    4dae:	f0 e0       	ldi	r31, 0x00	; 0
    4db0:	80 81       	ld	r24, Z
    4db2:	80 64       	ori	r24, 0x40	; 64
    4db4:	8c 93       	st	X, r24
		}	
		SET_BIT(GICR, INTF2);
    4db6:	ab e5       	ldi	r26, 0x5B	; 91
    4db8:	b0 e0       	ldi	r27, 0x00	; 0
    4dba:	eb e5       	ldi	r30, 0x5B	; 91
    4dbc:	f0 e0       	ldi	r31, 0x00	; 0
    4dbe:	80 81       	ld	r24, Z
    4dc0:	80 62       	ori	r24, 0x20	; 32
    4dc2:	8c 93       	st	X, r24
		break;
	}
}
    4dc4:	2a 96       	adiw	r28, 0x0a	; 10
    4dc6:	0f b6       	in	r0, 0x3f	; 63
    4dc8:	f8 94       	cli
    4dca:	de bf       	out	0x3e, r29	; 62
    4dcc:	0f be       	out	0x3f, r0	; 63
    4dce:	cd bf       	out	0x3d, r28	; 61
    4dd0:	cf 91       	pop	r28
    4dd2:	df 91       	pop	r29
    4dd4:	08 95       	ret

00004dd6 <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(u8 line, void(*pf)(void))
{
    4dd6:	df 93       	push	r29
    4dd8:	cf 93       	push	r28
    4dda:	00 d0       	rcall	.+0      	; 0x4ddc <EXTI_voidSetCallBack+0x6>
    4ddc:	00 d0       	rcall	.+0      	; 0x4dde <EXTI_voidSetCallBack+0x8>
    4dde:	0f 92       	push	r0
    4de0:	cd b7       	in	r28, 0x3d	; 61
    4de2:	de b7       	in	r29, 0x3e	; 62
    4de4:	89 83       	std	Y+1, r24	; 0x01
    4de6:	7b 83       	std	Y+3, r23	; 0x03
    4de8:	6a 83       	std	Y+2, r22	; 0x02
	switch(line)
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	28 2f       	mov	r18, r24
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	3d 83       	std	Y+5, r19	; 0x05
    4df2:	2c 83       	std	Y+4, r18	; 0x04
    4df4:	8c 81       	ldd	r24, Y+4	; 0x04
    4df6:	9d 81       	ldd	r25, Y+5	; 0x05
    4df8:	81 30       	cpi	r24, 0x01	; 1
    4dfa:	91 05       	cpc	r25, r1
    4dfc:	81 f0       	breq	.+32     	; 0x4e1e <EXTI_voidSetCallBack+0x48>
    4dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    4e00:	3d 81       	ldd	r19, Y+5	; 0x05
    4e02:	22 30       	cpi	r18, 0x02	; 2
    4e04:	31 05       	cpc	r19, r1
    4e06:	91 f0       	breq	.+36     	; 0x4e2c <EXTI_voidSetCallBack+0x56>
    4e08:	8c 81       	ldd	r24, Y+4	; 0x04
    4e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	a1 f4       	brne	.+40     	; 0x4e38 <EXTI_voidSetCallBack+0x62>
	{
	case EXTI_LINE0 : EXTI0_CallBackPF = pf; break;
    4e10:	8a 81       	ldd	r24, Y+2	; 0x02
    4e12:	9b 81       	ldd	r25, Y+3	; 0x03
    4e14:	90 93 8f 01 	sts	0x018F, r25
    4e18:	80 93 8e 01 	sts	0x018E, r24
    4e1c:	0d c0       	rjmp	.+26     	; 0x4e38 <EXTI_voidSetCallBack+0x62>
	case EXTI_LINE1 : EXTI1_CallBackPF = pf; break;
    4e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e20:	9b 81       	ldd	r25, Y+3	; 0x03
    4e22:	90 93 91 01 	sts	0x0191, r25
    4e26:	80 93 90 01 	sts	0x0190, r24
    4e2a:	06 c0       	rjmp	.+12     	; 0x4e38 <EXTI_voidSetCallBack+0x62>
	case EXTI_LINE2 : EXTI2_CallBackPF = pf; break;
    4e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e30:	90 93 93 01 	sts	0x0193, r25
    4e34:	80 93 92 01 	sts	0x0192, r24
	}
}
    4e38:	0f 90       	pop	r0
    4e3a:	0f 90       	pop	r0
    4e3c:	0f 90       	pop	r0
    4e3e:	0f 90       	pop	r0
    4e40:	0f 90       	pop	r0
    4e42:	cf 91       	pop	r28
    4e44:	df 91       	pop	r29
    4e46:	08 95       	ret

00004e48 <EXTI_voidClearFlag>:

void EXTI_voidClearFlag(u8 line)
{
    4e48:	df 93       	push	r29
    4e4a:	cf 93       	push	r28
    4e4c:	00 d0       	rcall	.+0      	; 0x4e4e <EXTI_voidClearFlag+0x6>
    4e4e:	0f 92       	push	r0
    4e50:	cd b7       	in	r28, 0x3d	; 61
    4e52:	de b7       	in	r29, 0x3e	; 62
    4e54:	89 83       	std	Y+1, r24	; 0x01
    switch(line)
    4e56:	89 81       	ldd	r24, Y+1	; 0x01
    4e58:	28 2f       	mov	r18, r24
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	3b 83       	std	Y+3, r19	; 0x03
    4e5e:	2a 83       	std	Y+2, r18	; 0x02
    4e60:	8a 81       	ldd	r24, Y+2	; 0x02
    4e62:	9b 81       	ldd	r25, Y+3	; 0x03
    4e64:	81 30       	cpi	r24, 0x01	; 1
    4e66:	91 05       	cpc	r25, r1
    4e68:	89 f0       	breq	.+34     	; 0x4e8c <EXTI_voidClearFlag+0x44>
    4e6a:	2a 81       	ldd	r18, Y+2	; 0x02
    4e6c:	3b 81       	ldd	r19, Y+3	; 0x03
    4e6e:	22 30       	cpi	r18, 0x02	; 2
    4e70:	31 05       	cpc	r19, r1
    4e72:	a1 f0       	breq	.+40     	; 0x4e9c <EXTI_voidClearFlag+0x54>
    4e74:	8a 81       	ldd	r24, Y+2	; 0x02
    4e76:	9b 81       	ldd	r25, Y+3	; 0x03
    4e78:	00 97       	sbiw	r24, 0x00	; 0
    4e7a:	b9 f4       	brne	.+46     	; 0x4eaa <EXTI_voidClearFlag+0x62>
    {
        case EXTI_LINE0: SET_BIT(GIFR, INTF0); break;
    4e7c:	aa e5       	ldi	r26, 0x5A	; 90
    4e7e:	b0 e0       	ldi	r27, 0x00	; 0
    4e80:	ea e5       	ldi	r30, 0x5A	; 90
    4e82:	f0 e0       	ldi	r31, 0x00	; 0
    4e84:	80 81       	ld	r24, Z
    4e86:	80 64       	ori	r24, 0x40	; 64
    4e88:	8c 93       	st	X, r24
    4e8a:	0f c0       	rjmp	.+30     	; 0x4eaa <EXTI_voidClearFlag+0x62>
        case EXTI_LINE1: SET_BIT(GIFR, INTF1); break;
    4e8c:	aa e5       	ldi	r26, 0x5A	; 90
    4e8e:	b0 e0       	ldi	r27, 0x00	; 0
    4e90:	ea e5       	ldi	r30, 0x5A	; 90
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	80 81       	ld	r24, Z
    4e96:	80 68       	ori	r24, 0x80	; 128
    4e98:	8c 93       	st	X, r24
    4e9a:	07 c0       	rjmp	.+14     	; 0x4eaa <EXTI_voidClearFlag+0x62>
        case EXTI_LINE2: SET_BIT(GIFR, INTF2); break;
    4e9c:	aa e5       	ldi	r26, 0x5A	; 90
    4e9e:	b0 e0       	ldi	r27, 0x00	; 0
    4ea0:	ea e5       	ldi	r30, 0x5A	; 90
    4ea2:	f0 e0       	ldi	r31, 0x00	; 0
    4ea4:	80 81       	ld	r24, Z
    4ea6:	80 62       	ori	r24, 0x20	; 32
    4ea8:	8c 93       	st	X, r24
    }
}
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	0f 90       	pop	r0
    4eb0:	cf 91       	pop	r28
    4eb2:	df 91       	pop	r29
    4eb4:	08 95       	ret

00004eb6 <__vector_1>:



void  __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    4eb6:	1f 92       	push	r1
    4eb8:	0f 92       	push	r0
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	0f 92       	push	r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	2f 93       	push	r18
    4ec2:	3f 93       	push	r19
    4ec4:	4f 93       	push	r20
    4ec6:	5f 93       	push	r21
    4ec8:	6f 93       	push	r22
    4eca:	7f 93       	push	r23
    4ecc:	8f 93       	push	r24
    4ece:	9f 93       	push	r25
    4ed0:	af 93       	push	r26
    4ed2:	bf 93       	push	r27
    4ed4:	ef 93       	push	r30
    4ed6:	ff 93       	push	r31
    4ed8:	df 93       	push	r29
    4eda:	cf 93       	push	r28
    4edc:	cd b7       	in	r28, 0x3d	; 61
    4ede:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBackPF();
    4ee0:	e0 91 8e 01 	lds	r30, 0x018E
    4ee4:	f0 91 8f 01 	lds	r31, 0x018F
    4ee8:	09 95       	icall
}
    4eea:	cf 91       	pop	r28
    4eec:	df 91       	pop	r29
    4eee:	ff 91       	pop	r31
    4ef0:	ef 91       	pop	r30
    4ef2:	bf 91       	pop	r27
    4ef4:	af 91       	pop	r26
    4ef6:	9f 91       	pop	r25
    4ef8:	8f 91       	pop	r24
    4efa:	7f 91       	pop	r23
    4efc:	6f 91       	pop	r22
    4efe:	5f 91       	pop	r21
    4f00:	4f 91       	pop	r20
    4f02:	3f 91       	pop	r19
    4f04:	2f 91       	pop	r18
    4f06:	0f 90       	pop	r0
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	0f 90       	pop	r0
    4f0c:	1f 90       	pop	r1
    4f0e:	18 95       	reti

00004f10 <__vector_2>:

void  __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    4f10:	1f 92       	push	r1
    4f12:	0f 92       	push	r0
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	0f 92       	push	r0
    4f18:	11 24       	eor	r1, r1
    4f1a:	2f 93       	push	r18
    4f1c:	3f 93       	push	r19
    4f1e:	4f 93       	push	r20
    4f20:	5f 93       	push	r21
    4f22:	6f 93       	push	r22
    4f24:	7f 93       	push	r23
    4f26:	8f 93       	push	r24
    4f28:	9f 93       	push	r25
    4f2a:	af 93       	push	r26
    4f2c:	bf 93       	push	r27
    4f2e:	ef 93       	push	r30
    4f30:	ff 93       	push	r31
    4f32:	df 93       	push	r29
    4f34:	cf 93       	push	r28
    4f36:	cd b7       	in	r28, 0x3d	; 61
    4f38:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CallBackPF();
    4f3a:	e0 91 90 01 	lds	r30, 0x0190
    4f3e:	f0 91 91 01 	lds	r31, 0x0191
    4f42:	09 95       	icall
}
    4f44:	cf 91       	pop	r28
    4f46:	df 91       	pop	r29
    4f48:	ff 91       	pop	r31
    4f4a:	ef 91       	pop	r30
    4f4c:	bf 91       	pop	r27
    4f4e:	af 91       	pop	r26
    4f50:	9f 91       	pop	r25
    4f52:	8f 91       	pop	r24
    4f54:	7f 91       	pop	r23
    4f56:	6f 91       	pop	r22
    4f58:	5f 91       	pop	r21
    4f5a:	4f 91       	pop	r20
    4f5c:	3f 91       	pop	r19
    4f5e:	2f 91       	pop	r18
    4f60:	0f 90       	pop	r0
    4f62:	0f be       	out	0x3f, r0	; 63
    4f64:	0f 90       	pop	r0
    4f66:	1f 90       	pop	r1
    4f68:	18 95       	reti

00004f6a <__vector_3>:

void  __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    4f6a:	1f 92       	push	r1
    4f6c:	0f 92       	push	r0
    4f6e:	0f b6       	in	r0, 0x3f	; 63
    4f70:	0f 92       	push	r0
    4f72:	11 24       	eor	r1, r1
    4f74:	2f 93       	push	r18
    4f76:	3f 93       	push	r19
    4f78:	4f 93       	push	r20
    4f7a:	5f 93       	push	r21
    4f7c:	6f 93       	push	r22
    4f7e:	7f 93       	push	r23
    4f80:	8f 93       	push	r24
    4f82:	9f 93       	push	r25
    4f84:	af 93       	push	r26
    4f86:	bf 93       	push	r27
    4f88:	ef 93       	push	r30
    4f8a:	ff 93       	push	r31
    4f8c:	df 93       	push	r29
    4f8e:	cf 93       	push	r28
    4f90:	cd b7       	in	r28, 0x3d	; 61
    4f92:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CallBackPF();
    4f94:	e0 91 92 01 	lds	r30, 0x0192
    4f98:	f0 91 93 01 	lds	r31, 0x0193
    4f9c:	09 95       	icall
}
    4f9e:	cf 91       	pop	r28
    4fa0:	df 91       	pop	r29
    4fa2:	ff 91       	pop	r31
    4fa4:	ef 91       	pop	r30
    4fa6:	bf 91       	pop	r27
    4fa8:	af 91       	pop	r26
    4faa:	9f 91       	pop	r25
    4fac:	8f 91       	pop	r24
    4fae:	7f 91       	pop	r23
    4fb0:	6f 91       	pop	r22
    4fb2:	5f 91       	pop	r21
    4fb4:	4f 91       	pop	r20
    4fb6:	3f 91       	pop	r19
    4fb8:	2f 91       	pop	r18
    4fba:	0f 90       	pop	r0
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	0f 90       	pop	r0
    4fc0:	1f 90       	pop	r1
    4fc2:	18 95       	reti

00004fc4 <DIO_enumSetPinDirection>:




DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    4fc4:	df 93       	push	r29
    4fc6:	cf 93       	push	r28
    4fc8:	cd b7       	in	r28, 0x3d	; 61
    4fca:	de b7       	in	r29, 0x3e	; 62
    4fcc:	28 97       	sbiw	r28, 0x08	; 8
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	de bf       	out	0x3e, r29	; 62
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	cd bf       	out	0x3d, r28	; 61
    4fd8:	8a 83       	std	Y+2, r24	; 0x02
    4fda:	6b 83       	std	Y+3, r22	; 0x03
    4fdc:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    4fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe4:	84 30       	cpi	r24, 0x04	; 4
    4fe6:	08 f0       	brcs	.+2      	; 0x4fea <DIO_enumSetPinDirection+0x26>
    4fe8:	f1 c0       	rjmp	.+482    	; 0x51cc <DIO_enumSetPinDirection+0x208>
    4fea:	8b 81       	ldd	r24, Y+3	; 0x03
    4fec:	88 30       	cpi	r24, 0x08	; 8
    4fee:	08 f0       	brcs	.+2      	; 0x4ff2 <DIO_enumSetPinDirection+0x2e>
    4ff0:	ed c0       	rjmp	.+474    	; 0x51cc <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    4ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ff4:	81 30       	cpi	r24, 0x01	; 1
    4ff6:	09 f0       	breq	.+2      	; 0x4ffa <DIO_enumSetPinDirection+0x36>
    4ff8:	6f c0       	rjmp	.+222    	; 0x50d8 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffc:	28 2f       	mov	r18, r24
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	38 87       	std	Y+8, r19	; 0x08
    5002:	2f 83       	std	Y+7, r18	; 0x07
    5004:	8f 81       	ldd	r24, Y+7	; 0x07
    5006:	98 85       	ldd	r25, Y+8	; 0x08
    5008:	81 30       	cpi	r24, 0x01	; 1
    500a:	91 05       	cpc	r25, r1
    500c:	49 f1       	breq	.+82     	; 0x5060 <DIO_enumSetPinDirection+0x9c>
    500e:	2f 81       	ldd	r18, Y+7	; 0x07
    5010:	38 85       	ldd	r19, Y+8	; 0x08
    5012:	22 30       	cpi	r18, 0x02	; 2
    5014:	31 05       	cpc	r19, r1
    5016:	2c f4       	brge	.+10     	; 0x5022 <DIO_enumSetPinDirection+0x5e>
    5018:	8f 81       	ldd	r24, Y+7	; 0x07
    501a:	98 85       	ldd	r25, Y+8	; 0x08
    501c:	00 97       	sbiw	r24, 0x00	; 0
    501e:	61 f0       	breq	.+24     	; 0x5038 <DIO_enumSetPinDirection+0x74>
    5020:	d6 c0       	rjmp	.+428    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
    5022:	2f 81       	ldd	r18, Y+7	; 0x07
    5024:	38 85       	ldd	r19, Y+8	; 0x08
    5026:	22 30       	cpi	r18, 0x02	; 2
    5028:	31 05       	cpc	r19, r1
    502a:	71 f1       	breq	.+92     	; 0x5088 <DIO_enumSetPinDirection+0xc4>
    502c:	8f 81       	ldd	r24, Y+7	; 0x07
    502e:	98 85       	ldd	r25, Y+8	; 0x08
    5030:	83 30       	cpi	r24, 0x03	; 3
    5032:	91 05       	cpc	r25, r1
    5034:	e9 f1       	breq	.+122    	; 0x50b0 <DIO_enumSetPinDirection+0xec>
    5036:	cb c0       	rjmp	.+406    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    5038:	aa e3       	ldi	r26, 0x3A	; 58
    503a:	b0 e0       	ldi	r27, 0x00	; 0
    503c:	ea e3       	ldi	r30, 0x3A	; 58
    503e:	f0 e0       	ldi	r31, 0x00	; 0
    5040:	80 81       	ld	r24, Z
    5042:	48 2f       	mov	r20, r24
    5044:	8b 81       	ldd	r24, Y+3	; 0x03
    5046:	28 2f       	mov	r18, r24
    5048:	30 e0       	ldi	r19, 0x00	; 0
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	02 2e       	mov	r0, r18
    5050:	02 c0       	rjmp	.+4      	; 0x5056 <DIO_enumSetPinDirection+0x92>
    5052:	88 0f       	add	r24, r24
    5054:	99 1f       	adc	r25, r25
    5056:	0a 94       	dec	r0
    5058:	e2 f7       	brpl	.-8      	; 0x5052 <DIO_enumSetPinDirection+0x8e>
    505a:	84 2b       	or	r24, r20
    505c:	8c 93       	st	X, r24
    505e:	b7 c0       	rjmp	.+366    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    5060:	a7 e3       	ldi	r26, 0x37	; 55
    5062:	b0 e0       	ldi	r27, 0x00	; 0
    5064:	e7 e3       	ldi	r30, 0x37	; 55
    5066:	f0 e0       	ldi	r31, 0x00	; 0
    5068:	80 81       	ld	r24, Z
    506a:	48 2f       	mov	r20, r24
    506c:	8b 81       	ldd	r24, Y+3	; 0x03
    506e:	28 2f       	mov	r18, r24
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	81 e0       	ldi	r24, 0x01	; 1
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	02 2e       	mov	r0, r18
    5078:	02 c0       	rjmp	.+4      	; 0x507e <DIO_enumSetPinDirection+0xba>
    507a:	88 0f       	add	r24, r24
    507c:	99 1f       	adc	r25, r25
    507e:	0a 94       	dec	r0
    5080:	e2 f7       	brpl	.-8      	; 0x507a <DIO_enumSetPinDirection+0xb6>
    5082:	84 2b       	or	r24, r20
    5084:	8c 93       	st	X, r24
    5086:	a3 c0       	rjmp	.+326    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    5088:	a4 e3       	ldi	r26, 0x34	; 52
    508a:	b0 e0       	ldi	r27, 0x00	; 0
    508c:	e4 e3       	ldi	r30, 0x34	; 52
    508e:	f0 e0       	ldi	r31, 0x00	; 0
    5090:	80 81       	ld	r24, Z
    5092:	48 2f       	mov	r20, r24
    5094:	8b 81       	ldd	r24, Y+3	; 0x03
    5096:	28 2f       	mov	r18, r24
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	02 2e       	mov	r0, r18
    50a0:	02 c0       	rjmp	.+4      	; 0x50a6 <DIO_enumSetPinDirection+0xe2>
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	0a 94       	dec	r0
    50a8:	e2 f7       	brpl	.-8      	; 0x50a2 <DIO_enumSetPinDirection+0xde>
    50aa:	84 2b       	or	r24, r20
    50ac:	8c 93       	st	X, r24
    50ae:	8f c0       	rjmp	.+286    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    50b0:	a1 e3       	ldi	r26, 0x31	; 49
    50b2:	b0 e0       	ldi	r27, 0x00	; 0
    50b4:	e1 e3       	ldi	r30, 0x31	; 49
    50b6:	f0 e0       	ldi	r31, 0x00	; 0
    50b8:	80 81       	ld	r24, Z
    50ba:	48 2f       	mov	r20, r24
    50bc:	8b 81       	ldd	r24, Y+3	; 0x03
    50be:	28 2f       	mov	r18, r24
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	02 2e       	mov	r0, r18
    50c8:	02 c0       	rjmp	.+4      	; 0x50ce <DIO_enumSetPinDirection+0x10a>
    50ca:	88 0f       	add	r24, r24
    50cc:	99 1f       	adc	r25, r25
    50ce:	0a 94       	dec	r0
    50d0:	e2 f7       	brpl	.-8      	; 0x50ca <DIO_enumSetPinDirection+0x106>
    50d2:	84 2b       	or	r24, r20
    50d4:	8c 93       	st	X, r24
    50d6:	7b c0       	rjmp	.+246    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    50d8:	8c 81       	ldd	r24, Y+4	; 0x04
    50da:	88 23       	and	r24, r24
    50dc:	09 f0       	breq	.+2      	; 0x50e0 <DIO_enumSetPinDirection+0x11c>
    50de:	74 c0       	rjmp	.+232    	; 0x51c8 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    50e0:	8a 81       	ldd	r24, Y+2	; 0x02
    50e2:	28 2f       	mov	r18, r24
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	3e 83       	std	Y+6, r19	; 0x06
    50e8:	2d 83       	std	Y+5, r18	; 0x05
    50ea:	8d 81       	ldd	r24, Y+5	; 0x05
    50ec:	9e 81       	ldd	r25, Y+6	; 0x06
    50ee:	81 30       	cpi	r24, 0x01	; 1
    50f0:	91 05       	cpc	r25, r1
    50f2:	59 f1       	breq	.+86     	; 0x514a <DIO_enumSetPinDirection+0x186>
    50f4:	2d 81       	ldd	r18, Y+5	; 0x05
    50f6:	3e 81       	ldd	r19, Y+6	; 0x06
    50f8:	22 30       	cpi	r18, 0x02	; 2
    50fa:	31 05       	cpc	r19, r1
    50fc:	2c f4       	brge	.+10     	; 0x5108 <DIO_enumSetPinDirection+0x144>
    50fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5100:	9e 81       	ldd	r25, Y+6	; 0x06
    5102:	00 97       	sbiw	r24, 0x00	; 0
    5104:	69 f0       	breq	.+26     	; 0x5120 <DIO_enumSetPinDirection+0x15c>
    5106:	63 c0       	rjmp	.+198    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
    5108:	2d 81       	ldd	r18, Y+5	; 0x05
    510a:	3e 81       	ldd	r19, Y+6	; 0x06
    510c:	22 30       	cpi	r18, 0x02	; 2
    510e:	31 05       	cpc	r19, r1
    5110:	89 f1       	breq	.+98     	; 0x5174 <DIO_enumSetPinDirection+0x1b0>
    5112:	8d 81       	ldd	r24, Y+5	; 0x05
    5114:	9e 81       	ldd	r25, Y+6	; 0x06
    5116:	83 30       	cpi	r24, 0x03	; 3
    5118:	91 05       	cpc	r25, r1
    511a:	09 f4       	brne	.+2      	; 0x511e <DIO_enumSetPinDirection+0x15a>
    511c:	40 c0       	rjmp	.+128    	; 0x519e <DIO_enumSetPinDirection+0x1da>
    511e:	57 c0       	rjmp	.+174    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    5120:	aa e3       	ldi	r26, 0x3A	; 58
    5122:	b0 e0       	ldi	r27, 0x00	; 0
    5124:	ea e3       	ldi	r30, 0x3A	; 58
    5126:	f0 e0       	ldi	r31, 0x00	; 0
    5128:	80 81       	ld	r24, Z
    512a:	48 2f       	mov	r20, r24
    512c:	8b 81       	ldd	r24, Y+3	; 0x03
    512e:	28 2f       	mov	r18, r24
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	81 e0       	ldi	r24, 0x01	; 1
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	02 2e       	mov	r0, r18
    5138:	02 c0       	rjmp	.+4      	; 0x513e <DIO_enumSetPinDirection+0x17a>
    513a:	88 0f       	add	r24, r24
    513c:	99 1f       	adc	r25, r25
    513e:	0a 94       	dec	r0
    5140:	e2 f7       	brpl	.-8      	; 0x513a <DIO_enumSetPinDirection+0x176>
    5142:	80 95       	com	r24
    5144:	84 23       	and	r24, r20
    5146:	8c 93       	st	X, r24
    5148:	42 c0       	rjmp	.+132    	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    514a:	a7 e3       	ldi	r26, 0x37	; 55
    514c:	b0 e0       	ldi	r27, 0x00	; 0
    514e:	e7 e3       	ldi	r30, 0x37	; 55
    5150:	f0 e0       	ldi	r31, 0x00	; 0
    5152:	80 81       	ld	r24, Z
    5154:	48 2f       	mov	r20, r24
    5156:	8b 81       	ldd	r24, Y+3	; 0x03
    5158:	28 2f       	mov	r18, r24
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	02 2e       	mov	r0, r18
    5162:	02 c0       	rjmp	.+4      	; 0x5168 <DIO_enumSetPinDirection+0x1a4>
    5164:	88 0f       	add	r24, r24
    5166:	99 1f       	adc	r25, r25
    5168:	0a 94       	dec	r0
    516a:	e2 f7       	brpl	.-8      	; 0x5164 <DIO_enumSetPinDirection+0x1a0>
    516c:	80 95       	com	r24
    516e:	84 23       	and	r24, r20
    5170:	8c 93       	st	X, r24
    5172:	2d c0       	rjmp	.+90     	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    5174:	a4 e3       	ldi	r26, 0x34	; 52
    5176:	b0 e0       	ldi	r27, 0x00	; 0
    5178:	e4 e3       	ldi	r30, 0x34	; 52
    517a:	f0 e0       	ldi	r31, 0x00	; 0
    517c:	80 81       	ld	r24, Z
    517e:	48 2f       	mov	r20, r24
    5180:	8b 81       	ldd	r24, Y+3	; 0x03
    5182:	28 2f       	mov	r18, r24
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	02 2e       	mov	r0, r18
    518c:	02 c0       	rjmp	.+4      	; 0x5192 <DIO_enumSetPinDirection+0x1ce>
    518e:	88 0f       	add	r24, r24
    5190:	99 1f       	adc	r25, r25
    5192:	0a 94       	dec	r0
    5194:	e2 f7       	brpl	.-8      	; 0x518e <DIO_enumSetPinDirection+0x1ca>
    5196:	80 95       	com	r24
    5198:	84 23       	and	r24, r20
    519a:	8c 93       	st	X, r24
    519c:	18 c0       	rjmp	.+48     	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    519e:	a1 e3       	ldi	r26, 0x31	; 49
    51a0:	b0 e0       	ldi	r27, 0x00	; 0
    51a2:	e1 e3       	ldi	r30, 0x31	; 49
    51a4:	f0 e0       	ldi	r31, 0x00	; 0
    51a6:	80 81       	ld	r24, Z
    51a8:	48 2f       	mov	r20, r24
    51aa:	8b 81       	ldd	r24, Y+3	; 0x03
    51ac:	28 2f       	mov	r18, r24
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	02 2e       	mov	r0, r18
    51b6:	02 c0       	rjmp	.+4      	; 0x51bc <DIO_enumSetPinDirection+0x1f8>
    51b8:	88 0f       	add	r24, r24
    51ba:	99 1f       	adc	r25, r25
    51bc:	0a 94       	dec	r0
    51be:	e2 f7       	brpl	.-8      	; 0x51b8 <DIO_enumSetPinDirection+0x1f4>
    51c0:	80 95       	com	r24
    51c2:	84 23       	and	r24, r20
    51c4:	8c 93       	st	X, r24
    51c6:	03 c0       	rjmp	.+6      	; 0x51ce <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    51c8:	19 82       	std	Y+1, r1	; 0x01
    51ca:	01 c0       	rjmp	.+2      	; 0x51ce <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    51cc:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    51ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    51d0:	28 96       	adiw	r28, 0x08	; 8
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	f8 94       	cli
    51d6:	de bf       	out	0x3e, r29	; 62
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	cd bf       	out	0x3d, r28	; 61
    51dc:	cf 91       	pop	r28
    51de:	df 91       	pop	r29
    51e0:	08 95       	ret

000051e2 <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    51e2:	df 93       	push	r29
    51e4:	cf 93       	push	r28
    51e6:	cd b7       	in	r28, 0x3d	; 61
    51e8:	de b7       	in	r29, 0x3e	; 62
    51ea:	28 97       	sbiw	r28, 0x08	; 8
    51ec:	0f b6       	in	r0, 0x3f	; 63
    51ee:	f8 94       	cli
    51f0:	de bf       	out	0x3e, r29	; 62
    51f2:	0f be       	out	0x3f, r0	; 63
    51f4:	cd bf       	out	0x3d, r28	; 61
    51f6:	8a 83       	std	Y+2, r24	; 0x02
    51f8:	6b 83       	std	Y+3, r22	; 0x03
    51fa:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    5200:	8a 81       	ldd	r24, Y+2	; 0x02
    5202:	84 30       	cpi	r24, 0x04	; 4
    5204:	08 f0       	brcs	.+2      	; 0x5208 <DIO_enumSetPinValue+0x26>
    5206:	f1 c0       	rjmp	.+482    	; 0x53ea <DIO_enumSetPinValue+0x208>
    5208:	8b 81       	ldd	r24, Y+3	; 0x03
    520a:	88 30       	cpi	r24, 0x08	; 8
    520c:	08 f0       	brcs	.+2      	; 0x5210 <DIO_enumSetPinValue+0x2e>
    520e:	ed c0       	rjmp	.+474    	; 0x53ea <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    5210:	8c 81       	ldd	r24, Y+4	; 0x04
    5212:	81 30       	cpi	r24, 0x01	; 1
    5214:	09 f0       	breq	.+2      	; 0x5218 <DIO_enumSetPinValue+0x36>
    5216:	6f c0       	rjmp	.+222    	; 0x52f6 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    5218:	8a 81       	ldd	r24, Y+2	; 0x02
    521a:	28 2f       	mov	r18, r24
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	38 87       	std	Y+8, r19	; 0x08
    5220:	2f 83       	std	Y+7, r18	; 0x07
    5222:	8f 81       	ldd	r24, Y+7	; 0x07
    5224:	98 85       	ldd	r25, Y+8	; 0x08
    5226:	81 30       	cpi	r24, 0x01	; 1
    5228:	91 05       	cpc	r25, r1
    522a:	49 f1       	breq	.+82     	; 0x527e <DIO_enumSetPinValue+0x9c>
    522c:	2f 81       	ldd	r18, Y+7	; 0x07
    522e:	38 85       	ldd	r19, Y+8	; 0x08
    5230:	22 30       	cpi	r18, 0x02	; 2
    5232:	31 05       	cpc	r19, r1
    5234:	2c f4       	brge	.+10     	; 0x5240 <DIO_enumSetPinValue+0x5e>
    5236:	8f 81       	ldd	r24, Y+7	; 0x07
    5238:	98 85       	ldd	r25, Y+8	; 0x08
    523a:	00 97       	sbiw	r24, 0x00	; 0
    523c:	61 f0       	breq	.+24     	; 0x5256 <DIO_enumSetPinValue+0x74>
    523e:	d6 c0       	rjmp	.+428    	; 0x53ec <DIO_enumSetPinValue+0x20a>
    5240:	2f 81       	ldd	r18, Y+7	; 0x07
    5242:	38 85       	ldd	r19, Y+8	; 0x08
    5244:	22 30       	cpi	r18, 0x02	; 2
    5246:	31 05       	cpc	r19, r1
    5248:	71 f1       	breq	.+92     	; 0x52a6 <DIO_enumSetPinValue+0xc4>
    524a:	8f 81       	ldd	r24, Y+7	; 0x07
    524c:	98 85       	ldd	r25, Y+8	; 0x08
    524e:	83 30       	cpi	r24, 0x03	; 3
    5250:	91 05       	cpc	r25, r1
    5252:	e9 f1       	breq	.+122    	; 0x52ce <DIO_enumSetPinValue+0xec>
    5254:	cb c0       	rjmp	.+406    	; 0x53ec <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    5256:	ab e3       	ldi	r26, 0x3B	; 59
    5258:	b0 e0       	ldi	r27, 0x00	; 0
    525a:	eb e3       	ldi	r30, 0x3B	; 59
    525c:	f0 e0       	ldi	r31, 0x00	; 0
    525e:	80 81       	ld	r24, Z
    5260:	48 2f       	mov	r20, r24
    5262:	8b 81       	ldd	r24, Y+3	; 0x03
    5264:	28 2f       	mov	r18, r24
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	81 e0       	ldi	r24, 0x01	; 1
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	02 2e       	mov	r0, r18
    526e:	02 c0       	rjmp	.+4      	; 0x5274 <DIO_enumSetPinValue+0x92>
    5270:	88 0f       	add	r24, r24
    5272:	99 1f       	adc	r25, r25
    5274:	0a 94       	dec	r0
    5276:	e2 f7       	brpl	.-8      	; 0x5270 <DIO_enumSetPinValue+0x8e>
    5278:	84 2b       	or	r24, r20
    527a:	8c 93       	st	X, r24
    527c:	b7 c0       	rjmp	.+366    	; 0x53ec <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    527e:	a8 e3       	ldi	r26, 0x38	; 56
    5280:	b0 e0       	ldi	r27, 0x00	; 0
    5282:	e8 e3       	ldi	r30, 0x38	; 56
    5284:	f0 e0       	ldi	r31, 0x00	; 0
    5286:	80 81       	ld	r24, Z
    5288:	48 2f       	mov	r20, r24
    528a:	8b 81       	ldd	r24, Y+3	; 0x03
    528c:	28 2f       	mov	r18, r24
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	02 2e       	mov	r0, r18
    5296:	02 c0       	rjmp	.+4      	; 0x529c <DIO_enumSetPinValue+0xba>
    5298:	88 0f       	add	r24, r24
    529a:	99 1f       	adc	r25, r25
    529c:	0a 94       	dec	r0
    529e:	e2 f7       	brpl	.-8      	; 0x5298 <DIO_enumSetPinValue+0xb6>
    52a0:	84 2b       	or	r24, r20
    52a2:	8c 93       	st	X, r24
    52a4:	a3 c0       	rjmp	.+326    	; 0x53ec <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    52a6:	a5 e3       	ldi	r26, 0x35	; 53
    52a8:	b0 e0       	ldi	r27, 0x00	; 0
    52aa:	e5 e3       	ldi	r30, 0x35	; 53
    52ac:	f0 e0       	ldi	r31, 0x00	; 0
    52ae:	80 81       	ld	r24, Z
    52b0:	48 2f       	mov	r20, r24
    52b2:	8b 81       	ldd	r24, Y+3	; 0x03
    52b4:	28 2f       	mov	r18, r24
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	02 2e       	mov	r0, r18
    52be:	02 c0       	rjmp	.+4      	; 0x52c4 <DIO_enumSetPinValue+0xe2>
    52c0:	88 0f       	add	r24, r24
    52c2:	99 1f       	adc	r25, r25
    52c4:	0a 94       	dec	r0
    52c6:	e2 f7       	brpl	.-8      	; 0x52c0 <DIO_enumSetPinValue+0xde>
    52c8:	84 2b       	or	r24, r20
    52ca:	8c 93       	st	X, r24
    52cc:	8f c0       	rjmp	.+286    	; 0x53ec <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    52ce:	a2 e3       	ldi	r26, 0x32	; 50
    52d0:	b0 e0       	ldi	r27, 0x00	; 0
    52d2:	e2 e3       	ldi	r30, 0x32	; 50
    52d4:	f0 e0       	ldi	r31, 0x00	; 0
    52d6:	80 81       	ld	r24, Z
    52d8:	48 2f       	mov	r20, r24
    52da:	8b 81       	ldd	r24, Y+3	; 0x03
    52dc:	28 2f       	mov	r18, r24
    52de:	30 e0       	ldi	r19, 0x00	; 0
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	02 2e       	mov	r0, r18
    52e6:	02 c0       	rjmp	.+4      	; 0x52ec <DIO_enumSetPinValue+0x10a>
    52e8:	88 0f       	add	r24, r24
    52ea:	99 1f       	adc	r25, r25
    52ec:	0a 94       	dec	r0
    52ee:	e2 f7       	brpl	.-8      	; 0x52e8 <DIO_enumSetPinValue+0x106>
    52f0:	84 2b       	or	r24, r20
    52f2:	8c 93       	st	X, r24
    52f4:	7b c0       	rjmp	.+246    	; 0x53ec <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    52f6:	8c 81       	ldd	r24, Y+4	; 0x04
    52f8:	88 23       	and	r24, r24
    52fa:	09 f0       	breq	.+2      	; 0x52fe <DIO_enumSetPinValue+0x11c>
    52fc:	74 c0       	rjmp	.+232    	; 0x53e6 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    52fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5300:	28 2f       	mov	r18, r24
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	3e 83       	std	Y+6, r19	; 0x06
    5306:	2d 83       	std	Y+5, r18	; 0x05
    5308:	8d 81       	ldd	r24, Y+5	; 0x05
    530a:	9e 81       	ldd	r25, Y+6	; 0x06
    530c:	81 30       	cpi	r24, 0x01	; 1
    530e:	91 05       	cpc	r25, r1
    5310:	59 f1       	breq	.+86     	; 0x5368 <DIO_enumSetPinValue+0x186>
    5312:	2d 81       	ldd	r18, Y+5	; 0x05
    5314:	3e 81       	ldd	r19, Y+6	; 0x06
    5316:	22 30       	cpi	r18, 0x02	; 2
    5318:	31 05       	cpc	r19, r1
    531a:	2c f4       	brge	.+10     	; 0x5326 <DIO_enumSetPinValue+0x144>
    531c:	8d 81       	ldd	r24, Y+5	; 0x05
    531e:	9e 81       	ldd	r25, Y+6	; 0x06
    5320:	00 97       	sbiw	r24, 0x00	; 0
    5322:	69 f0       	breq	.+26     	; 0x533e <DIO_enumSetPinValue+0x15c>
    5324:	63 c0       	rjmp	.+198    	; 0x53ec <DIO_enumSetPinValue+0x20a>
    5326:	2d 81       	ldd	r18, Y+5	; 0x05
    5328:	3e 81       	ldd	r19, Y+6	; 0x06
    532a:	22 30       	cpi	r18, 0x02	; 2
    532c:	31 05       	cpc	r19, r1
    532e:	89 f1       	breq	.+98     	; 0x5392 <DIO_enumSetPinValue+0x1b0>
    5330:	8d 81       	ldd	r24, Y+5	; 0x05
    5332:	9e 81       	ldd	r25, Y+6	; 0x06
    5334:	83 30       	cpi	r24, 0x03	; 3
    5336:	91 05       	cpc	r25, r1
    5338:	09 f4       	brne	.+2      	; 0x533c <DIO_enumSetPinValue+0x15a>
    533a:	40 c0       	rjmp	.+128    	; 0x53bc <DIO_enumSetPinValue+0x1da>
    533c:	57 c0       	rjmp	.+174    	; 0x53ec <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    533e:	ab e3       	ldi	r26, 0x3B	; 59
    5340:	b0 e0       	ldi	r27, 0x00	; 0
    5342:	eb e3       	ldi	r30, 0x3B	; 59
    5344:	f0 e0       	ldi	r31, 0x00	; 0
    5346:	80 81       	ld	r24, Z
    5348:	48 2f       	mov	r20, r24
    534a:	8b 81       	ldd	r24, Y+3	; 0x03
    534c:	28 2f       	mov	r18, r24
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	02 2e       	mov	r0, r18
    5356:	02 c0       	rjmp	.+4      	; 0x535c <DIO_enumSetPinValue+0x17a>
    5358:	88 0f       	add	r24, r24
    535a:	99 1f       	adc	r25, r25
    535c:	0a 94       	dec	r0
    535e:	e2 f7       	brpl	.-8      	; 0x5358 <DIO_enumSetPinValue+0x176>
    5360:	80 95       	com	r24
    5362:	84 23       	and	r24, r20
    5364:	8c 93       	st	X, r24
    5366:	42 c0       	rjmp	.+132    	; 0x53ec <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    5368:	a8 e3       	ldi	r26, 0x38	; 56
    536a:	b0 e0       	ldi	r27, 0x00	; 0
    536c:	e8 e3       	ldi	r30, 0x38	; 56
    536e:	f0 e0       	ldi	r31, 0x00	; 0
    5370:	80 81       	ld	r24, Z
    5372:	48 2f       	mov	r20, r24
    5374:	8b 81       	ldd	r24, Y+3	; 0x03
    5376:	28 2f       	mov	r18, r24
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	02 2e       	mov	r0, r18
    5380:	02 c0       	rjmp	.+4      	; 0x5386 <DIO_enumSetPinValue+0x1a4>
    5382:	88 0f       	add	r24, r24
    5384:	99 1f       	adc	r25, r25
    5386:	0a 94       	dec	r0
    5388:	e2 f7       	brpl	.-8      	; 0x5382 <DIO_enumSetPinValue+0x1a0>
    538a:	80 95       	com	r24
    538c:	84 23       	and	r24, r20
    538e:	8c 93       	st	X, r24
    5390:	2d c0       	rjmp	.+90     	; 0x53ec <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    5392:	a5 e3       	ldi	r26, 0x35	; 53
    5394:	b0 e0       	ldi	r27, 0x00	; 0
    5396:	e5 e3       	ldi	r30, 0x35	; 53
    5398:	f0 e0       	ldi	r31, 0x00	; 0
    539a:	80 81       	ld	r24, Z
    539c:	48 2f       	mov	r20, r24
    539e:	8b 81       	ldd	r24, Y+3	; 0x03
    53a0:	28 2f       	mov	r18, r24
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	81 e0       	ldi	r24, 0x01	; 1
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	02 2e       	mov	r0, r18
    53aa:	02 c0       	rjmp	.+4      	; 0x53b0 <DIO_enumSetPinValue+0x1ce>
    53ac:	88 0f       	add	r24, r24
    53ae:	99 1f       	adc	r25, r25
    53b0:	0a 94       	dec	r0
    53b2:	e2 f7       	brpl	.-8      	; 0x53ac <DIO_enumSetPinValue+0x1ca>
    53b4:	80 95       	com	r24
    53b6:	84 23       	and	r24, r20
    53b8:	8c 93       	st	X, r24
    53ba:	18 c0       	rjmp	.+48     	; 0x53ec <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    53bc:	a2 e3       	ldi	r26, 0x32	; 50
    53be:	b0 e0       	ldi	r27, 0x00	; 0
    53c0:	e2 e3       	ldi	r30, 0x32	; 50
    53c2:	f0 e0       	ldi	r31, 0x00	; 0
    53c4:	80 81       	ld	r24, Z
    53c6:	48 2f       	mov	r20, r24
    53c8:	8b 81       	ldd	r24, Y+3	; 0x03
    53ca:	28 2f       	mov	r18, r24
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	02 2e       	mov	r0, r18
    53d4:	02 c0       	rjmp	.+4      	; 0x53da <DIO_enumSetPinValue+0x1f8>
    53d6:	88 0f       	add	r24, r24
    53d8:	99 1f       	adc	r25, r25
    53da:	0a 94       	dec	r0
    53dc:	e2 f7       	brpl	.-8      	; 0x53d6 <DIO_enumSetPinValue+0x1f4>
    53de:	80 95       	com	r24
    53e0:	84 23       	and	r24, r20
    53e2:	8c 93       	st	X, r24
    53e4:	03 c0       	rjmp	.+6      	; 0x53ec <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    53e6:	19 82       	std	Y+1, r1	; 0x01
    53e8:	01 c0       	rjmp	.+2      	; 0x53ec <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    53ea:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    53ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    53ee:	28 96       	adiw	r28, 0x08	; 8
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	08 95       	ret

00005400 <DIO_enumGetPinValue>:



DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    5400:	df 93       	push	r29
    5402:	cf 93       	push	r28
    5404:	cd b7       	in	r28, 0x3d	; 61
    5406:	de b7       	in	r29, 0x3e	; 62
    5408:	27 97       	sbiw	r28, 0x07	; 7
    540a:	0f b6       	in	r0, 0x3f	; 63
    540c:	f8 94       	cli
    540e:	de bf       	out	0x3e, r29	; 62
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	cd bf       	out	0x3d, r28	; 61
    5414:	8a 83       	std	Y+2, r24	; 0x02
    5416:	6b 83       	std	Y+3, r22	; 0x03
    5418:	5d 83       	std	Y+5, r21	; 0x05
    541a:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    5420:	8a 81       	ldd	r24, Y+2	; 0x02
    5422:	84 30       	cpi	r24, 0x04	; 4
    5424:	08 f0       	brcs	.+2      	; 0x5428 <DIO_enumGetPinValue+0x28>
    5426:	a6 c0       	rjmp	.+332    	; 0x5574 <DIO_enumGetPinValue+0x174>
    5428:	8b 81       	ldd	r24, Y+3	; 0x03
    542a:	88 30       	cpi	r24, 0x08	; 8
    542c:	08 f0       	brcs	.+2      	; 0x5430 <DIO_enumGetPinValue+0x30>
    542e:	a2 c0       	rjmp	.+324    	; 0x5574 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    5430:	8a 81       	ldd	r24, Y+2	; 0x02
    5432:	28 2f       	mov	r18, r24
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	3f 83       	std	Y+7, r19	; 0x07
    5438:	2e 83       	std	Y+6, r18	; 0x06
    543a:	4e 81       	ldd	r20, Y+6	; 0x06
    543c:	5f 81       	ldd	r21, Y+7	; 0x07
    543e:	41 30       	cpi	r20, 0x01	; 1
    5440:	51 05       	cpc	r21, r1
    5442:	c1 f1       	breq	.+112    	; 0x54b4 <DIO_enumGetPinValue+0xb4>
    5444:	8e 81       	ldd	r24, Y+6	; 0x06
    5446:	9f 81       	ldd	r25, Y+7	; 0x07
    5448:	82 30       	cpi	r24, 0x02	; 2
    544a:	91 05       	cpc	r25, r1
    544c:	34 f4       	brge	.+12     	; 0x545a <DIO_enumGetPinValue+0x5a>
    544e:	2e 81       	ldd	r18, Y+6	; 0x06
    5450:	3f 81       	ldd	r19, Y+7	; 0x07
    5452:	21 15       	cp	r18, r1
    5454:	31 05       	cpc	r19, r1
    5456:	71 f0       	breq	.+28     	; 0x5474 <DIO_enumGetPinValue+0x74>
    5458:	8e c0       	rjmp	.+284    	; 0x5576 <DIO_enumGetPinValue+0x176>
    545a:	4e 81       	ldd	r20, Y+6	; 0x06
    545c:	5f 81       	ldd	r21, Y+7	; 0x07
    545e:	42 30       	cpi	r20, 0x02	; 2
    5460:	51 05       	cpc	r21, r1
    5462:	09 f4       	brne	.+2      	; 0x5466 <DIO_enumGetPinValue+0x66>
    5464:	47 c0       	rjmp	.+142    	; 0x54f4 <DIO_enumGetPinValue+0xf4>
    5466:	8e 81       	ldd	r24, Y+6	; 0x06
    5468:	9f 81       	ldd	r25, Y+7	; 0x07
    546a:	83 30       	cpi	r24, 0x03	; 3
    546c:	91 05       	cpc	r25, r1
    546e:	09 f4       	brne	.+2      	; 0x5472 <DIO_enumGetPinValue+0x72>
    5470:	61 c0       	rjmp	.+194    	; 0x5534 <DIO_enumGetPinValue+0x134>
    5472:	81 c0       	rjmp	.+258    	; 0x5576 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    5474:	e9 e3       	ldi	r30, 0x39	; 57
    5476:	f0 e0       	ldi	r31, 0x00	; 0
    5478:	80 81       	ld	r24, Z
    547a:	48 2f       	mov	r20, r24
    547c:	50 e0       	ldi	r21, 0x00	; 0
    547e:	8b 81       	ldd	r24, Y+3	; 0x03
    5480:	28 2f       	mov	r18, r24
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	02 c0       	rjmp	.+4      	; 0x548e <DIO_enumGetPinValue+0x8e>
    548a:	88 0f       	add	r24, r24
    548c:	99 1f       	adc	r25, r25
    548e:	2a 95       	dec	r18
    5490:	e2 f7       	brpl	.-8      	; 0x548a <DIO_enumGetPinValue+0x8a>
    5492:	9a 01       	movw	r18, r20
    5494:	28 23       	and	r18, r24
    5496:	39 23       	and	r19, r25
    5498:	8b 81       	ldd	r24, Y+3	; 0x03
    549a:	88 2f       	mov	r24, r24
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	a9 01       	movw	r20, r18
    54a0:	02 c0       	rjmp	.+4      	; 0x54a6 <DIO_enumGetPinValue+0xa6>
    54a2:	55 95       	asr	r21
    54a4:	47 95       	ror	r20
    54a6:	8a 95       	dec	r24
    54a8:	e2 f7       	brpl	.-8      	; 0x54a2 <DIO_enumGetPinValue+0xa2>
    54aa:	ca 01       	movw	r24, r20
    54ac:	ec 81       	ldd	r30, Y+4	; 0x04
    54ae:	fd 81       	ldd	r31, Y+5	; 0x05
    54b0:	80 83       	st	Z, r24
    54b2:	61 c0       	rjmp	.+194    	; 0x5576 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    54b4:	e6 e3       	ldi	r30, 0x36	; 54
    54b6:	f0 e0       	ldi	r31, 0x00	; 0
    54b8:	80 81       	ld	r24, Z
    54ba:	48 2f       	mov	r20, r24
    54bc:	50 e0       	ldi	r21, 0x00	; 0
    54be:	8b 81       	ldd	r24, Y+3	; 0x03
    54c0:	28 2f       	mov	r18, r24
    54c2:	30 e0       	ldi	r19, 0x00	; 0
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	02 c0       	rjmp	.+4      	; 0x54ce <DIO_enumGetPinValue+0xce>
    54ca:	88 0f       	add	r24, r24
    54cc:	99 1f       	adc	r25, r25
    54ce:	2a 95       	dec	r18
    54d0:	e2 f7       	brpl	.-8      	; 0x54ca <DIO_enumGetPinValue+0xca>
    54d2:	9a 01       	movw	r18, r20
    54d4:	28 23       	and	r18, r24
    54d6:	39 23       	and	r19, r25
    54d8:	8b 81       	ldd	r24, Y+3	; 0x03
    54da:	88 2f       	mov	r24, r24
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	a9 01       	movw	r20, r18
    54e0:	02 c0       	rjmp	.+4      	; 0x54e6 <DIO_enumGetPinValue+0xe6>
    54e2:	55 95       	asr	r21
    54e4:	47 95       	ror	r20
    54e6:	8a 95       	dec	r24
    54e8:	e2 f7       	brpl	.-8      	; 0x54e2 <DIO_enumGetPinValue+0xe2>
    54ea:	ca 01       	movw	r24, r20
    54ec:	ec 81       	ldd	r30, Y+4	; 0x04
    54ee:	fd 81       	ldd	r31, Y+5	; 0x05
    54f0:	80 83       	st	Z, r24
    54f2:	41 c0       	rjmp	.+130    	; 0x5576 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    54f4:	e3 e3       	ldi	r30, 0x33	; 51
    54f6:	f0 e0       	ldi	r31, 0x00	; 0
    54f8:	80 81       	ld	r24, Z
    54fa:	48 2f       	mov	r20, r24
    54fc:	50 e0       	ldi	r21, 0x00	; 0
    54fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5500:	28 2f       	mov	r18, r24
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	81 e0       	ldi	r24, 0x01	; 1
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	02 c0       	rjmp	.+4      	; 0x550e <DIO_enumGetPinValue+0x10e>
    550a:	88 0f       	add	r24, r24
    550c:	99 1f       	adc	r25, r25
    550e:	2a 95       	dec	r18
    5510:	e2 f7       	brpl	.-8      	; 0x550a <DIO_enumGetPinValue+0x10a>
    5512:	9a 01       	movw	r18, r20
    5514:	28 23       	and	r18, r24
    5516:	39 23       	and	r19, r25
    5518:	8b 81       	ldd	r24, Y+3	; 0x03
    551a:	88 2f       	mov	r24, r24
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	a9 01       	movw	r20, r18
    5520:	02 c0       	rjmp	.+4      	; 0x5526 <DIO_enumGetPinValue+0x126>
    5522:	55 95       	asr	r21
    5524:	47 95       	ror	r20
    5526:	8a 95       	dec	r24
    5528:	e2 f7       	brpl	.-8      	; 0x5522 <DIO_enumGetPinValue+0x122>
    552a:	ca 01       	movw	r24, r20
    552c:	ec 81       	ldd	r30, Y+4	; 0x04
    552e:	fd 81       	ldd	r31, Y+5	; 0x05
    5530:	80 83       	st	Z, r24
    5532:	21 c0       	rjmp	.+66     	; 0x5576 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    5534:	e0 e3       	ldi	r30, 0x30	; 48
    5536:	f0 e0       	ldi	r31, 0x00	; 0
    5538:	80 81       	ld	r24, Z
    553a:	48 2f       	mov	r20, r24
    553c:	50 e0       	ldi	r21, 0x00	; 0
    553e:	8b 81       	ldd	r24, Y+3	; 0x03
    5540:	28 2f       	mov	r18, r24
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	02 c0       	rjmp	.+4      	; 0x554e <DIO_enumGetPinValue+0x14e>
    554a:	88 0f       	add	r24, r24
    554c:	99 1f       	adc	r25, r25
    554e:	2a 95       	dec	r18
    5550:	e2 f7       	brpl	.-8      	; 0x554a <DIO_enumGetPinValue+0x14a>
    5552:	9a 01       	movw	r18, r20
    5554:	28 23       	and	r18, r24
    5556:	39 23       	and	r19, r25
    5558:	8b 81       	ldd	r24, Y+3	; 0x03
    555a:	88 2f       	mov	r24, r24
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	a9 01       	movw	r20, r18
    5560:	02 c0       	rjmp	.+4      	; 0x5566 <DIO_enumGetPinValue+0x166>
    5562:	55 95       	asr	r21
    5564:	47 95       	ror	r20
    5566:	8a 95       	dec	r24
    5568:	e2 f7       	brpl	.-8      	; 0x5562 <DIO_enumGetPinValue+0x162>
    556a:	ca 01       	movw	r24, r20
    556c:	ec 81       	ldd	r30, Y+4	; 0x04
    556e:	fd 81       	ldd	r31, Y+5	; 0x05
    5570:	80 83       	st	Z, r24
    5572:	01 c0       	rjmp	.+2      	; 0x5576 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    5574:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    5576:	89 81       	ldd	r24, Y+1	; 0x01
}
    5578:	27 96       	adiw	r28, 0x07	; 7
    557a:	0f b6       	in	r0, 0x3f	; 63
    557c:	f8 94       	cli
    557e:	de bf       	out	0x3e, r29	; 62
    5580:	0f be       	out	0x3f, r0	; 63
    5582:	cd bf       	out	0x3d, r28	; 61
    5584:	cf 91       	pop	r28
    5586:	df 91       	pop	r29
    5588:	08 95       	ret

0000558a <DIO_enumTogglePinValue>:


DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    558a:	df 93       	push	r29
    558c:	cf 93       	push	r28
    558e:	00 d0       	rcall	.+0      	; 0x5590 <DIO_enumTogglePinValue+0x6>
    5590:	00 d0       	rcall	.+0      	; 0x5592 <DIO_enumTogglePinValue+0x8>
    5592:	0f 92       	push	r0
    5594:	cd b7       	in	r28, 0x3d	; 61
    5596:	de b7       	in	r29, 0x3e	; 62
    5598:	8a 83       	std	Y+2, r24	; 0x02
    559a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    55a0:	8b 81       	ldd	r24, Y+3	; 0x03
    55a2:	88 30       	cpi	r24, 0x08	; 8
    55a4:	08 f0       	brcs	.+2      	; 0x55a8 <DIO_enumTogglePinValue+0x1e>
    55a6:	6f c0       	rjmp	.+222    	; 0x5686 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    55a8:	8a 81       	ldd	r24, Y+2	; 0x02
    55aa:	28 2f       	mov	r18, r24
    55ac:	30 e0       	ldi	r19, 0x00	; 0
    55ae:	3d 83       	std	Y+5, r19	; 0x05
    55b0:	2c 83       	std	Y+4, r18	; 0x04
    55b2:	8c 81       	ldd	r24, Y+4	; 0x04
    55b4:	9d 81       	ldd	r25, Y+5	; 0x05
    55b6:	81 30       	cpi	r24, 0x01	; 1
    55b8:	91 05       	cpc	r25, r1
    55ba:	49 f1       	breq	.+82     	; 0x560e <DIO_enumTogglePinValue+0x84>
    55bc:	2c 81       	ldd	r18, Y+4	; 0x04
    55be:	3d 81       	ldd	r19, Y+5	; 0x05
    55c0:	22 30       	cpi	r18, 0x02	; 2
    55c2:	31 05       	cpc	r19, r1
    55c4:	2c f4       	brge	.+10     	; 0x55d0 <DIO_enumTogglePinValue+0x46>
    55c6:	8c 81       	ldd	r24, Y+4	; 0x04
    55c8:	9d 81       	ldd	r25, Y+5	; 0x05
    55ca:	00 97       	sbiw	r24, 0x00	; 0
    55cc:	61 f0       	breq	.+24     	; 0x55e6 <DIO_enumTogglePinValue+0x5c>
    55ce:	5c c0       	rjmp	.+184    	; 0x5688 <DIO_enumTogglePinValue+0xfe>
    55d0:	2c 81       	ldd	r18, Y+4	; 0x04
    55d2:	3d 81       	ldd	r19, Y+5	; 0x05
    55d4:	22 30       	cpi	r18, 0x02	; 2
    55d6:	31 05       	cpc	r19, r1
    55d8:	71 f1       	breq	.+92     	; 0x5636 <DIO_enumTogglePinValue+0xac>
    55da:	8c 81       	ldd	r24, Y+4	; 0x04
    55dc:	9d 81       	ldd	r25, Y+5	; 0x05
    55de:	83 30       	cpi	r24, 0x03	; 3
    55e0:	91 05       	cpc	r25, r1
    55e2:	e9 f1       	breq	.+122    	; 0x565e <DIO_enumTogglePinValue+0xd4>
    55e4:	51 c0       	rjmp	.+162    	; 0x5688 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    55e6:	ab e3       	ldi	r26, 0x3B	; 59
    55e8:	b0 e0       	ldi	r27, 0x00	; 0
    55ea:	eb e3       	ldi	r30, 0x3B	; 59
    55ec:	f0 e0       	ldi	r31, 0x00	; 0
    55ee:	80 81       	ld	r24, Z
    55f0:	48 2f       	mov	r20, r24
    55f2:	8b 81       	ldd	r24, Y+3	; 0x03
    55f4:	28 2f       	mov	r18, r24
    55f6:	30 e0       	ldi	r19, 0x00	; 0
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	02 2e       	mov	r0, r18
    55fe:	02 c0       	rjmp	.+4      	; 0x5604 <DIO_enumTogglePinValue+0x7a>
    5600:	88 0f       	add	r24, r24
    5602:	99 1f       	adc	r25, r25
    5604:	0a 94       	dec	r0
    5606:	e2 f7       	brpl	.-8      	; 0x5600 <DIO_enumTogglePinValue+0x76>
    5608:	84 27       	eor	r24, r20
    560a:	8c 93       	st	X, r24
    560c:	3d c0       	rjmp	.+122    	; 0x5688 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    560e:	a8 e3       	ldi	r26, 0x38	; 56
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	e8 e3       	ldi	r30, 0x38	; 56
    5614:	f0 e0       	ldi	r31, 0x00	; 0
    5616:	80 81       	ld	r24, Z
    5618:	48 2f       	mov	r20, r24
    561a:	8b 81       	ldd	r24, Y+3	; 0x03
    561c:	28 2f       	mov	r18, r24
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	02 2e       	mov	r0, r18
    5626:	02 c0       	rjmp	.+4      	; 0x562c <DIO_enumTogglePinValue+0xa2>
    5628:	88 0f       	add	r24, r24
    562a:	99 1f       	adc	r25, r25
    562c:	0a 94       	dec	r0
    562e:	e2 f7       	brpl	.-8      	; 0x5628 <DIO_enumTogglePinValue+0x9e>
    5630:	84 27       	eor	r24, r20
    5632:	8c 93       	st	X, r24
    5634:	29 c0       	rjmp	.+82     	; 0x5688 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    5636:	a5 e3       	ldi	r26, 0x35	; 53
    5638:	b0 e0       	ldi	r27, 0x00	; 0
    563a:	e5 e3       	ldi	r30, 0x35	; 53
    563c:	f0 e0       	ldi	r31, 0x00	; 0
    563e:	80 81       	ld	r24, Z
    5640:	48 2f       	mov	r20, r24
    5642:	8b 81       	ldd	r24, Y+3	; 0x03
    5644:	28 2f       	mov	r18, r24
    5646:	30 e0       	ldi	r19, 0x00	; 0
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	02 2e       	mov	r0, r18
    564e:	02 c0       	rjmp	.+4      	; 0x5654 <DIO_enumTogglePinValue+0xca>
    5650:	88 0f       	add	r24, r24
    5652:	99 1f       	adc	r25, r25
    5654:	0a 94       	dec	r0
    5656:	e2 f7       	brpl	.-8      	; 0x5650 <DIO_enumTogglePinValue+0xc6>
    5658:	84 27       	eor	r24, r20
    565a:	8c 93       	st	X, r24
    565c:	15 c0       	rjmp	.+42     	; 0x5688 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    565e:	a2 e3       	ldi	r26, 0x32	; 50
    5660:	b0 e0       	ldi	r27, 0x00	; 0
    5662:	e2 e3       	ldi	r30, 0x32	; 50
    5664:	f0 e0       	ldi	r31, 0x00	; 0
    5666:	80 81       	ld	r24, Z
    5668:	48 2f       	mov	r20, r24
    566a:	8b 81       	ldd	r24, Y+3	; 0x03
    566c:	28 2f       	mov	r18, r24
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	02 2e       	mov	r0, r18
    5676:	02 c0       	rjmp	.+4      	; 0x567c <DIO_enumTogglePinValue+0xf2>
    5678:	88 0f       	add	r24, r24
    567a:	99 1f       	adc	r25, r25
    567c:	0a 94       	dec	r0
    567e:	e2 f7       	brpl	.-8      	; 0x5678 <DIO_enumTogglePinValue+0xee>
    5680:	84 27       	eor	r24, r20
    5682:	8c 93       	st	X, r24
    5684:	01 c0       	rjmp	.+2      	; 0x5688 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    5686:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    5688:	89 81       	ldd	r24, Y+1	; 0x01
}
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	cf 91       	pop	r28
    5696:	df 91       	pop	r29
    5698:	08 95       	ret

0000569a <DIO_enumConnectPullup>:


DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    569a:	df 93       	push	r29
    569c:	cf 93       	push	r28
    569e:	00 d0       	rcall	.+0      	; 0x56a0 <DIO_enumConnectPullup+0x6>
    56a0:	00 d0       	rcall	.+0      	; 0x56a2 <DIO_enumConnectPullup+0x8>
    56a2:	00 d0       	rcall	.+0      	; 0x56a4 <DIO_enumConnectPullup+0xa>
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
    56a8:	8a 83       	std	Y+2, r24	; 0x02
    56aa:	6b 83       	std	Y+3, r22	; 0x03
    56ac:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    56b2:	8a 81       	ldd	r24, Y+2	; 0x02
    56b4:	84 30       	cpi	r24, 0x04	; 4
    56b6:	08 f0       	brcs	.+2      	; 0x56ba <DIO_enumConnectPullup+0x20>
    56b8:	3e c1       	rjmp	.+636    	; 0x5936 <DIO_enumConnectPullup+0x29c>
    56ba:	8b 81       	ldd	r24, Y+3	; 0x03
    56bc:	88 30       	cpi	r24, 0x08	; 8
    56be:	08 f0       	brcs	.+2      	; 0x56c2 <DIO_enumConnectPullup+0x28>
    56c0:	3a c1       	rjmp	.+628    	; 0x5936 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    56c2:	8a 81       	ldd	r24, Y+2	; 0x02
    56c4:	28 2f       	mov	r18, r24
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	3e 83       	std	Y+6, r19	; 0x06
    56ca:	2d 83       	std	Y+5, r18	; 0x05
    56cc:	8d 81       	ldd	r24, Y+5	; 0x05
    56ce:	9e 81       	ldd	r25, Y+6	; 0x06
    56d0:	81 30       	cpi	r24, 0x01	; 1
    56d2:	91 05       	cpc	r25, r1
    56d4:	09 f4       	brne	.+2      	; 0x56d8 <DIO_enumConnectPullup+0x3e>
    56d6:	5d c0       	rjmp	.+186    	; 0x5792 <DIO_enumConnectPullup+0xf8>
    56d8:	2d 81       	ldd	r18, Y+5	; 0x05
    56da:	3e 81       	ldd	r19, Y+6	; 0x06
    56dc:	22 30       	cpi	r18, 0x02	; 2
    56de:	31 05       	cpc	r19, r1
    56e0:	2c f4       	brge	.+10     	; 0x56ec <DIO_enumConnectPullup+0x52>
    56e2:	8d 81       	ldd	r24, Y+5	; 0x05
    56e4:	9e 81       	ldd	r25, Y+6	; 0x06
    56e6:	00 97       	sbiw	r24, 0x00	; 0
    56e8:	71 f0       	breq	.+28     	; 0x5706 <DIO_enumConnectPullup+0x6c>
    56ea:	26 c1       	rjmp	.+588    	; 0x5938 <DIO_enumConnectPullup+0x29e>
    56ec:	2d 81       	ldd	r18, Y+5	; 0x05
    56ee:	3e 81       	ldd	r19, Y+6	; 0x06
    56f0:	22 30       	cpi	r18, 0x02	; 2
    56f2:	31 05       	cpc	r19, r1
    56f4:	09 f4       	brne	.+2      	; 0x56f8 <DIO_enumConnectPullup+0x5e>
    56f6:	93 c0       	rjmp	.+294    	; 0x581e <DIO_enumConnectPullup+0x184>
    56f8:	8d 81       	ldd	r24, Y+5	; 0x05
    56fa:	9e 81       	ldd	r25, Y+6	; 0x06
    56fc:	83 30       	cpi	r24, 0x03	; 3
    56fe:	91 05       	cpc	r25, r1
    5700:	09 f4       	brne	.+2      	; 0x5704 <DIO_enumConnectPullup+0x6a>
    5702:	d3 c0       	rjmp	.+422    	; 0x58aa <DIO_enumConnectPullup+0x210>
    5704:	19 c1       	rjmp	.+562    	; 0x5938 <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    5706:	8c 81       	ldd	r24, Y+4	; 0x04
    5708:	81 30       	cpi	r24, 0x01	; 1
    570a:	71 f5       	brne	.+92     	; 0x5768 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    570c:	a0 e5       	ldi	r26, 0x50	; 80
    570e:	b0 e0       	ldi	r27, 0x00	; 0
    5710:	e0 e5       	ldi	r30, 0x50	; 80
    5712:	f0 e0       	ldi	r31, 0x00	; 0
    5714:	80 81       	ld	r24, Z
    5716:	8b 7f       	andi	r24, 0xFB	; 251
    5718:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    571a:	aa e3       	ldi	r26, 0x3A	; 58
    571c:	b0 e0       	ldi	r27, 0x00	; 0
    571e:	ea e3       	ldi	r30, 0x3A	; 58
    5720:	f0 e0       	ldi	r31, 0x00	; 0
    5722:	80 81       	ld	r24, Z
    5724:	48 2f       	mov	r20, r24
    5726:	8b 81       	ldd	r24, Y+3	; 0x03
    5728:	28 2f       	mov	r18, r24
    572a:	30 e0       	ldi	r19, 0x00	; 0
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	02 c0       	rjmp	.+4      	; 0x5736 <DIO_enumConnectPullup+0x9c>
    5732:	88 0f       	add	r24, r24
    5734:	99 1f       	adc	r25, r25
    5736:	2a 95       	dec	r18
    5738:	e2 f7       	brpl	.-8      	; 0x5732 <DIO_enumConnectPullup+0x98>
    573a:	80 95       	com	r24
    573c:	84 23       	and	r24, r20
    573e:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    5740:	ab e3       	ldi	r26, 0x3B	; 59
    5742:	b0 e0       	ldi	r27, 0x00	; 0
    5744:	eb e3       	ldi	r30, 0x3B	; 59
    5746:	f0 e0       	ldi	r31, 0x00	; 0
    5748:	80 81       	ld	r24, Z
    574a:	48 2f       	mov	r20, r24
    574c:	8b 81       	ldd	r24, Y+3	; 0x03
    574e:	28 2f       	mov	r18, r24
    5750:	30 e0       	ldi	r19, 0x00	; 0
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	02 2e       	mov	r0, r18
    5758:	02 c0       	rjmp	.+4      	; 0x575e <DIO_enumConnectPullup+0xc4>
    575a:	88 0f       	add	r24, r24
    575c:	99 1f       	adc	r25, r25
    575e:	0a 94       	dec	r0
    5760:	e2 f7       	brpl	.-8      	; 0x575a <DIO_enumConnectPullup+0xc0>
    5762:	84 2b       	or	r24, r20
    5764:	8c 93       	st	X, r24
    5766:	e8 c0       	rjmp	.+464    	; 0x5938 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    5768:	ab e3       	ldi	r26, 0x3B	; 59
    576a:	b0 e0       	ldi	r27, 0x00	; 0
    576c:	eb e3       	ldi	r30, 0x3B	; 59
    576e:	f0 e0       	ldi	r31, 0x00	; 0
    5770:	80 81       	ld	r24, Z
    5772:	48 2f       	mov	r20, r24
    5774:	8b 81       	ldd	r24, Y+3	; 0x03
    5776:	28 2f       	mov	r18, r24
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	81 e0       	ldi	r24, 0x01	; 1
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	02 2e       	mov	r0, r18
    5780:	02 c0       	rjmp	.+4      	; 0x5786 <DIO_enumConnectPullup+0xec>
    5782:	88 0f       	add	r24, r24
    5784:	99 1f       	adc	r25, r25
    5786:	0a 94       	dec	r0
    5788:	e2 f7       	brpl	.-8      	; 0x5782 <DIO_enumConnectPullup+0xe8>
    578a:	80 95       	com	r24
    578c:	84 23       	and	r24, r20
    578e:	8c 93       	st	X, r24
    5790:	d3 c0       	rjmp	.+422    	; 0x5938 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    5792:	8c 81       	ldd	r24, Y+4	; 0x04
    5794:	81 30       	cpi	r24, 0x01	; 1
    5796:	71 f5       	brne	.+92     	; 0x57f4 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    5798:	a0 e5       	ldi	r26, 0x50	; 80
    579a:	b0 e0       	ldi	r27, 0x00	; 0
    579c:	e0 e5       	ldi	r30, 0x50	; 80
    579e:	f0 e0       	ldi	r31, 0x00	; 0
    57a0:	80 81       	ld	r24, Z
    57a2:	8b 7f       	andi	r24, 0xFB	; 251
    57a4:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    57a6:	a7 e3       	ldi	r26, 0x37	; 55
    57a8:	b0 e0       	ldi	r27, 0x00	; 0
    57aa:	e7 e3       	ldi	r30, 0x37	; 55
    57ac:	f0 e0       	ldi	r31, 0x00	; 0
    57ae:	80 81       	ld	r24, Z
    57b0:	48 2f       	mov	r20, r24
    57b2:	8b 81       	ldd	r24, Y+3	; 0x03
    57b4:	28 2f       	mov	r18, r24
    57b6:	30 e0       	ldi	r19, 0x00	; 0
    57b8:	81 e0       	ldi	r24, 0x01	; 1
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	02 c0       	rjmp	.+4      	; 0x57c2 <DIO_enumConnectPullup+0x128>
    57be:	88 0f       	add	r24, r24
    57c0:	99 1f       	adc	r25, r25
    57c2:	2a 95       	dec	r18
    57c4:	e2 f7       	brpl	.-8      	; 0x57be <DIO_enumConnectPullup+0x124>
    57c6:	80 95       	com	r24
    57c8:	84 23       	and	r24, r20
    57ca:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    57cc:	a8 e3       	ldi	r26, 0x38	; 56
    57ce:	b0 e0       	ldi	r27, 0x00	; 0
    57d0:	e8 e3       	ldi	r30, 0x38	; 56
    57d2:	f0 e0       	ldi	r31, 0x00	; 0
    57d4:	80 81       	ld	r24, Z
    57d6:	48 2f       	mov	r20, r24
    57d8:	8b 81       	ldd	r24, Y+3	; 0x03
    57da:	28 2f       	mov	r18, r24
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	81 e0       	ldi	r24, 0x01	; 1
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	02 2e       	mov	r0, r18
    57e4:	02 c0       	rjmp	.+4      	; 0x57ea <DIO_enumConnectPullup+0x150>
    57e6:	88 0f       	add	r24, r24
    57e8:	99 1f       	adc	r25, r25
    57ea:	0a 94       	dec	r0
    57ec:	e2 f7       	brpl	.-8      	; 0x57e6 <DIO_enumConnectPullup+0x14c>
    57ee:	84 2b       	or	r24, r20
    57f0:	8c 93       	st	X, r24
    57f2:	a2 c0       	rjmp	.+324    	; 0x5938 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    57f4:	a8 e3       	ldi	r26, 0x38	; 56
    57f6:	b0 e0       	ldi	r27, 0x00	; 0
    57f8:	e8 e3       	ldi	r30, 0x38	; 56
    57fa:	f0 e0       	ldi	r31, 0x00	; 0
    57fc:	80 81       	ld	r24, Z
    57fe:	48 2f       	mov	r20, r24
    5800:	8b 81       	ldd	r24, Y+3	; 0x03
    5802:	28 2f       	mov	r18, r24
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	81 e0       	ldi	r24, 0x01	; 1
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	02 2e       	mov	r0, r18
    580c:	02 c0       	rjmp	.+4      	; 0x5812 <DIO_enumConnectPullup+0x178>
    580e:	88 0f       	add	r24, r24
    5810:	99 1f       	adc	r25, r25
    5812:	0a 94       	dec	r0
    5814:	e2 f7       	brpl	.-8      	; 0x580e <DIO_enumConnectPullup+0x174>
    5816:	80 95       	com	r24
    5818:	84 23       	and	r24, r20
    581a:	8c 93       	st	X, r24
    581c:	8d c0       	rjmp	.+282    	; 0x5938 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    581e:	8c 81       	ldd	r24, Y+4	; 0x04
    5820:	81 30       	cpi	r24, 0x01	; 1
    5822:	71 f5       	brne	.+92     	; 0x5880 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    5824:	a0 e5       	ldi	r26, 0x50	; 80
    5826:	b0 e0       	ldi	r27, 0x00	; 0
    5828:	e0 e5       	ldi	r30, 0x50	; 80
    582a:	f0 e0       	ldi	r31, 0x00	; 0
    582c:	80 81       	ld	r24, Z
    582e:	8b 7f       	andi	r24, 0xFB	; 251
    5830:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    5832:	a4 e3       	ldi	r26, 0x34	; 52
    5834:	b0 e0       	ldi	r27, 0x00	; 0
    5836:	e4 e3       	ldi	r30, 0x34	; 52
    5838:	f0 e0       	ldi	r31, 0x00	; 0
    583a:	80 81       	ld	r24, Z
    583c:	48 2f       	mov	r20, r24
    583e:	8b 81       	ldd	r24, Y+3	; 0x03
    5840:	28 2f       	mov	r18, r24
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	81 e0       	ldi	r24, 0x01	; 1
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	02 c0       	rjmp	.+4      	; 0x584e <DIO_enumConnectPullup+0x1b4>
    584a:	88 0f       	add	r24, r24
    584c:	99 1f       	adc	r25, r25
    584e:	2a 95       	dec	r18
    5850:	e2 f7       	brpl	.-8      	; 0x584a <DIO_enumConnectPullup+0x1b0>
    5852:	80 95       	com	r24
    5854:	84 23       	and	r24, r20
    5856:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    5858:	a5 e3       	ldi	r26, 0x35	; 53
    585a:	b0 e0       	ldi	r27, 0x00	; 0
    585c:	e5 e3       	ldi	r30, 0x35	; 53
    585e:	f0 e0       	ldi	r31, 0x00	; 0
    5860:	80 81       	ld	r24, Z
    5862:	48 2f       	mov	r20, r24
    5864:	8b 81       	ldd	r24, Y+3	; 0x03
    5866:	28 2f       	mov	r18, r24
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	02 2e       	mov	r0, r18
    5870:	02 c0       	rjmp	.+4      	; 0x5876 <DIO_enumConnectPullup+0x1dc>
    5872:	88 0f       	add	r24, r24
    5874:	99 1f       	adc	r25, r25
    5876:	0a 94       	dec	r0
    5878:	e2 f7       	brpl	.-8      	; 0x5872 <DIO_enumConnectPullup+0x1d8>
    587a:	84 2b       	or	r24, r20
    587c:	8c 93       	st	X, r24
    587e:	5c c0       	rjmp	.+184    	; 0x5938 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    5880:	a5 e3       	ldi	r26, 0x35	; 53
    5882:	b0 e0       	ldi	r27, 0x00	; 0
    5884:	e5 e3       	ldi	r30, 0x35	; 53
    5886:	f0 e0       	ldi	r31, 0x00	; 0
    5888:	80 81       	ld	r24, Z
    588a:	48 2f       	mov	r20, r24
    588c:	8b 81       	ldd	r24, Y+3	; 0x03
    588e:	28 2f       	mov	r18, r24
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	02 2e       	mov	r0, r18
    5898:	02 c0       	rjmp	.+4      	; 0x589e <DIO_enumConnectPullup+0x204>
    589a:	88 0f       	add	r24, r24
    589c:	99 1f       	adc	r25, r25
    589e:	0a 94       	dec	r0
    58a0:	e2 f7       	brpl	.-8      	; 0x589a <DIO_enumConnectPullup+0x200>
    58a2:	80 95       	com	r24
    58a4:	84 23       	and	r24, r20
    58a6:	8c 93       	st	X, r24
    58a8:	47 c0       	rjmp	.+142    	; 0x5938 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    58aa:	8c 81       	ldd	r24, Y+4	; 0x04
    58ac:	81 30       	cpi	r24, 0x01	; 1
    58ae:	71 f5       	brne	.+92     	; 0x590c <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    58b0:	a0 e5       	ldi	r26, 0x50	; 80
    58b2:	b0 e0       	ldi	r27, 0x00	; 0
    58b4:	e0 e5       	ldi	r30, 0x50	; 80
    58b6:	f0 e0       	ldi	r31, 0x00	; 0
    58b8:	80 81       	ld	r24, Z
    58ba:	8b 7f       	andi	r24, 0xFB	; 251
    58bc:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    58be:	a1 e3       	ldi	r26, 0x31	; 49
    58c0:	b0 e0       	ldi	r27, 0x00	; 0
    58c2:	e1 e3       	ldi	r30, 0x31	; 49
    58c4:	f0 e0       	ldi	r31, 0x00	; 0
    58c6:	80 81       	ld	r24, Z
    58c8:	48 2f       	mov	r20, r24
    58ca:	8b 81       	ldd	r24, Y+3	; 0x03
    58cc:	28 2f       	mov	r18, r24
    58ce:	30 e0       	ldi	r19, 0x00	; 0
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	90 e0       	ldi	r25, 0x00	; 0
    58d4:	02 c0       	rjmp	.+4      	; 0x58da <DIO_enumConnectPullup+0x240>
    58d6:	88 0f       	add	r24, r24
    58d8:	99 1f       	adc	r25, r25
    58da:	2a 95       	dec	r18
    58dc:	e2 f7       	brpl	.-8      	; 0x58d6 <DIO_enumConnectPullup+0x23c>
    58de:	80 95       	com	r24
    58e0:	84 23       	and	r24, r20
    58e2:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    58e4:	a2 e3       	ldi	r26, 0x32	; 50
    58e6:	b0 e0       	ldi	r27, 0x00	; 0
    58e8:	e2 e3       	ldi	r30, 0x32	; 50
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	80 81       	ld	r24, Z
    58ee:	48 2f       	mov	r20, r24
    58f0:	8b 81       	ldd	r24, Y+3	; 0x03
    58f2:	28 2f       	mov	r18, r24
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	02 2e       	mov	r0, r18
    58fc:	02 c0       	rjmp	.+4      	; 0x5902 <DIO_enumConnectPullup+0x268>
    58fe:	88 0f       	add	r24, r24
    5900:	99 1f       	adc	r25, r25
    5902:	0a 94       	dec	r0
    5904:	e2 f7       	brpl	.-8      	; 0x58fe <DIO_enumConnectPullup+0x264>
    5906:	84 2b       	or	r24, r20
    5908:	8c 93       	st	X, r24
    590a:	16 c0       	rjmp	.+44     	; 0x5938 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    590c:	a2 e3       	ldi	r26, 0x32	; 50
    590e:	b0 e0       	ldi	r27, 0x00	; 0
    5910:	e2 e3       	ldi	r30, 0x32	; 50
    5912:	f0 e0       	ldi	r31, 0x00	; 0
    5914:	80 81       	ld	r24, Z
    5916:	48 2f       	mov	r20, r24
    5918:	8b 81       	ldd	r24, Y+3	; 0x03
    591a:	28 2f       	mov	r18, r24
    591c:	30 e0       	ldi	r19, 0x00	; 0
    591e:	81 e0       	ldi	r24, 0x01	; 1
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	02 2e       	mov	r0, r18
    5924:	02 c0       	rjmp	.+4      	; 0x592a <DIO_enumConnectPullup+0x290>
    5926:	88 0f       	add	r24, r24
    5928:	99 1f       	adc	r25, r25
    592a:	0a 94       	dec	r0
    592c:	e2 f7       	brpl	.-8      	; 0x5926 <DIO_enumConnectPullup+0x28c>
    592e:	80 95       	com	r24
    5930:	84 23       	and	r24, r20
    5932:	8c 93       	st	X, r24
    5934:	01 c0       	rjmp	.+2      	; 0x5938 <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    5936:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    5938:	89 81       	ldd	r24, Y+1	; 0x01


}
    593a:	26 96       	adiw	r28, 0x06	; 6
    593c:	0f b6       	in	r0, 0x3f	; 63
    593e:	f8 94       	cli
    5940:	de bf       	out	0x3e, r29	; 62
    5942:	0f be       	out	0x3f, r0	; 63
    5944:	cd bf       	out	0x3d, r28	; 61
    5946:	cf 91       	pop	r28
    5948:	df 91       	pop	r29
    594a:	08 95       	ret

0000594c <DIO_voidWriteHighNibbles>:




DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    594c:	df 93       	push	r29
    594e:	cf 93       	push	r28
    5950:	00 d0       	rcall	.+0      	; 0x5952 <DIO_voidWriteHighNibbles+0x6>
    5952:	00 d0       	rcall	.+0      	; 0x5954 <DIO_voidWriteHighNibbles+0x8>
    5954:	0f 92       	push	r0
    5956:	cd b7       	in	r28, 0x3d	; 61
    5958:	de b7       	in	r29, 0x3e	; 62
    595a:	8a 83       	std	Y+2, r24	; 0x02
    595c:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    595e:	81 e0       	ldi	r24, 0x01	; 1
    5960:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    5962:	8a 81       	ldd	r24, Y+2	; 0x02
    5964:	84 30       	cpi	r24, 0x04	; 4
    5966:	08 f0       	brcs	.+2      	; 0x596a <DIO_voidWriteHighNibbles+0x1e>
    5968:	63 c0       	rjmp	.+198    	; 0x5a30 <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    596a:	8b 81       	ldd	r24, Y+3	; 0x03
    596c:	82 95       	swap	r24
    596e:	80 7f       	andi	r24, 0xF0	; 240
    5970:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    5972:	8a 81       	ldd	r24, Y+2	; 0x02
    5974:	28 2f       	mov	r18, r24
    5976:	30 e0       	ldi	r19, 0x00	; 0
    5978:	3d 83       	std	Y+5, r19	; 0x05
    597a:	2c 83       	std	Y+4, r18	; 0x04
    597c:	8c 81       	ldd	r24, Y+4	; 0x04
    597e:	9d 81       	ldd	r25, Y+5	; 0x05
    5980:	81 30       	cpi	r24, 0x01	; 1
    5982:	91 05       	cpc	r25, r1
    5984:	29 f1       	breq	.+74     	; 0x59d0 <DIO_voidWriteHighNibbles+0x84>
    5986:	2c 81       	ldd	r18, Y+4	; 0x04
    5988:	3d 81       	ldd	r19, Y+5	; 0x05
    598a:	22 30       	cpi	r18, 0x02	; 2
    598c:	31 05       	cpc	r19, r1
    598e:	2c f4       	brge	.+10     	; 0x599a <DIO_voidWriteHighNibbles+0x4e>
    5990:	8c 81       	ldd	r24, Y+4	; 0x04
    5992:	9d 81       	ldd	r25, Y+5	; 0x05
    5994:	00 97       	sbiw	r24, 0x00	; 0
    5996:	61 f0       	breq	.+24     	; 0x59b0 <DIO_voidWriteHighNibbles+0x64>
    5998:	4c c0       	rjmp	.+152    	; 0x5a32 <DIO_voidWriteHighNibbles+0xe6>
    599a:	2c 81       	ldd	r18, Y+4	; 0x04
    599c:	3d 81       	ldd	r19, Y+5	; 0x05
    599e:	22 30       	cpi	r18, 0x02	; 2
    59a0:	31 05       	cpc	r19, r1
    59a2:	31 f1       	breq	.+76     	; 0x59f0 <DIO_voidWriteHighNibbles+0xa4>
    59a4:	8c 81       	ldd	r24, Y+4	; 0x04
    59a6:	9d 81       	ldd	r25, Y+5	; 0x05
    59a8:	83 30       	cpi	r24, 0x03	; 3
    59aa:	91 05       	cpc	r25, r1
    59ac:	89 f1       	breq	.+98     	; 0x5a10 <DIO_voidWriteHighNibbles+0xc4>
    59ae:	41 c0       	rjmp	.+130    	; 0x5a32 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    59b0:	ab e3       	ldi	r26, 0x3B	; 59
    59b2:	b0 e0       	ldi	r27, 0x00	; 0
    59b4:	eb e3       	ldi	r30, 0x3B	; 59
    59b6:	f0 e0       	ldi	r31, 0x00	; 0
    59b8:	80 81       	ld	r24, Z
    59ba:	8f 70       	andi	r24, 0x0F	; 15
    59bc:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    59be:	ab e3       	ldi	r26, 0x3B	; 59
    59c0:	b0 e0       	ldi	r27, 0x00	; 0
    59c2:	eb e3       	ldi	r30, 0x3B	; 59
    59c4:	f0 e0       	ldi	r31, 0x00	; 0
    59c6:	90 81       	ld	r25, Z
    59c8:	8b 81       	ldd	r24, Y+3	; 0x03
    59ca:	89 2b       	or	r24, r25
    59cc:	8c 93       	st	X, r24
    59ce:	31 c0       	rjmp	.+98     	; 0x5a32 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    59d0:	a8 e3       	ldi	r26, 0x38	; 56
    59d2:	b0 e0       	ldi	r27, 0x00	; 0
    59d4:	e8 e3       	ldi	r30, 0x38	; 56
    59d6:	f0 e0       	ldi	r31, 0x00	; 0
    59d8:	80 81       	ld	r24, Z
    59da:	8f 70       	andi	r24, 0x0F	; 15
    59dc:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    59de:	a8 e3       	ldi	r26, 0x38	; 56
    59e0:	b0 e0       	ldi	r27, 0x00	; 0
    59e2:	e8 e3       	ldi	r30, 0x38	; 56
    59e4:	f0 e0       	ldi	r31, 0x00	; 0
    59e6:	90 81       	ld	r25, Z
    59e8:	8b 81       	ldd	r24, Y+3	; 0x03
    59ea:	89 2b       	or	r24, r25
    59ec:	8c 93       	st	X, r24
    59ee:	21 c0       	rjmp	.+66     	; 0x5a32 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    59f0:	a5 e3       	ldi	r26, 0x35	; 53
    59f2:	b0 e0       	ldi	r27, 0x00	; 0
    59f4:	e5 e3       	ldi	r30, 0x35	; 53
    59f6:	f0 e0       	ldi	r31, 0x00	; 0
    59f8:	80 81       	ld	r24, Z
    59fa:	8f 70       	andi	r24, 0x0F	; 15
    59fc:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    59fe:	a5 e3       	ldi	r26, 0x35	; 53
    5a00:	b0 e0       	ldi	r27, 0x00	; 0
    5a02:	e5 e3       	ldi	r30, 0x35	; 53
    5a04:	f0 e0       	ldi	r31, 0x00	; 0
    5a06:	90 81       	ld	r25, Z
    5a08:	8b 81       	ldd	r24, Y+3	; 0x03
    5a0a:	89 2b       	or	r24, r25
    5a0c:	8c 93       	st	X, r24
    5a0e:	11 c0       	rjmp	.+34     	; 0x5a32 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    5a10:	a2 e3       	ldi	r26, 0x32	; 50
    5a12:	b0 e0       	ldi	r27, 0x00	; 0
    5a14:	e2 e3       	ldi	r30, 0x32	; 50
    5a16:	f0 e0       	ldi	r31, 0x00	; 0
    5a18:	80 81       	ld	r24, Z
    5a1a:	8f 70       	andi	r24, 0x0F	; 15
    5a1c:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    5a1e:	a2 e3       	ldi	r26, 0x32	; 50
    5a20:	b0 e0       	ldi	r27, 0x00	; 0
    5a22:	e2 e3       	ldi	r30, 0x32	; 50
    5a24:	f0 e0       	ldi	r31, 0x00	; 0
    5a26:	90 81       	ld	r25, Z
    5a28:	8b 81       	ldd	r24, Y+3	; 0x03
    5a2a:	89 2b       	or	r24, r25
    5a2c:	8c 93       	st	X, r24
    5a2e:	01 c0       	rjmp	.+2      	; 0x5a32 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    5a30:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    5a32:	89 81       	ldd	r24, Y+1	; 0x01

}
    5a34:	0f 90       	pop	r0
    5a36:	0f 90       	pop	r0
    5a38:	0f 90       	pop	r0
    5a3a:	0f 90       	pop	r0
    5a3c:	0f 90       	pop	r0
    5a3e:	cf 91       	pop	r28
    5a40:	df 91       	pop	r29
    5a42:	08 95       	ret

00005a44 <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
    5a44:	df 93       	push	r29
    5a46:	cf 93       	push	r28
    5a48:	00 d0       	rcall	.+0      	; 0x5a4a <DIO_enumSetPortDirection+0x6>
    5a4a:	00 d0       	rcall	.+0      	; 0x5a4c <DIO_enumSetPortDirection+0x8>
    5a4c:	0f 92       	push	r0
    5a4e:	cd b7       	in	r28, 0x3d	; 61
    5a50:	de b7       	in	r29, 0x3e	; 62
    5a52:	8a 83       	std	Y+2, r24	; 0x02
    5a54:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    5a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5c:	84 30       	cpi	r24, 0x04	; 4
    5a5e:	a8 f5       	brcc	.+106    	; 0x5aca <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    5a60:	8a 81       	ldd	r24, Y+2	; 0x02
    5a62:	28 2f       	mov	r18, r24
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	3d 83       	std	Y+5, r19	; 0x05
    5a68:	2c 83       	std	Y+4, r18	; 0x04
    5a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    5a6e:	81 30       	cpi	r24, 0x01	; 1
    5a70:	91 05       	cpc	r25, r1
    5a72:	d1 f0       	breq	.+52     	; 0x5aa8 <DIO_enumSetPortDirection+0x64>
    5a74:	2c 81       	ldd	r18, Y+4	; 0x04
    5a76:	3d 81       	ldd	r19, Y+5	; 0x05
    5a78:	22 30       	cpi	r18, 0x02	; 2
    5a7a:	31 05       	cpc	r19, r1
    5a7c:	2c f4       	brge	.+10     	; 0x5a88 <DIO_enumSetPortDirection+0x44>
    5a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    5a80:	9d 81       	ldd	r25, Y+5	; 0x05
    5a82:	00 97       	sbiw	r24, 0x00	; 0
    5a84:	61 f0       	breq	.+24     	; 0x5a9e <DIO_enumSetPortDirection+0x5a>
    5a86:	1f c0       	rjmp	.+62     	; 0x5ac6 <DIO_enumSetPortDirection+0x82>
    5a88:	2c 81       	ldd	r18, Y+4	; 0x04
    5a8a:	3d 81       	ldd	r19, Y+5	; 0x05
    5a8c:	22 30       	cpi	r18, 0x02	; 2
    5a8e:	31 05       	cpc	r19, r1
    5a90:	81 f0       	breq	.+32     	; 0x5ab2 <DIO_enumSetPortDirection+0x6e>
    5a92:	8c 81       	ldd	r24, Y+4	; 0x04
    5a94:	9d 81       	ldd	r25, Y+5	; 0x05
    5a96:	83 30       	cpi	r24, 0x03	; 3
    5a98:	91 05       	cpc	r25, r1
    5a9a:	81 f0       	breq	.+32     	; 0x5abc <DIO_enumSetPortDirection+0x78>
    5a9c:	14 c0       	rjmp	.+40     	; 0x5ac6 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    5a9e:	ea e3       	ldi	r30, 0x3A	; 58
    5aa0:	f0 e0       	ldi	r31, 0x00	; 0
    5aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    5aa4:	80 83       	st	Z, r24
    5aa6:	12 c0       	rjmp	.+36     	; 0x5acc <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    5aa8:	e7 e3       	ldi	r30, 0x37	; 55
    5aaa:	f0 e0       	ldi	r31, 0x00	; 0
    5aac:	8b 81       	ldd	r24, Y+3	; 0x03
    5aae:	80 83       	st	Z, r24
    5ab0:	0d c0       	rjmp	.+26     	; 0x5acc <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    5ab2:	e4 e3       	ldi	r30, 0x34	; 52
    5ab4:	f0 e0       	ldi	r31, 0x00	; 0
    5ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ab8:	80 83       	st	Z, r24
    5aba:	08 c0       	rjmp	.+16     	; 0x5acc <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    5abc:	e1 e3       	ldi	r30, 0x31	; 49
    5abe:	f0 e0       	ldi	r31, 0x00	; 0
    5ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac2:	80 83       	st	Z, r24
    5ac4:	03 c0       	rjmp	.+6      	; 0x5acc <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    5ac6:	19 82       	std	Y+1, r1	; 0x01
    5ac8:	01 c0       	rjmp	.+2      	; 0x5acc <DIO_enumSetPortDirection+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    5aca:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    5acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    5ace:	0f 90       	pop	r0
    5ad0:	0f 90       	pop	r0
    5ad2:	0f 90       	pop	r0
    5ad4:	0f 90       	pop	r0
    5ad6:	0f 90       	pop	r0
    5ad8:	cf 91       	pop	r28
    5ada:	df 91       	pop	r29
    5adc:	08 95       	ret

00005ade <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    5ade:	df 93       	push	r29
    5ae0:	cf 93       	push	r28
    5ae2:	00 d0       	rcall	.+0      	; 0x5ae4 <DIO_enumSetPortValue+0x6>
    5ae4:	00 d0       	rcall	.+0      	; 0x5ae6 <DIO_enumSetPortValue+0x8>
    5ae6:	0f 92       	push	r0
    5ae8:	cd b7       	in	r28, 0x3d	; 61
    5aea:	de b7       	in	r29, 0x3e	; 62
    5aec:	8a 83       	std	Y+2, r24	; 0x02
    5aee:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5af0:	81 e0       	ldi	r24, 0x01	; 1
    5af2:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    5af4:	8a 81       	ldd	r24, Y+2	; 0x02
    5af6:	84 30       	cpi	r24, 0x04	; 4
    5af8:	a8 f5       	brcc	.+106    	; 0x5b64 <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    5afa:	8a 81       	ldd	r24, Y+2	; 0x02
    5afc:	28 2f       	mov	r18, r24
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	3d 83       	std	Y+5, r19	; 0x05
    5b02:	2c 83       	std	Y+4, r18	; 0x04
    5b04:	8c 81       	ldd	r24, Y+4	; 0x04
    5b06:	9d 81       	ldd	r25, Y+5	; 0x05
    5b08:	81 30       	cpi	r24, 0x01	; 1
    5b0a:	91 05       	cpc	r25, r1
    5b0c:	d1 f0       	breq	.+52     	; 0x5b42 <DIO_enumSetPortValue+0x64>
    5b0e:	2c 81       	ldd	r18, Y+4	; 0x04
    5b10:	3d 81       	ldd	r19, Y+5	; 0x05
    5b12:	22 30       	cpi	r18, 0x02	; 2
    5b14:	31 05       	cpc	r19, r1
    5b16:	2c f4       	brge	.+10     	; 0x5b22 <DIO_enumSetPortValue+0x44>
    5b18:	8c 81       	ldd	r24, Y+4	; 0x04
    5b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b1c:	00 97       	sbiw	r24, 0x00	; 0
    5b1e:	61 f0       	breq	.+24     	; 0x5b38 <DIO_enumSetPortValue+0x5a>
    5b20:	1f c0       	rjmp	.+62     	; 0x5b60 <DIO_enumSetPortValue+0x82>
    5b22:	2c 81       	ldd	r18, Y+4	; 0x04
    5b24:	3d 81       	ldd	r19, Y+5	; 0x05
    5b26:	22 30       	cpi	r18, 0x02	; 2
    5b28:	31 05       	cpc	r19, r1
    5b2a:	81 f0       	breq	.+32     	; 0x5b4c <DIO_enumSetPortValue+0x6e>
    5b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    5b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    5b30:	83 30       	cpi	r24, 0x03	; 3
    5b32:	91 05       	cpc	r25, r1
    5b34:	81 f0       	breq	.+32     	; 0x5b56 <DIO_enumSetPortValue+0x78>
    5b36:	14 c0       	rjmp	.+40     	; 0x5b60 <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    5b38:	eb e3       	ldi	r30, 0x3B	; 59
    5b3a:	f0 e0       	ldi	r31, 0x00	; 0
    5b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b3e:	80 83       	st	Z, r24
    5b40:	12 c0       	rjmp	.+36     	; 0x5b66 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    5b42:	e8 e3       	ldi	r30, 0x38	; 56
    5b44:	f0 e0       	ldi	r31, 0x00	; 0
    5b46:	8b 81       	ldd	r24, Y+3	; 0x03
    5b48:	80 83       	st	Z, r24
    5b4a:	0d c0       	rjmp	.+26     	; 0x5b66 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    5b4c:	e5 e3       	ldi	r30, 0x35	; 53
    5b4e:	f0 e0       	ldi	r31, 0x00	; 0
    5b50:	8b 81       	ldd	r24, Y+3	; 0x03
    5b52:	80 83       	st	Z, r24
    5b54:	08 c0       	rjmp	.+16     	; 0x5b66 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    5b56:	e2 e3       	ldi	r30, 0x32	; 50
    5b58:	f0 e0       	ldi	r31, 0x00	; 0
    5b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b5c:	80 83       	st	Z, r24
    5b5e:	03 c0       	rjmp	.+6      	; 0x5b66 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    5b60:	19 82       	std	Y+1, r1	; 0x01
    5b62:	01 c0       	rjmp	.+2      	; 0x5b66 <DIO_enumSetPortValue+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    5b64:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    5b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b68:	0f 90       	pop	r0
    5b6a:	0f 90       	pop	r0
    5b6c:	0f 90       	pop	r0
    5b6e:	0f 90       	pop	r0
    5b70:	0f 90       	pop	r0
    5b72:	cf 91       	pop	r28
    5b74:	df 91       	pop	r29
    5b76:	08 95       	ret

00005b78 <SPI_MasterInit>:
#include "SPI_private.h"
#include "SPI_config.h"
#include "SPI_interface.h"

void SPI_MasterInit(void)
{   DDRB_Register |=0xB0;             // B5 ,B4 and B7 are configured as output (MOSI , SS',SCK)
    5b78:	df 93       	push	r29
    5b7a:	cf 93       	push	r28
    5b7c:	cd b7       	in	r28, 0x3d	; 61
    5b7e:	de b7       	in	r29, 0x3e	; 62
    5b80:	a7 e3       	ldi	r26, 0x37	; 55
    5b82:	b0 e0       	ldi	r27, 0x00	; 0
    5b84:	e7 e3       	ldi	r30, 0x37	; 55
    5b86:	f0 e0       	ldi	r31, 0x00	; 0
    5b88:	80 81       	ld	r24, Z
    5b8a:	80 6b       	ori	r24, 0xB0	; 176
    5b8c:	8c 93       	st	X, r24
	SPCR=0x50;               //SPI is Enable , MSB is transmitted first , Master SPI , SCK is low when idle,Sample in Leading Edge, FOSC/128.
    5b8e:	ed e2       	ldi	r30, 0x2D	; 45
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	80 e5       	ldi	r24, 0x50	; 80
    5b94:	80 83       	st	Z, r24
	SPSR=0x00;               //Flag is reset , and FOSC/128 is used .
    5b96:	ee e2       	ldi	r30, 0x2E	; 46
    5b98:	f0 e0       	ldi	r31, 0x00	; 0
    5b9a:	10 82       	st	Z, r1
}
    5b9c:	cf 91       	pop	r28
    5b9e:	df 91       	pop	r29
    5ba0:	08 95       	ret

00005ba2 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{   DDRB_Register &= (~(1<<6)) ;    // B6 are configured as input (MISO)
    5ba2:	df 93       	push	r29
    5ba4:	cf 93       	push	r28
    5ba6:	cd b7       	in	r28, 0x3d	; 61
    5ba8:	de b7       	in	r29, 0x3e	; 62
    5baa:	a7 e3       	ldi	r26, 0x37	; 55
    5bac:	b0 e0       	ldi	r27, 0x00	; 0
    5bae:	e7 e3       	ldi	r30, 0x37	; 55
    5bb0:	f0 e0       	ldi	r31, 0x00	; 0
    5bb2:	80 81       	ld	r24, Z
    5bb4:	8f 7b       	andi	r24, 0xBF	; 191
    5bb6:	8c 93       	st	X, r24
	SPCR=0x40;            //SPI is Enable , MSB is transmitted first,  Slave SPI ,SCK is low when idle,Sample in Leading Edge, FOSC/128.
    5bb8:	ed e2       	ldi	r30, 0x2D	; 45
    5bba:	f0 e0       	ldi	r31, 0x00	; 0
    5bbc:	80 e4       	ldi	r24, 0x40	; 64
    5bbe:	80 83       	st	Z, r24
	SPSR=0x00;            //Flag is reset , and FOSC/128 is used .
    5bc0:	ee e2       	ldi	r30, 0x2E	; 46
    5bc2:	f0 e0       	ldi	r31, 0x00	; 0
    5bc4:	10 82       	st	Z, r1
}
    5bc6:	cf 91       	pop	r28
    5bc8:	df 91       	pop	r29
    5bca:	08 95       	ret

00005bcc <SPI_SendChar>:


void SPI_SendChar(u8 idata)
{
    5bcc:	df 93       	push	r29
    5bce:	cf 93       	push	r28
    5bd0:	0f 92       	push	r0
    5bd2:	cd b7       	in	r28, 0x3d	; 61
    5bd4:	de b7       	in	r29, 0x3e	; 62
    5bd6:	89 83       	std	Y+1, r24	; 0x01
	SPDR=idata;                     //Send input data to the Data register
    5bd8:	ef e2       	ldi	r30, 0x2F	; 47
    5bda:	f0 e0       	ldi	r31, 0x00	; 0
    5bdc:	89 81       	ldd	r24, Y+1	; 0x01
    5bde:	80 83       	st	Z, r24
	while( (SPSR&&(1<<7))==0 ) ;      // While Transmission not completed wait .  (To aviod overlapping of data transmission )
    5be0:	ee e2       	ldi	r30, 0x2E	; 46
    5be2:	f0 e0       	ldi	r31, 0x00	; 0
    5be4:	80 81       	ld	r24, Z
    5be6:	88 23       	and	r24, r24
    5be8:	d9 f3       	breq	.-10     	; 0x5be0 <SPI_SendChar+0x14>

}
    5bea:	0f 90       	pop	r0
    5bec:	cf 91       	pop	r28
    5bee:	df 91       	pop	r29
    5bf0:	08 95       	ret

00005bf2 <SPI_GetChar>:

u8 SPI_GetChar(void)
{
    5bf2:	df 93       	push	r29
    5bf4:	cf 93       	push	r28
    5bf6:	cd b7       	in	r28, 0x3d	; 61
    5bf8:	de b7       	in	r29, 0x3e	; 62
	while( (SPSR&&(1<<7))==0 ) ;   // While Transmission not completed wait untill it's complete
    5bfa:	ee e2       	ldi	r30, 0x2E	; 46
    5bfc:	f0 e0       	ldi	r31, 0x00	; 0
    5bfe:	80 81       	ld	r24, Z
    5c00:	88 23       	and	r24, r24
    5c02:	d9 f3       	breq	.-10     	; 0x5bfa <SPI_GetChar+0x8>
	return SPDR;                 //Return the received data found in Datareister .
    5c04:	ef e2       	ldi	r30, 0x2F	; 47
    5c06:	f0 e0       	ldi	r31, 0x00	; 0
    5c08:	80 81       	ld	r24, Z
}
    5c0a:	cf 91       	pop	r28
    5c0c:	df 91       	pop	r29
    5c0e:	08 95       	ret

00005c10 <UART_voidInit>:
#include "UART_private.h"
#include "UART_config.h"
#include "UART_interface.h"

void UART_voidInit(void)
{
    5c10:	df 93       	push	r29
    5c12:	cf 93       	push	r28
    5c14:	cd b7       	in	r28, 0x3d	; 61
    5c16:	de b7       	in	r29, 0x3e	; 62
    /* MODE */
    #if UART_MODE == UART_MODE_ASYNC
        CLR_BIT(UCSRC, UMSEL);
    5c18:	a0 e4       	ldi	r26, 0x40	; 64
    5c1a:	b0 e0       	ldi	r27, 0x00	; 0
    5c1c:	e0 e4       	ldi	r30, 0x40	; 64
    5c1e:	f0 e0       	ldi	r31, 0x00	; 0
    5c20:	80 81       	ld	r24, Z
    5c22:	8f 7b       	andi	r24, 0xBF	; 191
    5c24:	8c 93       	st	X, r24
        SET_BIT(UCSRC, UMSEL);
    #endif

    /* PARITY */
    #if UART_PARITY == UART_PARITY_DISABLED
        CLR_BIT(UCSRC, UPM0); CLR_BIT(UCSRC, UPM1);
    5c26:	a0 e4       	ldi	r26, 0x40	; 64
    5c28:	b0 e0       	ldi	r27, 0x00	; 0
    5c2a:	e0 e4       	ldi	r30, 0x40	; 64
    5c2c:	f0 e0       	ldi	r31, 0x00	; 0
    5c2e:	80 81       	ld	r24, Z
    5c30:	8f 7e       	andi	r24, 0xEF	; 239
    5c32:	8c 93       	st	X, r24
    5c34:	a0 e4       	ldi	r26, 0x40	; 64
    5c36:	b0 e0       	ldi	r27, 0x00	; 0
    5c38:	e0 e4       	ldi	r30, 0x40	; 64
    5c3a:	f0 e0       	ldi	r31, 0x00	; 0
    5c3c:	80 81       	ld	r24, Z
    5c3e:	8f 7d       	andi	r24, 0xDF	; 223
    5c40:	8c 93       	st	X, r24

    /* STOP BITS */
    #if UART_STOPBITS == UART_STOPBITS_1
        CLR_BIT(UCSRC, USBS);
    #else
        SET_BIT(UCSRC, USBS);
    5c42:	a0 e4       	ldi	r26, 0x40	; 64
    5c44:	b0 e0       	ldi	r27, 0x00	; 0
    5c46:	e0 e4       	ldi	r30, 0x40	; 64
    5c48:	f0 e0       	ldi	r31, 0x00	; 0
    5c4a:	80 81       	ld	r24, Z
    5c4c:	88 60       	ori	r24, 0x08	; 8
    5c4e:	8c 93       	st	X, r24
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_6
        CLR_BIT(UCSRB, UCSZ2); CLR_BIT(UCSRC, UCSZ1); SET_BIT(UCSRC, UCSZ0);
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_7
        CLR_BIT(UCSRB, UCSZ2); SET_BIT(UCSRC, UCSZ1); CLR_BIT(UCSRC, UCSZ0);
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_8
        CLR_BIT(UCSRB, UCSZ2); SET_BIT(UCSRC, UCSZ1); SET_BIT(UCSRC, UCSZ0);
    5c50:	aa e2       	ldi	r26, 0x2A	; 42
    5c52:	b0 e0       	ldi	r27, 0x00	; 0
    5c54:	ea e2       	ldi	r30, 0x2A	; 42
    5c56:	f0 e0       	ldi	r31, 0x00	; 0
    5c58:	80 81       	ld	r24, Z
    5c5a:	8b 7f       	andi	r24, 0xFB	; 251
    5c5c:	8c 93       	st	X, r24
    5c5e:	a0 e4       	ldi	r26, 0x40	; 64
    5c60:	b0 e0       	ldi	r27, 0x00	; 0
    5c62:	e0 e4       	ldi	r30, 0x40	; 64
    5c64:	f0 e0       	ldi	r31, 0x00	; 0
    5c66:	80 81       	ld	r24, Z
    5c68:	84 60       	ori	r24, 0x04	; 4
    5c6a:	8c 93       	st	X, r24
    5c6c:	a0 e4       	ldi	r26, 0x40	; 64
    5c6e:	b0 e0       	ldi	r27, 0x00	; 0
    5c70:	e0 e4       	ldi	r30, 0x40	; 64
    5c72:	f0 e0       	ldi	r31, 0x00	; 0
    5c74:	80 81       	ld	r24, Z
    5c76:	82 60       	ori	r24, 0x02	; 2
    5c78:	8c 93       	st	X, r24
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_9
        SET_BIT(UCSRB, UCSZ2); SET_BIT(UCSRC, UCSZ1); SET_BIT(UCSRC, UCSZ0);
    #endif

    /* BAUD RATE */
    UBRRL = (u8)(UART_BAUDRATE);
    5c7a:	e9 e2       	ldi	r30, 0x29	; 41
    5c7c:	f0 e0       	ldi	r31, 0x00	; 0
    5c7e:	8f ec       	ldi	r24, 0xCF	; 207
    5c80:	80 83       	st	Z, r24
    UBRRH = (u8)((UART_BAUDRATE >> 8) & 0x7F);  // Make sure URSEL is clear
    5c82:	e0 e4       	ldi	r30, 0x40	; 64
    5c84:	f0 e0       	ldi	r31, 0x00	; 0
    5c86:	10 82       	st	Z, r1

    /* Enable TX, RX */
    SET_BIT(UCSRB, TXEN);
    5c88:	aa e2       	ldi	r26, 0x2A	; 42
    5c8a:	b0 e0       	ldi	r27, 0x00	; 0
    5c8c:	ea e2       	ldi	r30, 0x2A	; 42
    5c8e:	f0 e0       	ldi	r31, 0x00	; 0
    5c90:	80 81       	ld	r24, Z
    5c92:	88 60       	ori	r24, 0x08	; 8
    5c94:	8c 93       	st	X, r24
    SET_BIT(UCSRB, RXEN);
    5c96:	aa e2       	ldi	r26, 0x2A	; 42
    5c98:	b0 e0       	ldi	r27, 0x00	; 0
    5c9a:	ea e2       	ldi	r30, 0x2A	; 42
    5c9c:	f0 e0       	ldi	r31, 0x00	; 0
    5c9e:	80 81       	ld	r24, Z
    5ca0:	80 61       	ori	r24, 0x10	; 16
    5ca2:	8c 93       	st	X, r24
}
    5ca4:	cf 91       	pop	r28
    5ca6:	df 91       	pop	r29
    5ca8:	08 95       	ret

00005caa <UART_voidSendByte>:

void UART_voidSendByte(u8 data)
{
    5caa:	df 93       	push	r29
    5cac:	cf 93       	push	r28
    5cae:	0f 92       	push	r0
    5cb0:	cd b7       	in	r28, 0x3d	; 61
    5cb2:	de b7       	in	r29, 0x3e	; 62
    5cb4:	89 83       	std	Y+1, r24	; 0x01
    while(GET_BIT(UCSRA, UDRE) == 0);  // Wait until UDR is ready
    5cb6:	eb e2       	ldi	r30, 0x2B	; 43
    5cb8:	f0 e0       	ldi	r31, 0x00	; 0
    5cba:	80 81       	ld	r24, Z
    5cbc:	88 2f       	mov	r24, r24
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	80 72       	andi	r24, 0x20	; 32
    5cc2:	90 70       	andi	r25, 0x00	; 0
    5cc4:	95 95       	asr	r25
    5cc6:	87 95       	ror	r24
    5cc8:	95 95       	asr	r25
    5cca:	87 95       	ror	r24
    5ccc:	95 95       	asr	r25
    5cce:	87 95       	ror	r24
    5cd0:	95 95       	asr	r25
    5cd2:	87 95       	ror	r24
    5cd4:	95 95       	asr	r25
    5cd6:	87 95       	ror	r24
    5cd8:	00 97       	sbiw	r24, 0x00	; 0
    5cda:	69 f3       	breq	.-38     	; 0x5cb6 <UART_voidSendByte+0xc>
    UDR = data;
    5cdc:	ec e2       	ldi	r30, 0x2C	; 44
    5cde:	f0 e0       	ldi	r31, 0x00	; 0
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
    5ce2:	80 83       	st	Z, r24
}
    5ce4:	0f 90       	pop	r0
    5ce6:	cf 91       	pop	r28
    5ce8:	df 91       	pop	r29
    5cea:	08 95       	ret

00005cec <UART_u8RecieveByte>:

u8 UART_u8RecieveByte(void)
{
    5cec:	df 93       	push	r29
    5cee:	cf 93       	push	r28
    5cf0:	cd b7       	in	r28, 0x3d	; 61
    5cf2:	de b7       	in	r29, 0x3e	; 62
    while(GET_BIT(UCSRA, RXC) == 0);  // Wait until data is received
    5cf4:	eb e2       	ldi	r30, 0x2B	; 43
    5cf6:	f0 e0       	ldi	r31, 0x00	; 0
    5cf8:	80 81       	ld	r24, Z
    5cfa:	88 1f       	adc	r24, r24
    5cfc:	88 27       	eor	r24, r24
    5cfe:	88 1f       	adc	r24, r24
    5d00:	88 2f       	mov	r24, r24
    5d02:	90 e0       	ldi	r25, 0x00	; 0
    5d04:	90 70       	andi	r25, 0x00	; 0
    5d06:	00 97       	sbiw	r24, 0x00	; 0
    5d08:	a9 f3       	breq	.-22     	; 0x5cf4 <UART_u8RecieveByte+0x8>
    return UDR;
    5d0a:	ec e2       	ldi	r30, 0x2C	; 44
    5d0c:	f0 e0       	ldi	r31, 0x00	; 0
    5d0e:	80 81       	ld	r24, Z
}
    5d10:	cf 91       	pop	r28
    5d12:	df 91       	pop	r29
    5d14:	08 95       	ret

00005d16 <UART_voidDisable>:

void UART_voidDisable(void)
{
    5d16:	df 93       	push	r29
    5d18:	cf 93       	push	r28
    5d1a:	cd b7       	in	r28, 0x3d	; 61
    5d1c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB, TXEN);
    5d1e:	aa e2       	ldi	r26, 0x2A	; 42
    5d20:	b0 e0       	ldi	r27, 0x00	; 0
    5d22:	ea e2       	ldi	r30, 0x2A	; 42
    5d24:	f0 e0       	ldi	r31, 0x00	; 0
    5d26:	80 81       	ld	r24, Z
    5d28:	87 7f       	andi	r24, 0xF7	; 247
    5d2a:	8c 93       	st	X, r24
    CLR_BIT(UCSRB, RXEN);
    5d2c:	aa e2       	ldi	r26, 0x2A	; 42
    5d2e:	b0 e0       	ldi	r27, 0x00	; 0
    5d30:	ea e2       	ldi	r30, 0x2A	; 42
    5d32:	f0 e0       	ldi	r31, 0x00	; 0
    5d34:	80 81       	ld	r24, Z
    5d36:	8f 7e       	andi	r24, 0xEF	; 239
    5d38:	8c 93       	st	X, r24
}
    5d3a:	cf 91       	pop	r28
    5d3c:	df 91       	pop	r29
    5d3e:	08 95       	ret

00005d40 <__mulsi3>:
    5d40:	62 9f       	mul	r22, r18
    5d42:	d0 01       	movw	r26, r0
    5d44:	73 9f       	mul	r23, r19
    5d46:	f0 01       	movw	r30, r0
    5d48:	82 9f       	mul	r24, r18
    5d4a:	e0 0d       	add	r30, r0
    5d4c:	f1 1d       	adc	r31, r1
    5d4e:	64 9f       	mul	r22, r20
    5d50:	e0 0d       	add	r30, r0
    5d52:	f1 1d       	adc	r31, r1
    5d54:	92 9f       	mul	r25, r18
    5d56:	f0 0d       	add	r31, r0
    5d58:	83 9f       	mul	r24, r19
    5d5a:	f0 0d       	add	r31, r0
    5d5c:	74 9f       	mul	r23, r20
    5d5e:	f0 0d       	add	r31, r0
    5d60:	65 9f       	mul	r22, r21
    5d62:	f0 0d       	add	r31, r0
    5d64:	99 27       	eor	r25, r25
    5d66:	72 9f       	mul	r23, r18
    5d68:	b0 0d       	add	r27, r0
    5d6a:	e1 1d       	adc	r30, r1
    5d6c:	f9 1f       	adc	r31, r25
    5d6e:	63 9f       	mul	r22, r19
    5d70:	b0 0d       	add	r27, r0
    5d72:	e1 1d       	adc	r30, r1
    5d74:	f9 1f       	adc	r31, r25
    5d76:	bd 01       	movw	r22, r26
    5d78:	cf 01       	movw	r24, r30
    5d7a:	11 24       	eor	r1, r1
    5d7c:	08 95       	ret

00005d7e <__udivmodsi4>:
    5d7e:	a1 e2       	ldi	r26, 0x21	; 33
    5d80:	1a 2e       	mov	r1, r26
    5d82:	aa 1b       	sub	r26, r26
    5d84:	bb 1b       	sub	r27, r27
    5d86:	fd 01       	movw	r30, r26
    5d88:	0d c0       	rjmp	.+26     	; 0x5da4 <__udivmodsi4_ep>

00005d8a <__udivmodsi4_loop>:
    5d8a:	aa 1f       	adc	r26, r26
    5d8c:	bb 1f       	adc	r27, r27
    5d8e:	ee 1f       	adc	r30, r30
    5d90:	ff 1f       	adc	r31, r31
    5d92:	a2 17       	cp	r26, r18
    5d94:	b3 07       	cpc	r27, r19
    5d96:	e4 07       	cpc	r30, r20
    5d98:	f5 07       	cpc	r31, r21
    5d9a:	20 f0       	brcs	.+8      	; 0x5da4 <__udivmodsi4_ep>
    5d9c:	a2 1b       	sub	r26, r18
    5d9e:	b3 0b       	sbc	r27, r19
    5da0:	e4 0b       	sbc	r30, r20
    5da2:	f5 0b       	sbc	r31, r21

00005da4 <__udivmodsi4_ep>:
    5da4:	66 1f       	adc	r22, r22
    5da6:	77 1f       	adc	r23, r23
    5da8:	88 1f       	adc	r24, r24
    5daa:	99 1f       	adc	r25, r25
    5dac:	1a 94       	dec	r1
    5dae:	69 f7       	brne	.-38     	; 0x5d8a <__udivmodsi4_loop>
    5db0:	60 95       	com	r22
    5db2:	70 95       	com	r23
    5db4:	80 95       	com	r24
    5db6:	90 95       	com	r25
    5db8:	9b 01       	movw	r18, r22
    5dba:	ac 01       	movw	r20, r24
    5dbc:	bd 01       	movw	r22, r26
    5dbe:	cf 01       	movw	r24, r30
    5dc0:	08 95       	ret

00005dc2 <__prologue_saves__>:
    5dc2:	2f 92       	push	r2
    5dc4:	3f 92       	push	r3
    5dc6:	4f 92       	push	r4
    5dc8:	5f 92       	push	r5
    5dca:	6f 92       	push	r6
    5dcc:	7f 92       	push	r7
    5dce:	8f 92       	push	r8
    5dd0:	9f 92       	push	r9
    5dd2:	af 92       	push	r10
    5dd4:	bf 92       	push	r11
    5dd6:	cf 92       	push	r12
    5dd8:	df 92       	push	r13
    5dda:	ef 92       	push	r14
    5ddc:	ff 92       	push	r15
    5dde:	0f 93       	push	r16
    5de0:	1f 93       	push	r17
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	cd b7       	in	r28, 0x3d	; 61
    5de8:	de b7       	in	r29, 0x3e	; 62
    5dea:	ca 1b       	sub	r28, r26
    5dec:	db 0b       	sbc	r29, r27
    5dee:	0f b6       	in	r0, 0x3f	; 63
    5df0:	f8 94       	cli
    5df2:	de bf       	out	0x3e, r29	; 62
    5df4:	0f be       	out	0x3f, r0	; 63
    5df6:	cd bf       	out	0x3d, r28	; 61
    5df8:	09 94       	ijmp

00005dfa <__epilogue_restores__>:
    5dfa:	2a 88       	ldd	r2, Y+18	; 0x12
    5dfc:	39 88       	ldd	r3, Y+17	; 0x11
    5dfe:	48 88       	ldd	r4, Y+16	; 0x10
    5e00:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e02:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e04:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e06:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e08:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e0c:	b9 84       	ldd	r11, Y+9	; 0x09
    5e0e:	c8 84       	ldd	r12, Y+8	; 0x08
    5e10:	df 80       	ldd	r13, Y+7	; 0x07
    5e12:	ee 80       	ldd	r14, Y+6	; 0x06
    5e14:	fd 80       	ldd	r15, Y+5	; 0x05
    5e16:	0c 81       	ldd	r16, Y+4	; 0x04
    5e18:	1b 81       	ldd	r17, Y+3	; 0x03
    5e1a:	aa 81       	ldd	r26, Y+2	; 0x02
    5e1c:	b9 81       	ldd	r27, Y+1	; 0x01
    5e1e:	ce 0f       	add	r28, r30
    5e20:	d1 1d       	adc	r29, r1
    5e22:	0f b6       	in	r0, 0x3f	; 63
    5e24:	f8 94       	cli
    5e26:	de bf       	out	0x3e, r29	; 62
    5e28:	0f be       	out	0x3f, r0	; 63
    5e2a:	cd bf       	out	0x3d, r28	; 61
    5e2c:	ed 01       	movw	r28, r26
    5e2e:	08 95       	ret

00005e30 <_exit>:
    5e30:	f8 94       	cli

00005e32 <__stop_program>:
    5e32:	ff cf       	rjmp	.-2      	; 0x5e32 <__stop_program>
