
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003200  00003294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800082  00800082  000032b6  2**0
                  ALLOC
  3 .debug_aranges 00000428  00000000  00000000  000032b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006fa  00000000  00000000  000036de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031d3  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000180d  00000000  00000000  00006fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000032ff  00000000  00000000  000087b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  0000bab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a53  00000000  00000000  0000c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000ca9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000f13f  00000000  00000000  0000d269  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0001c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__vector_1>
       8:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__vector_2>
       c:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__vector_3>
      10:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:




int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6c 97       	sbiw	r28, 0x1c	; 28
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_voidInit();
     b5a:	0e 94 2f 18 	call	0x305e	; 0x305e <UART_voidInit>
	while(1)
	{
		UART_voidSendByte('W');
     b5e:	87 e5       	ldi	r24, 0x57	; 87
     b60:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <UART_voidSendByte>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	aa e7       	ldi	r26, 0x7A	; 122
     b6a:	b4 e4       	ldi	r27, 0x44	; 68
     b6c:	89 8f       	std	Y+25, r24	; 0x19
     b6e:	9a 8f       	std	Y+26, r25	; 0x1a
     b70:	ab 8f       	std	Y+27, r26	; 0x1b
     b72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	69 8d       	ldd	r22, Y+25	; 0x19
     b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a ef       	ldi	r20, 0xFA	; 250
     b82:	54 e4       	ldi	r21, 0x44	; 68
     b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	8d 8b       	std	Y+21, r24	; 0x15
     b8e:	9e 8b       	std	Y+22, r25	; 0x16
     b90:	af 8b       	std	Y+23, r26	; 0x17
     b92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b94:	6d 89       	ldd	r22, Y+21	; 0x15
     b96:	7e 89       	ldd	r23, Y+22	; 0x16
     b98:	8f 89       	ldd	r24, Y+23	; 0x17
     b9a:	98 8d       	ldd	r25, Y+24	; 0x18
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	2c f4       	brge	.+10     	; 0xbb6 <main+0x70>
		__ticks = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9c 8b       	std	Y+20, r25	; 0x14
     bb2:	8b 8b       	std	Y+19, r24	; 0x13
     bb4:	3f c0       	rjmp	.+126    	; 0xc34 <main+0xee>
	else if (__tmp > 65535)
     bb6:	6d 89       	ldd	r22, Y+21	; 0x15
     bb8:	7e 89       	ldd	r23, Y+22	; 0x16
     bba:	8f 89       	ldd	r24, Y+23	; 0x17
     bbc:	98 8d       	ldd	r25, Y+24	; 0x18
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bca:	18 16       	cp	r1, r24
     bcc:	4c f5       	brge	.+82     	; 0xc20 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	69 8d       	ldd	r22, Y+25	; 0x19
     bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9c 8b       	std	Y+20, r25	; 0x14
     bf4:	8b 8b       	std	Y+19, r24	; 0x13
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <main+0xd0>
     bf8:	88 ec       	ldi	r24, 0xC8	; 200
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9a 8b       	std	Y+18, r25	; 0x12
     bfe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c00:	89 89       	ldd	r24, Y+17	; 0x11
     c02:	9a 89       	ldd	r25, Y+18	; 0x12
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <main+0xbe>
     c08:	9a 8b       	std	Y+18, r25	; 0x12
     c0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0c:	8b 89       	ldd	r24, Y+19	; 0x13
     c0e:	9c 89       	ldd	r25, Y+20	; 0x14
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9c 8b       	std	Y+20, r25	; 0x14
     c14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	8b 89       	ldd	r24, Y+19	; 0x13
     c18:	9c 89       	ldd	r25, Y+20	; 0x14
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <main+0xb2>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c20:	6d 89       	ldd	r22, Y+21	; 0x15
     c22:	7e 89       	ldd	r23, Y+22	; 0x16
     c24:	8f 89       	ldd	r24, Y+23	; 0x17
     c26:	98 8d       	ldd	r25, Y+24	; 0x18
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9c 8b       	std	Y+20, r25	; 0x14
     c32:	8b 8b       	std	Y+19, r24	; 0x13
     c34:	8b 89       	ldd	r24, Y+19	; 0x13
     c36:	9c 89       	ldd	r25, Y+20	; 0x14
     c38:	98 8b       	std	Y+16, r25	; 0x10
     c3a:	8f 87       	std	Y+15, r24	; 0x0f
     c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3e:	98 89       	ldd	r25, Y+16	; 0x10
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <main+0xfa>
     c44:	98 8b       	std	Y+16, r25	; 0x10
     c46:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		UART_voidSendByte('G');
     c48:	87 e4       	ldi	r24, 0x47	; 71
     c4a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <UART_voidSendByte>
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	aa e7       	ldi	r26, 0x7A	; 122
     c54:	b4 e4       	ldi	r27, 0x44	; 68
     c56:	8b 87       	std	Y+11, r24	; 0x0b
     c58:	9c 87       	std	Y+12, r25	; 0x0c
     c5a:	ad 87       	std	Y+13, r26	; 0x0d
     c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c60:	7c 85       	ldd	r23, Y+12	; 0x0c
     c62:	8d 85       	ldd	r24, Y+13	; 0x0d
     c64:	9e 85       	ldd	r25, Y+14	; 0x0e
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4a ef       	ldi	r20, 0xFA	; 250
     c6c:	54 e4       	ldi	r21, 0x44	; 68
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8f 83       	std	Y+7, r24	; 0x07
     c78:	98 87       	std	Y+8, r25	; 0x08
     c7a:	a9 87       	std	Y+9, r26	; 0x09
     c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c7e:	6f 81       	ldd	r22, Y+7	; 0x07
     c80:	78 85       	ldd	r23, Y+8	; 0x08
     c82:	89 85       	ldd	r24, Y+9	; 0x09
     c84:	9a 85       	ldd	r25, Y+10	; 0x0a
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c92:	88 23       	and	r24, r24
     c94:	2c f4       	brge	.+10     	; 0xca0 <main+0x15a>
		__ticks = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	3f c0       	rjmp	.+126    	; 0xd1e <main+0x1d8>
	else if (__tmp > 65535)
     ca0:	6f 81       	ldd	r22, Y+7	; 0x07
     ca2:	78 85       	ldd	r23, Y+8	; 0x08
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	3f ef       	ldi	r19, 0xFF	; 255
     cac:	4f e7       	ldi	r20, 0x7F	; 127
     cae:	57 e4       	ldi	r21, 0x47	; 71
     cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	4c f5       	brge	.+82     	; 0xd0a <main+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cba:	7c 85       	ldd	r23, Y+12	; 0x0c
     cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	0f c0       	rjmp	.+30     	; 0xd00 <main+0x1ba>
     ce2:	88 ec       	ldi	r24, 0xC8	; 200
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <main+0x1a8>
     cf2:	9c 83       	std	Y+4, r25	; 0x04
     cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	9e 83       	std	Y+6, r25	; 0x06
     cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	9e 81       	ldd	r25, Y+6	; 0x06
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	69 f7       	brne	.-38     	; 0xce2 <main+0x19c>
     d08:	2a cf       	rjmp	.-428    	; 0xb5e <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0a:	6f 81       	ldd	r22, Y+7	; 0x07
     d0c:	78 85       	ldd	r23, Y+8	; 0x08
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <main+0x1e4>
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	15 cf       	rjmp	.-470    	; 0xb5e <main+0x18>

00000d34 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

void KPD_voidInit(void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	/* ROWS -> INT_PULLUP */
	DIO_enumSetPinDirection(KPD_PORT, KPD_R0, DIO_PIN_INPUT);
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R1, DIO_PIN_INPUT);
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R2, DIO_PIN_INPUT);
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	62 e0       	ldi	r22, 0x02	; 2
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	62 e0       	ldi	r22, 0x02	; 2
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R3, DIO_PIN_INPUT);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	63 e0       	ldi	r22, 0x03	; 3
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	63 e0       	ldi	r22, 0x03	; 3
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	/* COLS -> OUTPUT, HIGH */
	DIO_enumSetPinDirection(KPD_PORT, KPD_C0, DIO_PIN_OUTPUT);
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	64 e0       	ldi	r22, 0x04	; 4
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	64 e0       	ldi	r22, 0x04	; 4
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C1, DIO_PIN_OUTPUT);
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	65 e0       	ldi	r22, 0x05	; 5
     da4:	41 e0       	ldi	r20, 0x01	; 1
     da6:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	65 e0       	ldi	r22, 0x05	; 5
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C2, DIO_PIN_OUTPUT);
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	66 e0       	ldi	r22, 0x06	; 6
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	66 e0       	ldi	r22, 0x06	; 6
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C3, DIO_PIN_OUTPUT);
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	67 e0       	ldi	r22, 0x07	; 7
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	67 e0       	ldi	r22, 0x07	; 7
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	
	
	
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <KPD_u8GetPressed>:

u8 KPD_u8GetPressed(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	a0 97       	sbiw	r28, 0x20	; 32
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8RetVal = NOT_PRESSED;
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8d 8f       	std	Y+29, r24	; 0x1d
     dfe:	27 c1       	rjmp	.+590    	; 0x104e <KPD_u8GetPressed+0x26c>
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
     e0a:	1e 8e       	std	Y+30, r1	; 0x1e
     e0c:	14 c1       	rjmp	.+552    	; 0x1036 <KPD_u8GetPressed+0x254>
		{
			DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
     e0e:	9e 01       	movw	r18, r28
     e10:	20 5e       	subi	r18, 0xE0	; 224
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e18:	a9 01       	movw	r20, r18
     e1a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <DIO_enumGetPinValue>
			
			if(LOC_u8GetPressed == 0)
     e1e:	88 a1       	ldd	r24, Y+32	; 0x20
     e20:	88 23       	and	r24, r24
     e22:	09 f0       	breq	.+2      	; 0xe26 <KPD_u8GetPressed+0x44>
     e24:	05 c1       	rjmp	.+522    	; 0x1030 <KPD_u8GetPressed+0x24e>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a8 e4       	ldi	r26, 0x48	; 72
     e2c:	b2 e4       	ldi	r27, 0x42	; 66
     e2e:	89 8f       	std	Y+25, r24	; 0x19
     e30:	9a 8f       	std	Y+26, r25	; 0x1a
     e32:	ab 8f       	std	Y+27, r26	; 0x1b
     e34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e36:	69 8d       	ldd	r22, Y+25	; 0x19
     e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	4a e7       	ldi	r20, 0x7A	; 122
     e44:	53 e4       	ldi	r21, 0x43	; 67
     e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	8d 8b       	std	Y+21, r24	; 0x15
     e50:	9e 8b       	std	Y+22, r25	; 0x16
     e52:	af 8b       	std	Y+23, r26	; 0x17
     e54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e56:	6d 89       	ldd	r22, Y+21	; 0x15
     e58:	7e 89       	ldd	r23, Y+22	; 0x16
     e5a:	8f 89       	ldd	r24, Y+23	; 0x17
     e5c:	98 8d       	ldd	r25, Y+24	; 0x18
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e8       	ldi	r20, 0x80	; 128
     e64:	5f e3       	ldi	r21, 0x3F	; 63
     e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e6a:	88 23       	and	r24, r24
     e6c:	2c f4       	brge	.+10     	; 0xe78 <KPD_u8GetPressed+0x96>
		__ticks = 1;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 8b       	std	Y+20, r25	; 0x14
     e74:	8b 8b       	std	Y+19, r24	; 0x13
     e76:	3f c0       	rjmp	.+126    	; 0xef6 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
     e78:	6d 89       	ldd	r22, Y+21	; 0x15
     e7a:	7e 89       	ldd	r23, Y+22	; 0x16
     e7c:	8f 89       	ldd	r24, Y+23	; 0x17
     e7e:	98 8d       	ldd	r25, Y+24	; 0x18
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	3f ef       	ldi	r19, 0xFF	; 255
     e84:	4f e7       	ldi	r20, 0x7F	; 127
     e86:	57 e4       	ldi	r21, 0x47	; 71
     e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e8c:	18 16       	cp	r1, r24
     e8e:	4c f5       	brge	.+82     	; 0xee2 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e90:	69 8d       	ldd	r22, Y+25	; 0x19
     e92:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e96:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e2       	ldi	r20, 0x20	; 32
     e9e:	51 e4       	ldi	r21, 0x41	; 65
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	bc 01       	movw	r22, r24
     eaa:	cd 01       	movw	r24, r26
     eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9c 8b       	std	Y+20, r25	; 0x14
     eb6:	8b 8b       	std	Y+19, r24	; 0x13
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <KPD_u8GetPressed+0xf6>
     eba:	89 e1       	ldi	r24, 0x19	; 25
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9a 8b       	std	Y+18, r25	; 0x12
     ec0:	89 8b       	std	Y+17, r24	; 0x11
     ec2:	89 89       	ldd	r24, Y+17	; 0x11
     ec4:	9a 89       	ldd	r25, Y+18	; 0x12
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <KPD_u8GetPressed+0xe4>
     eca:	9a 8b       	std	Y+18, r25	; 0x12
     ecc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ece:	8b 89       	ldd	r24, Y+19	; 0x13
     ed0:	9c 89       	ldd	r25, Y+20	; 0x14
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	9c 8b       	std	Y+20, r25	; 0x14
     ed6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed8:	8b 89       	ldd	r24, Y+19	; 0x13
     eda:	9c 89       	ldd	r25, Y+20	; 0x14
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	69 f7       	brne	.-38     	; 0xeba <KPD_u8GetPressed+0xd8>
     ee0:	14 c0       	rjmp	.+40     	; 0xf0a <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee2:	6d 89       	ldd	r22, Y+21	; 0x15
     ee4:	7e 89       	ldd	r23, Y+22	; 0x16
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	9c 8b       	std	Y+20, r25	; 0x14
     ef4:	8b 8b       	std	Y+19, r24	; 0x13
     ef6:	8b 89       	ldd	r24, Y+19	; 0x13
     ef8:	9c 89       	ldd	r25, Y+20	; 0x14
     efa:	98 8b       	std	Y+16, r25	; 0x10
     efc:	8f 87       	std	Y+15, r24	; 0x0f
     efe:	8f 85       	ldd	r24, Y+15	; 0x0f
     f00:	98 89       	ldd	r25, Y+16	; 0x10
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <KPD_u8GetPressed+0x120>
     f06:	98 8b       	std	Y+16, r25	; 0x10
     f08:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50); // bouncing
				DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
     f0a:	9e 01       	movw	r18, r28
     f0c:	20 5e       	subi	r18, 0xE0	; 224
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f14:	a9 01       	movw	r20, r18
     f16:	0e 94 73 14 	call	0x28e6	; 0x28e6 <DIO_enumGetPinValue>
				
				if(LOC_u8GetPressed == 0)
     f1a:	88 a1       	ldd	r24, Y+32	; 0x20
     f1c:	88 23       	and	r24, r24
     f1e:	a9 f4       	brne	.+42     	; 0xf4a <KPD_u8GetPressed+0x168>
				{
					LOC_u8RetVal = KPD_u8Buttons[LOC_u8ROW_Iterator - KPD_ROW_INIT][LOC_u8COL_Iterator - KPD_COL_INIT];
     f20:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f22:	48 2f       	mov	r20, r24
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9c 01       	movw	r18, r24
     f2e:	24 50       	subi	r18, 0x04	; 4
     f30:	30 40       	sbci	r19, 0x00	; 0
     f32:	ca 01       	movw	r24, r20
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	fc 01       	movw	r30, r24
     f42:	e8 59       	subi	r30, 0x98	; 152
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	80 81       	ld	r24, Z
     f48:	8f 8f       	std	Y+31, r24	; 0x1f
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a8 e4       	ldi	r26, 0x48	; 72
     f50:	b3 e4       	ldi	r27, 0x43	; 67
     f52:	8b 87       	std	Y+11, r24	; 0x0b
     f54:	9c 87       	std	Y+12, r25	; 0x0c
     f56:	ad 87       	std	Y+13, r26	; 0x0d
     f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f60:	9e 85       	ldd	r25, Y+14	; 0x0e
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a e7       	ldi	r20, 0x7A	; 122
     f68:	53 e4       	ldi	r21, 0x43	; 67
     f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	8f 83       	std	Y+7, r24	; 0x07
     f74:	98 87       	std	Y+8, r25	; 0x08
     f76:	a9 87       	std	Y+9, r26	; 0x09
     f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f7a:	6f 81       	ldd	r22, Y+7	; 0x07
     f7c:	78 85       	ldd	r23, Y+8	; 0x08
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e8       	ldi	r20, 0x80	; 128
     f88:	5f e3       	ldi	r21, 0x3F	; 63
     f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f8e:	88 23       	and	r24, r24
     f90:	2c f4       	brge	.+10     	; 0xf9c <KPD_u8GetPressed+0x1ba>
		__ticks = 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9e 83       	std	Y+6, r25	; 0x06
     f98:	8d 83       	std	Y+5, r24	; 0x05
     f9a:	3f c0       	rjmp	.+126    	; 0x101a <KPD_u8GetPressed+0x238>
	else if (__tmp > 65535)
     f9c:	6f 81       	ldd	r22, Y+7	; 0x07
     f9e:	78 85       	ldd	r23, Y+8	; 0x08
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	3f ef       	ldi	r19, 0xFF	; 255
     fa8:	4f e7       	ldi	r20, 0x7F	; 127
     faa:	57 e4       	ldi	r21, 0x47	; 71
     fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb0:	18 16       	cp	r1, r24
     fb2:	4c f5       	brge	.+82     	; 0x1006 <KPD_u8GetPressed+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e2       	ldi	r20, 0x20	; 32
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	8d 83       	std	Y+5, r24	; 0x05
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <KPD_u8GetPressed+0x21a>
     fde:	89 e1       	ldi	r24, 0x19	; 25
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9c 83       	std	Y+4, r25	; 0x04
     fe4:	8b 83       	std	Y+3, r24	; 0x03
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	9c 81       	ldd	r25, Y+4	; 0x04
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <KPD_u8GetPressed+0x208>
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	9e 83       	std	Y+6, r25	; 0x06
     ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	69 f7       	brne	.-38     	; 0xfde <KPD_u8GetPressed+0x1fc>
    1004:	1c c0       	rjmp	.+56     	; 0x103e <KPD_u8GetPressed+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	8d 83       	std	Y+5, r24	; 0x05
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <KPD_u8GetPressed+0x244>
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	07 c0       	rjmp	.+14     	; 0x103e <KPD_u8GetPressed+0x25c>
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
    1030:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	8e 8f       	std	Y+30, r24	; 0x1e
    1036:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	08 f4       	brcc	.+2      	; 0x103e <KPD_u8GetPressed+0x25c>
    103c:	e8 ce       	rjmp	.-560    	; 0xe0e <KPD_u8GetPressed+0x2c>
				_delay_ms(200); // if continuous pressing
				break;
			}
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
    1048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	8d 8f       	std	Y+29, r24	; 0x1d
    104e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1050:	87 30       	cpi	r24, 0x07	; 7
    1052:	08 f4       	brcc	.+2      	; 0x1056 <KPD_u8GetPressed+0x274>
    1054:	d5 ce       	rjmp	.-598    	; 0xe00 <KPD_u8GetPressed+0x1e>
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
	}
	
	return LOC_u8RetVal;
    1056:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    1058:	a0 96       	adiw	r28, 0x20	; 32
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "util/delay.h"

void LCD_voidInit()
{
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	c4 55       	subi	r28, 0x54	; 84
    1078:	d0 40       	sbci	r29, 0x00	; 0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(LCD_CTRL_PORT, DIO_PORT_OUTPUT);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <DIO_enumSetPortDirection>
	DIO_enumSetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	6f ef       	ldi	r22, 0xFF	; 255
    1090:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <DIO_enumSetPortDirection>
    1094:	fe 01       	movw	r30, r28
    1096:	ef 5a       	subi	r30, 0xAF	; 175
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 ef       	ldi	r26, 0xF0	; 240
    10a0:	b1 e4       	ldi	r27, 0x41	; 65
    10a2:	80 83       	st	Z, r24
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	a2 83       	std	Z+2, r26	; 0x02
    10a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10aa:	8e 01       	movw	r16, r28
    10ac:	03 5b       	subi	r16, 0xB3	; 179
    10ae:	1f 4f       	sbci	r17, 0xFF	; 255
    10b0:	fe 01       	movw	r30, r28
    10b2:	ef 5a       	subi	r30, 0xAF	; 175
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	4a e7       	ldi	r20, 0x7A	; 122
    10c4:	53 e4       	ldi	r21, 0x43	; 67
    10c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	f8 01       	movw	r30, r16
    10d0:	80 83       	st	Z, r24
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	a2 83       	std	Z+2, r26	; 0x02
    10d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d8:	fe 01       	movw	r30, r28
    10da:	e3 5b       	subi	r30, 0xB3	; 179
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	44 f4       	brge	.+16     	; 0x1106 <LCD_voidInit+0x9c>
		__ticks = 1;
    10f6:	fe 01       	movw	r30, r28
    10f8:	e5 5b       	subi	r30, 0xB5	; 181
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	64 c0       	rjmp	.+200    	; 0x11ce <LCD_voidInit+0x164>
	else if (__tmp > 65535)
    1106:	fe 01       	movw	r30, r28
    1108:	e3 5b       	subi	r30, 0xB3	; 179
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	3f ef       	ldi	r19, 0xFF	; 255
    1118:	4f e7       	ldi	r20, 0x7F	; 127
    111a:	57 e4       	ldi	r21, 0x47	; 71
    111c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1120:	18 16       	cp	r1, r24
    1122:	0c f0       	brlt	.+2      	; 0x1126 <LCD_voidInit+0xbc>
    1124:	43 c0       	rjmp	.+134    	; 0x11ac <LCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	fe 01       	movw	r30, r28
    1128:	ef 5a       	subi	r30, 0xAF	; 175
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8e 01       	movw	r16, r28
    1146:	05 5b       	subi	r16, 0xB5	; 181
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	f8 01       	movw	r30, r16
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
    115c:	1f c0       	rjmp	.+62     	; 0x119c <LCD_voidInit+0x132>
    115e:	fe 01       	movw	r30, r28
    1160:	e7 5b       	subi	r30, 0xB7	; 183
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	89 e1       	ldi	r24, 0x19	; 25
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
    116c:	fe 01       	movw	r30, r28
    116e:	e7 5b       	subi	r30, 0xB7	; 183
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <LCD_voidInit+0x10c>
    117a:	fe 01       	movw	r30, r28
    117c:	e7 5b       	subi	r30, 0xB7	; 183
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	de 01       	movw	r26, r28
    1186:	a5 5b       	subi	r26, 0xB5	; 181
    1188:	bf 4f       	sbci	r27, 0xFF	; 255
    118a:	fe 01       	movw	r30, r28
    118c:	e5 5b       	subi	r30, 0xB5	; 181
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	9c 93       	st	X, r25
    119a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	fe 01       	movw	r30, r28
    119e:	e5 5b       	subi	r30, 0xB5	; 181
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	d1 f6       	brne	.-76     	; 0x115e <LCD_voidInit+0xf4>
    11aa:	27 c0       	rjmp	.+78     	; 0x11fa <LCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ac:	8e 01       	movw	r16, r28
    11ae:	05 5b       	subi	r16, 0xB5	; 181
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	fe 01       	movw	r30, r28
    11b4:	e3 5b       	subi	r30, 0xB3	; 179
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	60 81       	ld	r22, Z
    11ba:	71 81       	ldd	r23, Z+1	; 0x01
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	f8 01       	movw	r30, r16
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	80 83       	st	Z, r24
    11ce:	de 01       	movw	r26, r28
    11d0:	a9 5b       	subi	r26, 0xB9	; 185
    11d2:	bf 4f       	sbci	r27, 0xFF	; 255
    11d4:	fe 01       	movw	r30, r28
    11d6:	e5 5b       	subi	r30, 0xB5	; 181
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	8d 93       	st	X+, r24
    11e0:	9c 93       	st	X, r25
    11e2:	fe 01       	movw	r30, r28
    11e4:	e9 5b       	subi	r30, 0xB9	; 185
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <LCD_voidInit+0x182>
    11f0:	fe 01       	movw	r30, r28
    11f2:	e9 5b       	subi	r30, 0xB9	; 185
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
	//DIO_enumSetPortValue(LCD_CTRL_PORT, DIO_PORT_HIGH);
	_delay_ms(30);

	LCD_voidSendCommand(LCD_HOME);
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_voidSendCommand>
    1200:	fe 01       	movw	r30, r28
    1202:	ed 5b       	subi	r30, 0xBD	; 189
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 e8       	ldi	r26, 0x80	; 128
    120c:	bf e3       	ldi	r27, 0x3F	; 63
    120e:	80 83       	st	Z, r24
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	a2 83       	std	Z+2, r26	; 0x02
    1214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1216:	8e 01       	movw	r16, r28
    1218:	01 5c       	subi	r16, 0xC1	; 193
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	fe 01       	movw	r30, r28
    121e:	ed 5b       	subi	r30, 0xBD	; 189
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	4a e7       	ldi	r20, 0x7A	; 122
    1230:	53 e4       	ldi	r21, 0x43	; 67
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	f8 01       	movw	r30, r16
    123c:	80 83       	st	Z, r24
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	a2 83       	std	Z+2, r26	; 0x02
    1242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1244:	fe 01       	movw	r30, r28
    1246:	ff 96       	adiw	r30, 0x3f	; 63
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125c:	88 23       	and	r24, r24
    125e:	2c f4       	brge	.+10     	; 0x126a <LCD_voidInit+0x200>
		__ticks = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9e af       	std	Y+62, r25	; 0x3e
    1266:	8d af       	std	Y+61, r24	; 0x3d
    1268:	46 c0       	rjmp	.+140    	; 0x12f6 <LCD_voidInit+0x28c>
	else if (__tmp > 65535)
    126a:	fe 01       	movw	r30, r28
    126c:	ff 96       	adiw	r30, 0x3f	; 63
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	64 f5       	brge	.+88     	; 0x12de <LCD_voidInit+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	fe 01       	movw	r30, r28
    1288:	ed 5b       	subi	r30, 0xBD	; 189
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9e af       	std	Y+62, r25	; 0x3e
    12b2:	8d af       	std	Y+61, r24	; 0x3d
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <LCD_voidInit+0x26a>
    12b6:	89 e1       	ldi	r24, 0x19	; 25
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9c af       	std	Y+60, r25	; 0x3c
    12bc:	8b af       	std	Y+59, r24	; 0x3b
    12be:	8b ad       	ldd	r24, Y+59	; 0x3b
    12c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <LCD_voidInit+0x258>
    12c6:	9c af       	std	Y+60, r25	; 0x3c
    12c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    12cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	9e af       	std	Y+62, r25	; 0x3e
    12d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    12d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f7       	brne	.-38     	; 0x12b6 <LCD_voidInit+0x24c>
    12dc:	16 c0       	rjmp	.+44     	; 0x130a <LCD_voidInit+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12de:	fe 01       	movw	r30, r28
    12e0:	ff 96       	adiw	r30, 0x3f	; 63
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9e af       	std	Y+62, r25	; 0x3e
    12f4:	8d af       	std	Y+61, r24	; 0x3d
    12f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12fa:	9a af       	std	Y+58, r25	; 0x3a
    12fc:	89 af       	std	Y+57, r24	; 0x39
    12fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1300:	9a ad       	ldd	r25, Y+58	; 0x3a
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <LCD_voidInit+0x298>
    1306:	9a af       	std	Y+58, r25	; 0x3a
    1308:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	LCD_voidSendCommand(0X38);
    130a:	88 e3       	ldi	r24, 0x38	; 56
    130c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_voidSendCommand>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a0 e8       	ldi	r26, 0x80	; 128
    1316:	bf e3       	ldi	r27, 0x3F	; 63
    1318:	8d ab       	std	Y+53, r24	; 0x35
    131a:	9e ab       	std	Y+54, r25	; 0x36
    131c:	af ab       	std	Y+55, r26	; 0x37
    131e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1320:	6d a9       	ldd	r22, Y+53	; 0x35
    1322:	7e a9       	ldd	r23, Y+54	; 0x36
    1324:	8f a9       	ldd	r24, Y+55	; 0x37
    1326:	98 ad       	ldd	r25, Y+56	; 0x38
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a e7       	ldi	r20, 0x7A	; 122
    132e:	53 e4       	ldi	r21, 0x43	; 67
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	89 ab       	std	Y+49, r24	; 0x31
    133a:	9a ab       	std	Y+50, r25	; 0x32
    133c:	ab ab       	std	Y+51, r26	; 0x33
    133e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1340:	69 a9       	ldd	r22, Y+49	; 0x31
    1342:	7a a9       	ldd	r23, Y+50	; 0x32
    1344:	8b a9       	ldd	r24, Y+51	; 0x33
    1346:	9c a9       	ldd	r25, Y+52	; 0x34
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1354:	88 23       	and	r24, r24
    1356:	2c f4       	brge	.+10     	; 0x1362 <LCD_voidInit+0x2f8>
		__ticks = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	98 ab       	std	Y+48, r25	; 0x30
    135e:	8f a7       	std	Y+47, r24	; 0x2f
    1360:	3f c0       	rjmp	.+126    	; 0x13e0 <LCD_voidInit+0x376>
	else if (__tmp > 65535)
    1362:	69 a9       	ldd	r22, Y+49	; 0x31
    1364:	7a a9       	ldd	r23, Y+50	; 0x32
    1366:	8b a9       	ldd	r24, Y+51	; 0x33
    1368:	9c a9       	ldd	r25, Y+52	; 0x34
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	4f e7       	ldi	r20, 0x7F	; 127
    1370:	57 e4       	ldi	r21, 0x47	; 71
    1372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1376:	18 16       	cp	r1, r24
    1378:	4c f5       	brge	.+82     	; 0x13cc <LCD_voidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137a:	6d a9       	ldd	r22, Y+53	; 0x35
    137c:	7e a9       	ldd	r23, Y+54	; 0x36
    137e:	8f a9       	ldd	r24, Y+55	; 0x37
    1380:	98 ad       	ldd	r25, Y+56	; 0x38
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	51 e4       	ldi	r21, 0x41	; 65
    138a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	98 ab       	std	Y+48, r25	; 0x30
    13a0:	8f a7       	std	Y+47, r24	; 0x2f
    13a2:	0f c0       	rjmp	.+30     	; 0x13c2 <LCD_voidInit+0x358>
    13a4:	89 e1       	ldi	r24, 0x19	; 25
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e a7       	std	Y+46, r25	; 0x2e
    13aa:	8d a7       	std	Y+45, r24	; 0x2d
    13ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <LCD_voidInit+0x346>
    13b4:	9e a7       	std	Y+46, r25	; 0x2e
    13b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ba:	98 a9       	ldd	r25, Y+48	; 0x30
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	98 ab       	std	Y+48, r25	; 0x30
    13c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c4:	98 a9       	ldd	r25, Y+48	; 0x30
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	69 f7       	brne	.-38     	; 0x13a4 <LCD_voidInit+0x33a>
    13ca:	14 c0       	rjmp	.+40     	; 0x13f4 <LCD_voidInit+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13cc:	69 a9       	ldd	r22, Y+49	; 0x31
    13ce:	7a a9       	ldd	r23, Y+50	; 0x32
    13d0:	8b a9       	ldd	r24, Y+51	; 0x33
    13d2:	9c a9       	ldd	r25, Y+52	; 0x34
    13d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	98 ab       	std	Y+48, r25	; 0x30
    13de:	8f a7       	std	Y+47, r24	; 0x2f
    13e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e2:	98 a9       	ldd	r25, Y+48	; 0x30
    13e4:	9c a7       	std	Y+44, r25	; 0x2c
    13e6:	8b a7       	std	Y+43, r24	; 0x2b
    13e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <LCD_voidInit+0x382>
    13f0:	9c a7       	std	Y+44, r25	; 0x2c
    13f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    13f4:	8c e0       	ldi	r24, 0x0C	; 12
    13f6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_voidSendCommand>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e8       	ldi	r26, 0x80	; 128
    1400:	bf e3       	ldi	r27, 0x3F	; 63
    1402:	8f a3       	std	Y+39, r24	; 0x27
    1404:	98 a7       	std	Y+40, r25	; 0x28
    1406:	a9 a7       	std	Y+41, r26	; 0x29
    1408:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	6f a1       	ldd	r22, Y+39	; 0x27
    140c:	78 a5       	ldd	r23, Y+40	; 0x28
    140e:	89 a5       	ldd	r24, Y+41	; 0x29
    1410:	9a a5       	ldd	r25, Y+42	; 0x2a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a e7       	ldi	r20, 0x7A	; 122
    1418:	53 e4       	ldi	r21, 0x43	; 67
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8b a3       	std	Y+35, r24	; 0x23
    1424:	9c a3       	std	Y+36, r25	; 0x24
    1426:	ad a3       	std	Y+37, r26	; 0x25
    1428:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    142a:	6b a1       	ldd	r22, Y+35	; 0x23
    142c:	7c a1       	ldd	r23, Y+36	; 0x24
    142e:	8d a1       	ldd	r24, Y+37	; 0x25
    1430:	9e a1       	ldd	r25, Y+38	; 0x26
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <LCD_voidInit+0x3e2>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9a a3       	std	Y+34, r25	; 0x22
    1448:	89 a3       	std	Y+33, r24	; 0x21
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <LCD_voidInit+0x460>
	else if (__tmp > 65535)
    144c:	6b a1       	ldd	r22, Y+35	; 0x23
    144e:	7c a1       	ldd	r23, Y+36	; 0x24
    1450:	8d a1       	ldd	r24, Y+37	; 0x25
    1452:	9e a1       	ldd	r25, Y+38	; 0x26
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <LCD_voidInit+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	6f a1       	ldd	r22, Y+39	; 0x27
    1466:	78 a5       	ldd	r23, Y+40	; 0x28
    1468:	89 a5       	ldd	r24, Y+41	; 0x29
    146a:	9a a5       	ldd	r25, Y+42	; 0x2a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9a a3       	std	Y+34, r25	; 0x22
    148a:	89 a3       	std	Y+33, r24	; 0x21
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <LCD_voidInit+0x442>
    148e:	89 e1       	ldi	r24, 0x19	; 25
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	98 a3       	std	Y+32, r25	; 0x20
    1494:	8f 8f       	std	Y+31, r24	; 0x1f
    1496:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1498:	98 a1       	ldd	r25, Y+32	; 0x20
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_voidInit+0x430>
    149e:	98 a3       	std	Y+32, r25	; 0x20
    14a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	89 a1       	ldd	r24, Y+33	; 0x21
    14a4:	9a a1       	ldd	r25, Y+34	; 0x22
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9a a3       	std	Y+34, r25	; 0x22
    14aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	89 a1       	ldd	r24, Y+33	; 0x21
    14ae:	9a a1       	ldd	r25, Y+34	; 0x22
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <LCD_voidInit+0x424>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <LCD_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6b a1       	ldd	r22, Y+35	; 0x23
    14b8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ba:	8d a1       	ldd	r24, Y+37	; 0x25
    14bc:	9e a1       	ldd	r25, Y+38	; 0x26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9a a3       	std	Y+34, r25	; 0x22
    14c8:	89 a3       	std	Y+33, r24	; 0x21
    14ca:	89 a1       	ldd	r24, Y+33	; 0x21
    14cc:	9a a1       	ldd	r25, Y+34	; 0x22
    14ce:	9e 8f       	std	Y+30, r25	; 0x1e
    14d0:	8d 8f       	std	Y+29, r24	; 0x1d
    14d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_voidInit+0x46c>
    14da:	9e 8f       	std	Y+30, r25	; 0x1e
    14dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidSendCommand(LCD_CLEAR);
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_voidSendCommand>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e0       	ldi	r26, 0x00	; 0
    14ea:	b0 e4       	ldi	r27, 0x40	; 64
    14ec:	89 8f       	std	Y+25, r24	; 0x19
    14ee:	9a 8f       	std	Y+26, r25	; 0x1a
    14f0:	ab 8f       	std	Y+27, r26	; 0x1b
    14f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f4:	69 8d       	ldd	r22, Y+25	; 0x19
    14f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	4a e7       	ldi	r20, 0x7A	; 122
    1502:	53 e4       	ldi	r21, 0x43	; 67
    1504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	8d 8b       	std	Y+21, r24	; 0x15
    150e:	9e 8b       	std	Y+22, r25	; 0x16
    1510:	af 8b       	std	Y+23, r26	; 0x17
    1512:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1514:	6d 89       	ldd	r22, Y+21	; 0x15
    1516:	7e 89       	ldd	r23, Y+22	; 0x16
    1518:	8f 89       	ldd	r24, Y+23	; 0x17
    151a:	98 8d       	ldd	r25, Y+24	; 0x18
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	5f e3       	ldi	r21, 0x3F	; 63
    1524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1528:	88 23       	and	r24, r24
    152a:	2c f4       	brge	.+10     	; 0x1536 <LCD_voidInit+0x4cc>
		__ticks = 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
    1534:	3f c0       	rjmp	.+126    	; 0x15b4 <LCD_voidInit+0x54a>
	else if (__tmp > 65535)
    1536:	6d 89       	ldd	r22, Y+21	; 0x15
    1538:	7e 89       	ldd	r23, Y+22	; 0x16
    153a:	8f 89       	ldd	r24, Y+23	; 0x17
    153c:	98 8d       	ldd	r25, Y+24	; 0x18
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	4f e7       	ldi	r20, 0x7F	; 127
    1544:	57 e4       	ldi	r21, 0x47	; 71
    1546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154a:	18 16       	cp	r1, r24
    154c:	4c f5       	brge	.+82     	; 0x15a0 <LCD_voidInit+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154e:	69 8d       	ldd	r22, Y+25	; 0x19
    1550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e2       	ldi	r20, 0x20	; 32
    155c:	51 e4       	ldi	r21, 0x41	; 65
    155e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9c 8b       	std	Y+20, r25	; 0x14
    1574:	8b 8b       	std	Y+19, r24	; 0x13
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <LCD_voidInit+0x52c>
    1578:	89 e1       	ldi	r24, 0x19	; 25
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9a 8b       	std	Y+18, r25	; 0x12
    157e:	89 8b       	std	Y+17, r24	; 0x11
    1580:	89 89       	ldd	r24, Y+17	; 0x11
    1582:	9a 89       	ldd	r25, Y+18	; 0x12
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <LCD_voidInit+0x51a>
    1588:	9a 8b       	std	Y+18, r25	; 0x12
    158a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158c:	8b 89       	ldd	r24, Y+19	; 0x13
    158e:	9c 89       	ldd	r25, Y+20	; 0x14
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	9c 8b       	std	Y+20, r25	; 0x14
    1594:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1596:	8b 89       	ldd	r24, Y+19	; 0x13
    1598:	9c 89       	ldd	r25, Y+20	; 0x14
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	69 f7       	brne	.-38     	; 0x1578 <LCD_voidInit+0x50e>
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <LCD_voidInit+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a0:	6d 89       	ldd	r22, Y+21	; 0x15
    15a2:	7e 89       	ldd	r23, Y+22	; 0x16
    15a4:	8f 89       	ldd	r24, Y+23	; 0x17
    15a6:	98 8d       	ldd	r25, Y+24	; 0x18
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9c 8b       	std	Y+20, r25	; 0x14
    15b2:	8b 8b       	std	Y+19, r24	; 0x13
    15b4:	8b 89       	ldd	r24, Y+19	; 0x13
    15b6:	9c 89       	ldd	r25, Y+20	; 0x14
    15b8:	98 8b       	std	Y+16, r25	; 0x10
    15ba:	8f 87       	std	Y+15, r24	; 0x0f
    15bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15be:	98 89       	ldd	r25, Y+16	; 0x10
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <LCD_voidInit+0x556>
    15c4:	98 8b       	std	Y+16, r25	; 0x10
    15c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidSendCommand(LCD_ENTRY_MODE);
    15c8:	86 e0       	ldi	r24, 0x06	; 6
    15ca:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_voidSendCommand>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e8       	ldi	r26, 0x80	; 128
    15d4:	bf e3       	ldi	r27, 0x3F	; 63
    15d6:	8b 87       	std	Y+11, r24	; 0x0b
    15d8:	9c 87       	std	Y+12, r25	; 0x0c
    15da:	ad 87       	std	Y+13, r26	; 0x0d
    15dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a e7       	ldi	r20, 0x7A	; 122
    15ec:	53 e4       	ldi	r21, 0x43	; 67
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	8f 83       	std	Y+7, r24	; 0x07
    15f8:	98 87       	std	Y+8, r25	; 0x08
    15fa:	a9 87       	std	Y+9, r26	; 0x09
    15fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1600:	78 85       	ldd	r23, Y+8	; 0x08
    1602:	89 85       	ldd	r24, Y+9	; 0x09
    1604:	9a 85       	ldd	r25, Y+10	; 0x0a
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	2c f4       	brge	.+10     	; 0x1620 <LCD_voidInit+0x5b6>
		__ticks = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	3f c0       	rjmp	.+126    	; 0x169e <LCD_voidInit+0x634>
	else if (__tmp > 65535)
    1620:	6f 81       	ldd	r22, Y+7	; 0x07
    1622:	78 85       	ldd	r23, Y+8	; 0x08
    1624:	89 85       	ldd	r24, Y+9	; 0x09
    1626:	9a 85       	ldd	r25, Y+10	; 0x0a
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	3f ef       	ldi	r19, 0xFF	; 255
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	57 e4       	ldi	r21, 0x47	; 71
    1630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1634:	18 16       	cp	r1, r24
    1636:	4c f5       	brge	.+82     	; 0x168a <LCD_voidInit+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1638:	6b 85       	ldd	r22, Y+11	; 0x0b
    163a:	7c 85       	ldd	r23, Y+12	; 0x0c
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <LCD_voidInit+0x616>
    1662:	89 e1       	ldi	r24, 0x19	; 25
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <LCD_voidInit+0x604>
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	69 f7       	brne	.-38     	; 0x1662 <LCD_voidInit+0x5f8>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <LCD_voidInit+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168a:	6f 81       	ldd	r22, Y+7	; 0x07
    168c:	78 85       	ldd	r23, Y+8	; 0x08
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	9a 85       	ldd	r25, Y+10	; 0x0a
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_voidInit+0x640>
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    16b2:	cc 5a       	subi	r28, 0xAC	; 172
    16b4:	df 4f       	sbci	r29, 0xFF	; 255
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	08 95       	ret

000016ca <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortValue(LCD_DATA_PORT, command);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <DIO_enumSetPortValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_LOW);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>

	//Send Pulse
	LCD_voidSendPulse();
    16f2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_voidSendPulse>
}
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_HIGH);
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	DIO_enumSetPortValue(LCD_DATA_PORT, data);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	69 81       	ldd	r22, Y+1	; 0x01
    1722:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <DIO_enumSetPortValue>

	//Send Pulse
	LCD_voidSendPulse();
    1726:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <LCD_voidSendPulse>
}
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <LCD_voidSetCursorPosition>:

void LCD_voidSetCursorPosition(u8 row, u8 col)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <LCD_voidSetCursorPosition+0x6>
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	6b 83       	std	Y+3, r22	; 0x03
	u8 pos;
	if(row == 1)
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	21 f4       	brne	.+8      	; 0x1750 <LCD_voidSetCursorPosition+0x1e>
		pos = LCD_CURSOR + (col - 1);
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	81 58       	subi	r24, 0x81	; 129
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <LCD_voidSetCursorPosition+0x24>
	else
		pos = LCD_CURSOR + (col - 1) + 64;
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 54       	subi	r24, 0x41	; 65
    1754:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(pos);
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_voidSendCommand>
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <LCD_voidSendString>:

void LCD_voidSendString(u8* str)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <LCD_voidSendString+0x6>
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	9b 83       	std	Y+3, r25	; 0x03
    1776:	8a 83       	std	Y+2, r24	; 0x02
	u8 ptr = 0;
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	0e c0       	rjmp	.+28     	; 0x1798 <LCD_voidSendString+0x30>
	while(str[ptr] != '\0')
	{
		LCD_voidSendData(str[ptr]);
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	fc 01       	movw	r30, r24
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	80 81       	ld	r24, Z
    178e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_voidSendData>
		ptr++;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8* str)
{
	u8 ptr = 0;
	while(str[ptr] != '\0')
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	9b 81       	ldd	r25, Y+3	; 0x03
    17a2:	fc 01       	movw	r30, r24
    17a4:	e2 0f       	add	r30, r18
    17a6:	f3 1f       	adc	r31, r19
    17a8:	80 81       	ld	r24, Z
    17aa:	88 23       	and	r24, r24
    17ac:	39 f7       	brne	.-50     	; 0x177c <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[ptr]);
		ptr++;
	}
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <LCD_voidSendPulse>:
static void LCD_voidSendPulse()
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	2e 97       	sbiw	r28, 0x0e	; 14
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_HIGH);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e8       	ldi	r26, 0x80	; 128
    17de:	bf e3       	ldi	r27, 0x3F	; 63
    17e0:	8b 87       	std	Y+11, r24	; 0x0b
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	ad 87       	std	Y+13, r26	; 0x0d
    17e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a e7       	ldi	r20, 0x7A	; 122
    17f6:	53 e4       	ldi	r21, 0x43	; 67
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8f 83       	std	Y+7, r24	; 0x07
    1802:	98 87       	std	Y+8, r25	; 0x08
    1804:	a9 87       	std	Y+9, r26	; 0x09
    1806:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1808:	6f 81       	ldd	r22, Y+7	; 0x07
    180a:	78 85       	ldd	r23, Y+8	; 0x08
    180c:	89 85       	ldd	r24, Y+9	; 0x09
    180e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <LCD_voidSendPulse+0x70>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <LCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <LCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	0f c0       	rjmp	.+30     	; 0x188a <LCD_voidSendPulse+0xd0>
    186c:	89 e1       	ldi	r24, 0x19	; 25
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <LCD_voidSendPulse+0xbe>
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <LCD_voidSendPulse+0xb2>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <LCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6f 81       	ldd	r22, Y+7	; 0x07
    1896:	78 85       	ldd	r23, Y+8	; 0x08
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <LCD_voidSendPulse+0xfa>
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_LOW);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>

}
    18c6:	2e 96       	adiw	r28, 0x0e	; 14
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <SSD_voidInit>:
#include "SSD_config.h"

static u8 Local_u8SSDNums[10] = SSD_ArrNums;

void SSD_voidInit(SSD_Type SSD_Configuration)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	00 d0       	rcall	.+0      	; 0x18de <SSD_voidInit+0x6>
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <SSD_voidInit+0x8>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	69 83       	std	Y+1, r22	; 0x01
    18e6:	7a 83       	std	Y+2, r23	; 0x02
    18e8:	8b 83       	std	Y+3, r24	; 0x03
    18ea:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection (SSD_Configuration.DataPort, DIO_PORT_OUTPUT);
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	6f ef       	ldi	r22, 0xFF	; 255
    18f0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <DIO_enumSetPortDirection>
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <SSD_voidSendNumber>:

void SSD_voidSendNumber(SSD_Type SSD_Configuration, u8 Copy_u8Number)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <SSD_voidSendNumber+0x6>
    1908:	00 d0       	rcall	.+0      	; 0x190a <SSD_voidSendNumber+0x8>
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	69 83       	std	Y+1, r22	; 0x01
    1912:	7a 83       	std	Y+2, r23	; 0x02
    1914:	8b 83       	std	Y+3, r24	; 0x03
    1916:	9c 83       	std	Y+4, r25	; 0x04
    1918:	4d 83       	std	Y+5, r20	; 0x05
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	88 23       	and	r24, r24
    191e:	69 f4       	brne	.+26     	; 0x193a <SSD_voidSendNumber+0x38>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, Local_u8SSDNums[Copy_u8Number] );
    1920:	2a 81       	ldd	r18, Y+2	; 0x02
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	fc 01       	movw	r30, r24
    192a:	e8 58       	subi	r30, 0x88	; 136
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	90 81       	ld	r25, Z
    1930:	82 2f       	mov	r24, r18
    1932:	69 2f       	mov	r22, r25
    1934:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <DIO_enumSetPortValue>
    1938:	11 c0       	rjmp	.+34     	; 0x195c <SSD_voidSendNumber+0x5a>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	71 f4       	brne	.+28     	; 0x195c <SSD_voidSendNumber+0x5a>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, ~Local_u8SSDNums[Copy_u8Number]);
    1940:	2a 81       	ldd	r18, Y+2	; 0x02
    1942:	8d 81       	ldd	r24, Y+5	; 0x05
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	fc 01       	movw	r30, r24
    194a:	e8 58       	subi	r30, 0x88	; 136
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	98 2f       	mov	r25, r24
    1952:	90 95       	com	r25
    1954:	82 2f       	mov	r24, r18
    1956:	69 2f       	mov	r22, r25
    1958:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <DIO_enumSetPortValue>
	}
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <SSD_voidEnable>:

void SSD_voidEnable(SSD_Type SSD_Configuration)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <SSD_voidEnable+0x6>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <SSD_voidEnable+0x8>
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	69 83       	std	Y+1, r22	; 0x01
    197a:	7a 83       	std	Y+2, r23	; 0x02
    197c:	8b 83       	std	Y+3, r24	; 0x03
    197e:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	69 2f       	mov	r22, r25
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	88 23       	and	r24, r24
    1990:	39 f4       	brne	.+14     	; 0x19a0 <SSD_voidEnable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	69 2f       	mov	r22, r25
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
    199e:	09 c0       	rjmp	.+18     	; 0x19b2 <SSD_voidEnable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	31 f4       	brne	.+12     	; 0x19b2 <SSD_voidEnable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	69 2f       	mov	r22, r25
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	}
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <SSD_voidDisable>:

void SSD_voidDisable(SSD_Type SSD_Configuration)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <SSD_voidDisable+0x6>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <SSD_voidDisable+0x8>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	69 83       	std	Y+1, r22	; 0x01
    19ce:	7a 83       	std	Y+2, r23	; 0x02
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	69 2f       	mov	r22, r25
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	88 23       	and	r24, r24
    19e4:	39 f4       	brne	.+14     	; 0x19f4 <SSD_voidDisable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	69 2f       	mov	r22, r25
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <SSD_voidDisable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	31 f4       	brne	.+12     	; 0x1a06 <SSD_voidDisable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	69 2f       	mov	r22, r25
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	}
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <SW_voidInit>:
#include "SW_interface.h"
#include "SW_config.h"
#include "SW_private.h"

void SW_voidInit(SW_Type SW_Config)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <SW_voidInit+0x6>
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	69 83       	std	Y+1, r22	; 0x01
    1a22:	7a 83       	std	Y+2, r23	; 0x02
    1a24:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(SW_Config.PORT, SW_Config.PIN, DIO_PIN_INPUT);
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	69 2f       	mov	r22, r25
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
	if(SW_Config.PULL_STATE == SW_INT_PULL_UP)
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 23       	and	r24, r24
    1a36:	31 f4       	brne	.+12     	; 0x1a44 <SW_voidInit+0x30>
		DIO_enumSetPinValue(SW_Config.PORT, SW_Config.PIN, DIO_PIN_OUTPUT);
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	69 2f       	mov	r22, r25
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <SW_u8GetPressed>:

u8 SW_u8GetPressed (SW_Type SW_Config){
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <SW_u8GetPressed+0x6>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <SW_u8GetPressed+0x8>
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	6b 83       	std	Y+3, r22	; 0x03
    1a60:	7c 83       	std	Y+4, r23	; 0x04
    1a62:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    1a64:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    1a66:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.PULL_STATE == SW_INT_PULL_UP) || (SW_Config.PULL_STATE == SW_EXT_PULL_UP) )
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	88 23       	and	r24, r24
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <SW_u8GetPressed+0x24>
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	a1 f4       	brne	.+40     	; 0x1a9c <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	9e 01       	movw	r18, r28
    1a7a:	2e 5f       	subi	r18, 0xFE	; 254
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	69 2f       	mov	r22, r25
    1a80:	a9 01       	movw	r20, r18
    1a82:	0e 94 73 14 	call	0x28e6	; 0x28e6 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 23       	and	r24, r24
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	1b c0       	rjmp	.+54     	; 0x1ac8 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	c1 f4       	brne	.+48     	; 0x1ac8 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1a98:	19 82       	std	Y+1, r1	; 0x01
    1a9a:	16 c0       	rjmp	.+44     	; 0x1ac8 <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.PULL_STATE == SW_EXT_PULL_DOWN)
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	82 30       	cpi	r24, 0x02	; 2
    1aa0:	99 f4       	brne	.+38     	; 0x1ac8 <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	9e 01       	movw	r18, r28
    1aa8:	2e 5f       	subi	r18, 0xFE	; 254
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	69 2f       	mov	r22, r25
    1aae:	a9 01       	movw	r20, r18
    1ab0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	88 23       	and	r24, r24
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1aba:	19 82       	std	Y+1, r1	; 0x01
    1abc:	05 c0       	rjmp	.+10     	; 0x1ac8 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <BUZ_voidInit>:


#include "BUZ_interface.h"

void BUZ_voidInit(BUZ_Type BUZ_Configuration)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <BUZ_voidInit+0x6>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	69 83       	std	Y+1, r22	; 0x01
    1ae8:	7a 83       	std	Y+2, r23	; 0x02
    1aea:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_OUTPUT);
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	69 2f       	mov	r22, r25
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
}
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <BUZ_voidON>:

void BUZ_voidON(BUZ_Type BUZ_Configuration)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <BUZ_voidON+0x6>
    1b0a:	0f 92       	push	r0
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	69 83       	std	Y+1, r22	; 0x01
    1b12:	7a 83       	std	Y+2, r23	; 0x02
    1b14:	8b 83       	std	Y+3, r24	; 0x03
	if(BUZ_Configuration.Active_State == ACTIVE_HIGH)
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	39 f4       	brne	.+14     	; 0x1b2a <BUZ_voidON+0x26>
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_HIGH);
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	69 2f       	mov	r22, r25
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <BUZ_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_LOW);
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	69 2f       	mov	r22, r25
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	}
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <BUZ_voidOff>:

void BUZ_voidOff ( BUZ_Type BUZ_Configuration )
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <BUZ_voidOff+0x6>
    1b48:	0f 92       	push	r0
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	69 83       	std	Y+1, r22	; 0x01
    1b50:	7a 83       	std	Y+2, r23	; 0x02
    1b52:	8b 83       	std	Y+3, r24	; 0x03

	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	39 f4       	brne	.+14     	; 0x1b68 <BUZ_voidOff+0x26>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	69 2f       	mov	r22, r25
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <BUZ_voidOff+0x38>

	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	88 23       	and	r24, r24
    1b6c:	31 f4       	brne	.+12     	; 0x1b7a <BUZ_voidOff+0x38>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH  );
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	69 2f       	mov	r22, r25
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>

	}

}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <BUZ_voidToggle>:


void BUZ_voidToggle(BUZ_Type BUZ_Configuration)
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <BUZ_voidToggle+0x6>
    1b8c:	0f 92       	push	r0
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	69 83       	std	Y+1, r22	; 0x01
    1b94:	7a 83       	std	Y+2, r23	; 0x02
    1b96:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin);
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	69 2f       	mov	r22, r25
    1b9e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_enumTogglePinValue>
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <LED_voidInit>:
#include "LED_interface.h"



void LED_voidInit(LED_Type LED_Configuration)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <LED_voidInit+0x6>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	69 83       	std	Y+1, r22	; 0x01
    1bbc:	7a 83       	std	Y+2, r23	; 0x02
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_OUTPUT);
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	69 2f       	mov	r22, r25
    1bc6:	41 e0       	ldi	r20, 0x01	; 1
    1bc8:	0e 94 55 12 	call	0x24aa	; 0x24aa <DIO_enumSetPinDirection>
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <LED_voidON>:

void LED_voidON(LED_Type LED_Configuration)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <LED_voidON+0x6>
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	69 83       	std	Y+1, r22	; 0x01
    1be6:	7a 83       	std	Y+2, r23	; 0x02
    1be8:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	39 f4       	brne	.+14     	; 0x1bfe <LED_voidON+0x26>
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_HIGH);
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	69 2f       	mov	r22, r25
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
    1bfc:	06 c0       	rjmp	.+12     	; 0x1c0a <LED_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_LOW);
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	69 2f       	mov	r22, r25
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
	}
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <LED_voidOff>:

void LED_voidOff ( LED_Type LED_Configuration )
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <LED_voidOff+0x6>
    1c1c:	0f 92       	push	r0
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	69 83       	std	Y+1, r22	; 0x01
    1c24:	7a 83       	std	Y+2, r23	; 0x02
    1c26:	8b 83       	std	Y+3, r24	; 0x03

	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <LED_voidOff+0x26>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_LOW  );
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	69 2f       	mov	r22, r25
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <LED_voidOff+0x38>

	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	88 23       	and	r24, r24
    1c40:	31 f4       	brne	.+12     	; 0x1c4e <LED_voidOff+0x38>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_HIGH  );
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	69 2f       	mov	r22, r25
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <DIO_enumSetPinValue>

	}

}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <LED_voidToggle>:


void LED_voidToggle(LED_Type LED_Configuration)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <LED_voidToggle+0x6>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	69 83       	std	Y+1, r22	; 0x01
    1c68:	7a 83       	std	Y+2, r23	; 0x02
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.port, LED_Configuration.pin);
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	69 2f       	mov	r22, r25
    1c72:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_enumTogglePinValue>
}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <GIE_voidEnable>:
#include "../../4-LIB/BIT_MATH.h"
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(void)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I_Bit);
    1c8a:	af e5       	ldi	r26, 0x5F	; 95
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	ef e5       	ldi	r30, 0x5F	; 95
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 68       	ori	r24, 0x80	; 128
    1c96:	8c 93       	st	X, r24
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, I_Bit);
    1ca6:	af e5       	ldi	r26, 0x5F	; 95
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	ef e5       	ldi	r30, 0x5F	; 95
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8f 77       	andi	r24, 0x7F	; 127
    1cb2:	8c 93       	st	X, r24
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <TMR1_voidInitFAST_PWM>:
#include "TMR1_config.h"

static void (*TMR1_CALL_BACK_PF)(void) = NULL;

void TMR1_voidInitFAST_PWM(u16 period_us)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <TMR1_voidInitFAST_PWM+0x6>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	/*  Normal port operation, OC1A/OC1B disconnected */
	CLR_BIT(TCCR1A, COM1A1); CLR_BIT(TCCR1A, COM1A1);
    1cc8:	af e4       	ldi	r26, 0x4F	; 79
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ef e4       	ldi	r30, 0x4F	; 79
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 77       	andi	r24, 0x7F	; 127
    1cd4:	8c 93       	st	X, r24
    1cd6:	af e4       	ldi	r26, 0x4F	; 79
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ef e4       	ldi	r30, 0x4F	; 79
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 77       	andi	r24, 0x7F	; 127
    1ce2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B1); CLR_BIT(TCCR1A, COM1B1);
    1ce4:	af e4       	ldi	r26, 0x4F	; 79
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	ef e4       	ldi	r30, 0x4F	; 79
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	8f 7d       	andi	r24, 0xDF	; 223
    1cf0:	8c 93       	st	X, r24
    1cf2:	af e4       	ldi	r26, 0x4F	; 79
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	ef e4       	ldi	r30, 0x4F	; 79
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7d       	andi	r24, 0xDF	; 223
    1cfe:	8c 93       	st	X, r24
	
	/*MODE 14 FAST PWM*/
	SET_BIT(TCCR1B, WGM13); SET_BIT(TCCR1B, WGM12);
    1d00:	ae e4       	ldi	r26, 0x4E	; 78
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	ee e4       	ldi	r30, 0x4E	; 78
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 61       	ori	r24, 0x10	; 16
    1d0c:	8c 93       	st	X, r24
    1d0e:	ae e4       	ldi	r26, 0x4E	; 78
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	ee e4       	ldi	r30, 0x4E	; 78
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	88 60       	ori	r24, 0x08	; 8
    1d1a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11); CLR_BIT(TCCR1A, WGM10);
    1d1c:	af e4       	ldi	r26, 0x4F	; 79
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	ef e4       	ldi	r30, 0x4F	; 79
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	82 60       	ori	r24, 0x02	; 2
    1d28:	8c 93       	st	X, r24
    1d2a:	af e4       	ldi	r26, 0x4F	; 79
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ef e4       	ldi	r30, 0x4F	; 79
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8e 7f       	andi	r24, 0xFE	; 254
    1d36:	8c 93       	st	X, r24
	
	/* SELECT OC1A MODE */
	TCCR1A &= ~(0b11 << COM1A0);
    1d38:	af e4       	ldi	r26, 0x4F	; 79
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ef e4       	ldi	r30, 0x4F	; 79
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 73       	andi	r24, 0x3F	; 63
    1d44:	8c 93       	st	X, r24
	TCCR1A |= TMR1_PWM_OC1A_MODE << COM1A0;
    1d46:	af e4       	ldi	r26, 0x4F	; 79
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	ef e4       	ldi	r30, 0x4F	; 79
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 68       	ori	r24, 0x80	; 128
    1d52:	8c 93       	st	X, r24

	/* SELECT OC1B MODE */
	TCCR1A &= ~(0b11 << COM1B0);
    1d54:	af e4       	ldi	r26, 0x4F	; 79
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	ef e4       	ldi	r30, 0x4F	; 79
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8f 7c       	andi	r24, 0xCF	; 207
    1d60:	8c 93       	st	X, r24
	TCCR1A |= TMR1_PWM_OC1B_MODE << COM1B0;
    1d62:	af e4       	ldi	r26, 0x4F	; 79
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	ef e4       	ldi	r30, 0x4F	; 79
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 63       	ori	r24, 0x30	; 48
    1d6e:	8c 93       	st	X, r24

	ICR1A_ALL = period_us;
    1d70:	e6 e4       	ldi	r30, 0x46	; 70
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
	
	/* CLOCK SELECT F/8 */ 
	CLR_BIT(TCCR1B, CS12); SET_BIT(TCCR1B, CS11); CLR_BIT(TCCR1B, CS10);
    1d7c:	ae e4       	ldi	r26, 0x4E	; 78
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ee e4       	ldi	r30, 0x4E	; 78
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8b 7f       	andi	r24, 0xFB	; 251
    1d88:	8c 93       	st	X, r24
    1d8a:	ae e4       	ldi	r26, 0x4E	; 78
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ee e4       	ldi	r30, 0x4E	; 78
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	82 60       	ori	r24, 0x02	; 2
    1d96:	8c 93       	st	X, r24
    1d98:	ae e4       	ldi	r26, 0x4E	; 78
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ee e4       	ldi	r30, 0x4E	; 78
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8e 7f       	andi	r24, 0xFE	; 254
    1da4:	8c 93       	st	X, r24
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <TMR1_voidSetDutyCycle>:

void TMR1_voidSetDutyCycle(u8 channel, u16 DC_us)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <TMR1_voidSetDutyCycle+0x6>
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <TMR1_voidSetDutyCycle+0x8>
    1db8:	0f 92       	push	r0
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	7b 83       	std	Y+3, r23	; 0x03
    1dc2:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel)
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	3d 83       	std	Y+5, r19	; 0x05
    1dcc:	2c 83       	std	Y+4, r18	; 0x04
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	31 f0       	breq	.+12     	; 0x1de2 <TMR1_voidSetDutyCycle+0x32>
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	21 30       	cpi	r18, 0x01	; 1
    1ddc:	31 05       	cpc	r19, r1
    1dde:	41 f0       	breq	.+16     	; 0x1df0 <TMR1_voidSetDutyCycle+0x40>
    1de0:	0d c0       	rjmp	.+26     	; 0x1dfc <TMR1_voidSetDutyCycle+0x4c>
	{
	case PWM_OCR1A:	OCR1A_ALL = DC_us; break;
    1de2:	ea e4       	ldi	r30, 0x4A	; 74
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	06 c0       	rjmp	.+12     	; 0x1dfc <TMR1_voidSetDutyCycle+0x4c>
	case PWM_OCR1B:	OCR1B_ALL = DC_us; break;
    1df0:	e8 e4       	ldi	r30, 0x48	; 72
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
	}
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <TMR1_voidICU_Init>:


/* ICU */
void TMR1_voidICU_Init(void)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	/* OVF MODE ENABLE */
	CLR_BIT(TCCR1A, WGM10); CLR_BIT(TCCR1A, WGM11);
    1e14:	af e4       	ldi	r26, 0x4F	; 79
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	ef e4       	ldi	r30, 0x4F	; 79
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8e 7f       	andi	r24, 0xFE	; 254
    1e20:	8c 93       	st	X, r24
    1e22:	af e4       	ldi	r26, 0x4F	; 79
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	ef e4       	ldi	r30, 0x4F	; 79
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8d 7f       	andi	r24, 0xFD	; 253
    1e2e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12); CLR_BIT(TCCR1A, WGM13);
    1e30:	ae e4       	ldi	r26, 0x4E	; 78
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ee e4       	ldi	r30, 0x4E	; 78
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	87 7f       	andi	r24, 0xF7	; 247
    1e3c:	8c 93       	st	X, r24
    1e3e:	af e4       	ldi	r26, 0x4F	; 79
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ef e4       	ldi	r30, 0x4F	; 79
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7e       	andi	r24, 0xEF	; 239
    1e4a:	8c 93       	st	X, r24
	
	/* ICU INT ENABLE */
	SET_BIT(TIMSK, 5);
    1e4c:	a9 e5       	ldi	r26, 0x59	; 89
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e9 e5       	ldi	r30, 0x59	; 89
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 62       	ori	r24, 0x20	; 32
    1e58:	8c 93       	st	X, r24
	
	/* CLOCK SELECT F/8 */ 
	CLR_BIT(TCCR1B, CS12); SET_BIT(TCCR1B, CS11); CLR_BIT(TCCR1B, CS10);
    1e5a:	ae e4       	ldi	r26, 0x4E	; 78
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ee e4       	ldi	r30, 0x4E	; 78
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8b 7f       	andi	r24, 0xFB	; 251
    1e66:	8c 93       	st	X, r24
    1e68:	ae e4       	ldi	r26, 0x4E	; 78
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	ee e4       	ldi	r30, 0x4E	; 78
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	82 60       	ori	r24, 0x02	; 2
    1e74:	8c 93       	st	X, r24
    1e76:	ae e4       	ldi	r26, 0x4E	; 78
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	ee e4       	ldi	r30, 0x4E	; 78
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8e 7f       	andi	r24, 0xFE	; 254
    1e82:	8c 93       	st	X, r24
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <TMR1_u16ICU_Read>:

u16 TMR1_u16ICU_Read(void)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
	return ICR1A_ALL;
    1e92:	e6 e4       	ldi	r30, 0x46	; 70
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <TMR1_voidICU_SetEdge>:

void TMR1_voidICU_SetEdge(u8 edge)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <TMR1_voidICU_SetEdge+0x6>
    1ea6:	0f 92       	push	r0
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	3b 83       	std	Y+3, r19	; 0x03
    1eb6:	2a 83       	std	Y+2, r18	; 0x02
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	31 f0       	breq	.+12     	; 0x1ecc <TMR1_voidICU_SetEdge+0x2c>
    1ec0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ec2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ec4:	21 30       	cpi	r18, 0x01	; 1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	49 f0       	breq	.+18     	; 0x1edc <TMR1_voidICU_SetEdge+0x3c>
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <TMR1_voidICU_SetEdge+0x4a>
	{
	case ICU_FALLING_EDGE : CLR_BIT(TCCR1B, ICES1); break;
    1ecc:	ae e4       	ldi	r26, 0x4E	; 78
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ee e4       	ldi	r30, 0x4E	; 78
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8f 7b       	andi	r24, 0xBF	; 191
    1ed8:	8c 93       	st	X, r24
    1eda:	07 c0       	rjmp	.+14     	; 0x1eea <TMR1_voidICU_SetEdge+0x4a>
	case ICU_RISING_EDGE  : SET_BIT(TCCR1B, ICES1); break;
    1edc:	ae e4       	ldi	r26, 0x4E	; 78
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ee e4       	ldi	r30, 0x4E	; 78
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 64       	ori	r24, 0x40	; 64
    1ee8:	8c 93       	st	X, r24
	}
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <TMR1_voidSetCallBack>:

void TMR1_voidSetCallBack(void (*pf)(void))
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <TMR1_voidSetCallBack+0x6>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
	TMR1_CALL_BACK_PF = pf;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	90 93 83 00 	sts	0x0083, r25
    1f0c:	80 93 82 00 	sts	0x0082, r24
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    1f1a:	1f 92       	push	r1
    1f1c:	0f 92       	push	r0
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	0f 92       	push	r0
    1f22:	11 24       	eor	r1, r1
    1f24:	2f 93       	push	r18
    1f26:	3f 93       	push	r19
    1f28:	4f 93       	push	r20
    1f2a:	5f 93       	push	r21
    1f2c:	6f 93       	push	r22
    1f2e:	7f 93       	push	r23
    1f30:	8f 93       	push	r24
    1f32:	9f 93       	push	r25
    1f34:	af 93       	push	r26
    1f36:	bf 93       	push	r27
    1f38:	ef 93       	push	r30
    1f3a:	ff 93       	push	r31
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	TMR1_CALL_BACK_PF();
    1f44:	e0 91 82 00 	lds	r30, 0x0082
    1f48:	f0 91 83 00 	lds	r31, 0x0083
    1f4c:	09 95       	icall
}
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	ff 91       	pop	r31
    1f54:	ef 91       	pop	r30
    1f56:	bf 91       	pop	r27
    1f58:	af 91       	pop	r26
    1f5a:	9f 91       	pop	r25
    1f5c:	8f 91       	pop	r24
    1f5e:	7f 91       	pop	r23
    1f60:	6f 91       	pop	r22
    1f62:	5f 91       	pop	r21
    1f64:	4f 91       	pop	r20
    1f66:	3f 91       	pop	r19
    1f68:	2f 91       	pop	r18
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti

00001f74 <TMR2_voidInitCTC>:
#include "TMR2_config.h"

static void (*TMR2_CALL_BACK_PF)(void) = NULL;

void TMR2_voidInitCTC(void)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
	/* CTC MODE */
	SET_BIT(TCCR2, WGM21);
    1f7c:	a5 e4       	ldi	r26, 0x45	; 69
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e5 e4       	ldi	r30, 0x45	; 69
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	88 60       	ori	r24, 0x08	; 8
    1f88:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM20);
    1f8a:	a5 e4       	ldi	r26, 0x45	; 69
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e5 e4       	ldi	r30, 0x45	; 69
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	8f 7b       	andi	r24, 0xBF	; 191
    1f96:	8c 93       	st	X, r24
	
	/* SET REQUIRED CTC VAL */
	OCR2 = CTC_VAL;
    1f98:	e3 e4       	ldi	r30, 0x43	; 67
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8d e7       	ldi	r24, 0x7D	; 125
    1f9e:	80 83       	st	Z, r24

	/*  Normal port operation, OC2 disconnected */
	CLR_BIT(TCCR2, COM20);
    1fa0:	a5 e4       	ldi	r26, 0x45	; 69
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e4       	ldi	r30, 0x45	; 69
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8f 7e       	andi	r24, 0xEF	; 239
    1fac:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM21);
    1fae:	a5 e4       	ldi	r26, 0x45	; 69
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e4       	ldi	r30, 0x45	; 69
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8f 7d       	andi	r24, 0xDF	; 223
    1fba:	8c 93       	st	X, r24
	
	/* ENABLE INT*/
	SET_BIT(TIMSK , OCIE2) ;
    1fbc:	a9 e5       	ldi	r26, 0x59	; 89
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e9 e5       	ldi	r30, 0x59	; 89
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 68       	ori	r24, 0x80	; 128
    1fc8:	8c 93       	st	X, r24

	/* CLOCK SELECT F/64 */
	SET_BIT(TCCR2, CS22);
    1fca:	a5 e4       	ldi	r26, 0x45	; 69
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e5 e4       	ldi	r30, 0x45	; 69
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	82 60       	ori	r24, 0x02	; 2
    1fd6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    1fd8:	a5 e4       	ldi	r26, 0x45	; 69
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e5 e4       	ldi	r30, 0x45	; 69
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8b 7f       	andi	r24, 0xFB	; 251
    1fe4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS20);
    1fe6:	a5 e4       	ldi	r26, 0x45	; 69
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e5 e4       	ldi	r30, 0x45	; 69
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	8e 7f       	andi	r24, 0xFE	; 254
    1ff2:	8c 93       	st	X, r24
}
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <TMR2_voidSetCTC>:

void TMR2_voidSetCTC(u8 time)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	0f 92       	push	r0
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = time;
    2006:	e3 e4       	ldi	r30, 0x43	; 67
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	80 83       	st	Z, r24
}
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <TMR2_voidSetCallBackCTC>:

void TMR2_voidSetCallBackCTC(void (*pf)(void))
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <TMR2_voidSetCallBackCTC+0x6>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
	 TMR2_CALL_BACK_PF = pf;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	90 93 85 00 	sts	0x0085, r25
    202c:	80 93 84 00 	sts	0x0084, r24
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    203a:	1f 92       	push	r1
    203c:	0f 92       	push	r0
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	0f 92       	push	r0
    2042:	11 24       	eor	r1, r1
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	4f 93       	push	r20
    204a:	5f 93       	push	r21
    204c:	6f 93       	push	r22
    204e:	7f 93       	push	r23
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	af 93       	push	r26
    2056:	bf 93       	push	r27
    2058:	ef 93       	push	r30
    205a:	ff 93       	push	r31
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	TMR2_CALL_BACK_PF();
    2064:	e0 91 84 00 	lds	r30, 0x0084
    2068:	f0 91 85 00 	lds	r31, 0x0085
    206c:	09 95       	icall
}
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	ff 91       	pop	r31
    2074:	ef 91       	pop	r30
    2076:	bf 91       	pop	r27
    2078:	af 91       	pop	r26
    207a:	9f 91       	pop	r25
    207c:	8f 91       	pop	r24
    207e:	7f 91       	pop	r23
    2080:	6f 91       	pop	r22
    2082:	5f 91       	pop	r21
    2084:	4f 91       	pop	r20
    2086:	3f 91       	pop	r19
    2088:	2f 91       	pop	r18
    208a:	0f 90       	pop	r0
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	0f 90       	pop	r0
    2090:	1f 90       	pop	r1
    2092:	18 95       	reti

00002094 <EXTI_voidEnable>:
void (*EXTI0_CallBackPF)(void) = NULL;
void (*EXTI1_CallBackPF)(void) = NULL;
void (*EXTI2_CallBackPF)(void) = NULL;

void EXTI_voidEnable(u8 line, u8 mode)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	2a 97       	sbiw	r28, 0x0a	; 10
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	6a 83       	std	Y+2, r22	; 0x02
	switch(line)
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3a 87       	std	Y+10, r19	; 0x0a
    20b4:	29 87       	std	Y+9, r18	; 0x09
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	61 f0       	breq	.+24     	; 0x20d8 <EXTI_voidEnable+0x44>
    20c0:	29 85       	ldd	r18, Y+9	; 0x09
    20c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <EXTI_voidEnable+0x38>
    20ca:	ca c0       	rjmp	.+404    	; 0x2260 <EXTI_voidEnable+0x1cc>
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <EXTI_voidEnable+0x42>
    20d4:	63 c0       	rjmp	.+198    	; 0x219c <EXTI_voidEnable+0x108>
    20d6:	e9 c0       	rjmp	.+466    	; 0x22aa <EXTI_voidEnable+0x216>
	{
	case EXTI_LINE1 :
		switch(mode)
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	38 87       	std	Y+8, r19	; 0x08
    20e0:	2f 83       	std	Y+7, r18	; 0x07
    20e2:	8f 81       	ldd	r24, Y+7	; 0x07
    20e4:	98 85       	ldd	r25, Y+8	; 0x08
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	91 05       	cpc	r25, r1
    20ea:	21 f1       	breq	.+72     	; 0x2134 <EXTI_voidEnable+0xa0>
    20ec:	2f 81       	ldd	r18, Y+7	; 0x07
    20ee:	38 85       	ldd	r19, Y+8	; 0x08
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	2c f4       	brge	.+10     	; 0x2100 <EXTI_voidEnable+0x6c>
    20f6:	8f 81       	ldd	r24, Y+7	; 0x07
    20f8:	98 85       	ldd	r25, Y+8	; 0x08
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	61 f0       	breq	.+24     	; 0x2116 <EXTI_voidEnable+0x82>
    20fe:	46 c0       	rjmp	.+140    	; 0x218c <EXTI_voidEnable+0xf8>
    2100:	2f 81       	ldd	r18, Y+7	; 0x07
    2102:	38 85       	ldd	r19, Y+8	; 0x08
    2104:	22 30       	cpi	r18, 0x02	; 2
    2106:	31 05       	cpc	r19, r1
    2108:	21 f1       	breq	.+72     	; 0x2152 <EXTI_voidEnable+0xbe>
    210a:	8f 81       	ldd	r24, Y+7	; 0x07
    210c:	98 85       	ldd	r25, Y+8	; 0x08
    210e:	83 30       	cpi	r24, 0x03	; 3
    2110:	91 05       	cpc	r25, r1
    2112:	71 f1       	breq	.+92     	; 0x2170 <EXTI_voidEnable+0xdc>
    2114:	3b c0       	rjmp	.+118    	; 0x218c <EXTI_voidEnable+0xf8>
		{
			case LOW_LEVEL      : CLR_BIT(MCUCR, ISC11); CLR_BIT(MCUCR, ISC10); break;
    2116:	a5 e5       	ldi	r26, 0x55	; 85
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e5 e5       	ldi	r30, 0x55	; 85
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	87 7f       	andi	r24, 0xF7	; 247
    2122:	8c 93       	st	X, r24
    2124:	a5 e5       	ldi	r26, 0x55	; 85
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e5 e5       	ldi	r30, 0x55	; 85
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	8b 7f       	andi	r24, 0xFB	; 251
    2130:	8c 93       	st	X, r24
    2132:	2c c0       	rjmp	.+88     	; 0x218c <EXTI_voidEnable+0xf8>
			case LOGICAL_CHANGE : CLR_BIT(MCUCR, ISC11); SET_BIT(MCUCR, ISC10); break;
    2134:	a5 e5       	ldi	r26, 0x55	; 85
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e5 e5       	ldi	r30, 0x55	; 85
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	87 7f       	andi	r24, 0xF7	; 247
    2140:	8c 93       	st	X, r24
    2142:	a5 e5       	ldi	r26, 0x55	; 85
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e5 e5       	ldi	r30, 0x55	; 85
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	84 60       	ori	r24, 0x04	; 4
    214e:	8c 93       	st	X, r24
    2150:	1d c0       	rjmp	.+58     	; 0x218c <EXTI_voidEnable+0xf8>
			case FALLING_EDGE   : SET_BIT(MCUCR, ISC11); CLR_BIT(MCUCR, ISC10); break;
    2152:	a5 e5       	ldi	r26, 0x55	; 85
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e5       	ldi	r30, 0x55	; 85
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 60       	ori	r24, 0x08	; 8
    215e:	8c 93       	st	X, r24
    2160:	a5 e5       	ldi	r26, 0x55	; 85
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e5 e5       	ldi	r30, 0x55	; 85
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8b 7f       	andi	r24, 0xFB	; 251
    216c:	8c 93       	st	X, r24
    216e:	0e c0       	rjmp	.+28     	; 0x218c <EXTI_voidEnable+0xf8>
			case RISING_EDGE    : SET_BIT(MCUCR, ISC11); SET_BIT(MCUCR, ISC10); break;
    2170:	a5 e5       	ldi	r26, 0x55	; 85
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e5       	ldi	r30, 0x55	; 85
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 60       	ori	r24, 0x08	; 8
    217c:	8c 93       	st	X, r24
    217e:	a5 e5       	ldi	r26, 0x55	; 85
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 e5       	ldi	r30, 0x55	; 85
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	84 60       	ori	r24, 0x04	; 4
    218a:	8c 93       	st	X, r24
		}
		SET_BIT(GICR, INTF1);
    218c:	ab e5       	ldi	r26, 0x5B	; 91
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	eb e5       	ldi	r30, 0x5B	; 91
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	80 68       	ori	r24, 0x80	; 128
    2198:	8c 93       	st	X, r24
    219a:	87 c0       	rjmp	.+270    	; 0x22aa <EXTI_voidEnable+0x216>
		break;

	case EXTI_LINE0 :
		switch(mode)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	3e 83       	std	Y+6, r19	; 0x06
    21a4:	2d 83       	std	Y+5, r18	; 0x05
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	91 05       	cpc	r25, r1
    21ae:	21 f1       	breq	.+72     	; 0x21f8 <EXTI_voidEnable+0x164>
    21b0:	2d 81       	ldd	r18, Y+5	; 0x05
    21b2:	3e 81       	ldd	r19, Y+6	; 0x06
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <EXTI_voidEnable+0x130>
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	61 f0       	breq	.+24     	; 0x21da <EXTI_voidEnable+0x146>
    21c2:	46 c0       	rjmp	.+140    	; 0x2250 <EXTI_voidEnable+0x1bc>
    21c4:	2d 81       	ldd	r18, Y+5	; 0x05
    21c6:	3e 81       	ldd	r19, Y+6	; 0x06
    21c8:	22 30       	cpi	r18, 0x02	; 2
    21ca:	31 05       	cpc	r19, r1
    21cc:	21 f1       	breq	.+72     	; 0x2216 <EXTI_voidEnable+0x182>
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	91 05       	cpc	r25, r1
    21d6:	71 f1       	breq	.+92     	; 0x2234 <EXTI_voidEnable+0x1a0>
    21d8:	3b c0       	rjmp	.+118    	; 0x2250 <EXTI_voidEnable+0x1bc>
		{
			case LOW_LEVEL      : CLR_BIT(MCUCR, ISC01); CLR_BIT(MCUCR, ISC00); break;	
    21da:	a5 e5       	ldi	r26, 0x55	; 85
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e5 e5       	ldi	r30, 0x55	; 85
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8d 7f       	andi	r24, 0xFD	; 253
    21e6:	8c 93       	st	X, r24
    21e8:	a5 e5       	ldi	r26, 0x55	; 85
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e5 e5       	ldi	r30, 0x55	; 85
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8e 7f       	andi	r24, 0xFE	; 254
    21f4:	8c 93       	st	X, r24
    21f6:	2c c0       	rjmp	.+88     	; 0x2250 <EXTI_voidEnable+0x1bc>
			case LOGICAL_CHANGE : CLR_BIT(MCUCR, ISC01); SET_BIT(MCUCR, ISC00); break;	
    21f8:	a5 e5       	ldi	r26, 0x55	; 85
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e5 e5       	ldi	r30, 0x55	; 85
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	8d 7f       	andi	r24, 0xFD	; 253
    2204:	8c 93       	st	X, r24
    2206:	a5 e5       	ldi	r26, 0x55	; 85
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e5 e5       	ldi	r30, 0x55	; 85
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	81 60       	ori	r24, 0x01	; 1
    2212:	8c 93       	st	X, r24
    2214:	1d c0       	rjmp	.+58     	; 0x2250 <EXTI_voidEnable+0x1bc>
			case FALLING_EDGE   : SET_BIT(MCUCR, ISC01); CLR_BIT(MCUCR, ISC00); break;	
    2216:	a5 e5       	ldi	r26, 0x55	; 85
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e5 e5       	ldi	r30, 0x55	; 85
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	82 60       	ori	r24, 0x02	; 2
    2222:	8c 93       	st	X, r24
    2224:	a5 e5       	ldi	r26, 0x55	; 85
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e5 e5       	ldi	r30, 0x55	; 85
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8e 7f       	andi	r24, 0xFE	; 254
    2230:	8c 93       	st	X, r24
    2232:	0e c0       	rjmp	.+28     	; 0x2250 <EXTI_voidEnable+0x1bc>
			case RISING_EDGE    : SET_BIT(MCUCR, ISC01); SET_BIT(MCUCR, ISC00); break;	
    2234:	a5 e5       	ldi	r26, 0x55	; 85
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e5 e5       	ldi	r30, 0x55	; 85
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	82 60       	ori	r24, 0x02	; 2
    2240:	8c 93       	st	X, r24
    2242:	a5 e5       	ldi	r26, 0x55	; 85
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e5 e5       	ldi	r30, 0x55	; 85
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	81 60       	ori	r24, 0x01	; 1
    224e:	8c 93       	st	X, r24
		}
		SET_BIT(GICR, INTF0);
    2250:	ab e5       	ldi	r26, 0x5B	; 91
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	eb e5       	ldi	r30, 0x5B	; 91
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 64       	ori	r24, 0x40	; 64
    225c:	8c 93       	st	X, r24
    225e:	25 c0       	rjmp	.+74     	; 0x22aa <EXTI_voidEnable+0x216>
		break;

	case EXTI_LINE2 : 
		switch(mode)
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3c 83       	std	Y+4, r19	; 0x04
    2268:	2b 83       	std	Y+3, r18	; 0x03
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	31 f0       	breq	.+12     	; 0x227e <EXTI_voidEnable+0x1ea>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	21 30       	cpi	r18, 0x01	; 1
    2278:	31 05       	cpc	r19, r1
    227a:	49 f0       	breq	.+18     	; 0x228e <EXTI_voidEnable+0x1fa>
    227c:	0f c0       	rjmp	.+30     	; 0x229c <EXTI_voidEnable+0x208>
		{
			case EXTI2_FALLING_EDGE : CLR_BIT(MCUCSR, ISC2); break;
    227e:	a4 e5       	ldi	r26, 0x54	; 84
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e4 e5       	ldi	r30, 0x54	; 84
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	8f 7b       	andi	r24, 0xBF	; 191
    228a:	8c 93       	st	X, r24
    228c:	07 c0       	rjmp	.+14     	; 0x229c <EXTI_voidEnable+0x208>
			case EXTI2_RISING_EDGE  : SET_BIT(MCUCSR, ISC2); break;
    228e:	a4 e5       	ldi	r26, 0x54	; 84
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e4 e5       	ldi	r30, 0x54	; 84
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	80 64       	ori	r24, 0x40	; 64
    229a:	8c 93       	st	X, r24
		}	
		SET_BIT(GICR, INTF2);
    229c:	ab e5       	ldi	r26, 0x5B	; 91
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	eb e5       	ldi	r30, 0x5B	; 91
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	80 62       	ori	r24, 0x20	; 32
    22a8:	8c 93       	st	X, r24
		break;
	}
}
    22aa:	2a 96       	adiw	r28, 0x0a	; 10
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(u8 line, void(*pf)(void))
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <EXTI_voidSetCallBack+0x6>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <EXTI_voidSetCallBack+0x8>
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	7b 83       	std	Y+3, r23	; 0x03
    22ce:	6a 83       	std	Y+2, r22	; 0x02
	switch(line)
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	3d 83       	std	Y+5, r19	; 0x05
    22d8:	2c 83       	std	Y+4, r18	; 0x04
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	91 05       	cpc	r25, r1
    22e2:	81 f0       	breq	.+32     	; 0x2304 <EXTI_voidSetCallBack+0x48>
    22e4:	2c 81       	ldd	r18, Y+4	; 0x04
    22e6:	3d 81       	ldd	r19, Y+5	; 0x05
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	91 f0       	breq	.+36     	; 0x2312 <EXTI_voidSetCallBack+0x56>
    22ee:	8c 81       	ldd	r24, Y+4	; 0x04
    22f0:	9d 81       	ldd	r25, Y+5	; 0x05
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	a1 f4       	brne	.+40     	; 0x231e <EXTI_voidSetCallBack+0x62>
	{
	case EXTI_LINE0 : EXTI0_CallBackPF = pf; break;
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	90 93 87 00 	sts	0x0087, r25
    22fe:	80 93 86 00 	sts	0x0086, r24
    2302:	0d c0       	rjmp	.+26     	; 0x231e <EXTI_voidSetCallBack+0x62>
	case EXTI_LINE1 : EXTI1_CallBackPF = pf; break;
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	90 93 89 00 	sts	0x0089, r25
    230c:	80 93 88 00 	sts	0x0088, r24
    2310:	06 c0       	rjmp	.+12     	; 0x231e <EXTI_voidSetCallBack+0x62>
	case EXTI_LINE2 : EXTI2_CallBackPF = pf; break;
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	90 93 8b 00 	sts	0x008B, r25
    231a:	80 93 8a 00 	sts	0x008A, r24
	}
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <EXTI_voidClearFlag>:

void EXTI_voidClearFlag(u8 line)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <EXTI_voidClearFlag+0x6>
    2334:	0f 92       	push	r0
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	89 83       	std	Y+1, r24	; 0x01
    switch(line)
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	3b 83       	std	Y+3, r19	; 0x03
    2344:	2a 83       	std	Y+2, r18	; 0x02
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	91 05       	cpc	r25, r1
    234e:	89 f0       	breq	.+34     	; 0x2372 <EXTI_voidClearFlag+0x44>
    2350:	2a 81       	ldd	r18, Y+2	; 0x02
    2352:	3b 81       	ldd	r19, Y+3	; 0x03
    2354:	22 30       	cpi	r18, 0x02	; 2
    2356:	31 05       	cpc	r19, r1
    2358:	a1 f0       	breq	.+40     	; 0x2382 <EXTI_voidClearFlag+0x54>
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	9b 81       	ldd	r25, Y+3	; 0x03
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	b9 f4       	brne	.+46     	; 0x2390 <EXTI_voidClearFlag+0x62>
    {
        case EXTI_LINE0: SET_BIT(GIFR, INTF0); break;
    2362:	aa e5       	ldi	r26, 0x5A	; 90
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ea e5       	ldi	r30, 0x5A	; 90
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 64       	ori	r24, 0x40	; 64
    236e:	8c 93       	st	X, r24
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <EXTI_voidClearFlag+0x62>
        case EXTI_LINE1: SET_BIT(GIFR, INTF1); break;
    2372:	aa e5       	ldi	r26, 0x5A	; 90
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ea e5       	ldi	r30, 0x5A	; 90
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	80 68       	ori	r24, 0x80	; 128
    237e:	8c 93       	st	X, r24
    2380:	07 c0       	rjmp	.+14     	; 0x2390 <EXTI_voidClearFlag+0x62>
        case EXTI_LINE2: SET_BIT(GIFR, INTF2); break;
    2382:	aa e5       	ldi	r26, 0x5A	; 90
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	ea e5       	ldi	r30, 0x5A	; 90
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 62       	ori	r24, 0x20	; 32
    238e:	8c 93       	st	X, r24
    }
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <__vector_1>:



void  __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    239c:	1f 92       	push	r1
    239e:	0f 92       	push	r0
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	0f 92       	push	r0
    23a4:	11 24       	eor	r1, r1
    23a6:	2f 93       	push	r18
    23a8:	3f 93       	push	r19
    23aa:	4f 93       	push	r20
    23ac:	5f 93       	push	r21
    23ae:	6f 93       	push	r22
    23b0:	7f 93       	push	r23
    23b2:	8f 93       	push	r24
    23b4:	9f 93       	push	r25
    23b6:	af 93       	push	r26
    23b8:	bf 93       	push	r27
    23ba:	ef 93       	push	r30
    23bc:	ff 93       	push	r31
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBackPF();
    23c6:	e0 91 86 00 	lds	r30, 0x0086
    23ca:	f0 91 87 00 	lds	r31, 0x0087
    23ce:	09 95       	icall
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	ff 91       	pop	r31
    23d6:	ef 91       	pop	r30
    23d8:	bf 91       	pop	r27
    23da:	af 91       	pop	r26
    23dc:	9f 91       	pop	r25
    23de:	8f 91       	pop	r24
    23e0:	7f 91       	pop	r23
    23e2:	6f 91       	pop	r22
    23e4:	5f 91       	pop	r21
    23e6:	4f 91       	pop	r20
    23e8:	3f 91       	pop	r19
    23ea:	2f 91       	pop	r18
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	0f 90       	pop	r0
    23f2:	1f 90       	pop	r1
    23f4:	18 95       	reti

000023f6 <__vector_2>:

void  __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    23f6:	1f 92       	push	r1
    23f8:	0f 92       	push	r0
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	0f 92       	push	r0
    23fe:	11 24       	eor	r1, r1
    2400:	2f 93       	push	r18
    2402:	3f 93       	push	r19
    2404:	4f 93       	push	r20
    2406:	5f 93       	push	r21
    2408:	6f 93       	push	r22
    240a:	7f 93       	push	r23
    240c:	8f 93       	push	r24
    240e:	9f 93       	push	r25
    2410:	af 93       	push	r26
    2412:	bf 93       	push	r27
    2414:	ef 93       	push	r30
    2416:	ff 93       	push	r31
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CallBackPF();
    2420:	e0 91 88 00 	lds	r30, 0x0088
    2424:	f0 91 89 00 	lds	r31, 0x0089
    2428:	09 95       	icall
}
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	ff 91       	pop	r31
    2430:	ef 91       	pop	r30
    2432:	bf 91       	pop	r27
    2434:	af 91       	pop	r26
    2436:	9f 91       	pop	r25
    2438:	8f 91       	pop	r24
    243a:	7f 91       	pop	r23
    243c:	6f 91       	pop	r22
    243e:	5f 91       	pop	r21
    2440:	4f 91       	pop	r20
    2442:	3f 91       	pop	r19
    2444:	2f 91       	pop	r18
    2446:	0f 90       	pop	r0
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	0f 90       	pop	r0
    244c:	1f 90       	pop	r1
    244e:	18 95       	reti

00002450 <__vector_3>:

void  __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    2450:	1f 92       	push	r1
    2452:	0f 92       	push	r0
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	0f 92       	push	r0
    2458:	11 24       	eor	r1, r1
    245a:	2f 93       	push	r18
    245c:	3f 93       	push	r19
    245e:	4f 93       	push	r20
    2460:	5f 93       	push	r21
    2462:	6f 93       	push	r22
    2464:	7f 93       	push	r23
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
    246e:	ef 93       	push	r30
    2470:	ff 93       	push	r31
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CallBackPF();
    247a:	e0 91 8a 00 	lds	r30, 0x008A
    247e:	f0 91 8b 00 	lds	r31, 0x008B
    2482:	09 95       	icall
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	ff 91       	pop	r31
    248a:	ef 91       	pop	r30
    248c:	bf 91       	pop	r27
    248e:	af 91       	pop	r26
    2490:	9f 91       	pop	r25
    2492:	8f 91       	pop	r24
    2494:	7f 91       	pop	r23
    2496:	6f 91       	pop	r22
    2498:	5f 91       	pop	r21
    249a:	4f 91       	pop	r20
    249c:	3f 91       	pop	r19
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	0f 90       	pop	r0
    24a6:	1f 90       	pop	r1
    24a8:	18 95       	reti

000024aa <DIO_enumSetPinDirection>:




DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	28 97       	sbiw	r28, 0x08	; 8
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	8a 83       	std	Y+2, r24	; 0x02
    24c0:	6b 83       	std	Y+3, r22	; 0x03
    24c2:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	84 30       	cpi	r24, 0x04	; 4
    24cc:	08 f0       	brcs	.+2      	; 0x24d0 <DIO_enumSetPinDirection+0x26>
    24ce:	f1 c0       	rjmp	.+482    	; 0x26b2 <DIO_enumSetPinDirection+0x208>
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	88 30       	cpi	r24, 0x08	; 8
    24d4:	08 f0       	brcs	.+2      	; 0x24d8 <DIO_enumSetPinDirection+0x2e>
    24d6:	ed c0       	rjmp	.+474    	; 0x26b2 <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    24d8:	8c 81       	ldd	r24, Y+4	; 0x04
    24da:	81 30       	cpi	r24, 0x01	; 1
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <DIO_enumSetPinDirection+0x36>
    24de:	6f c0       	rjmp	.+222    	; 0x25be <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	38 87       	std	Y+8, r19	; 0x08
    24e8:	2f 83       	std	Y+7, r18	; 0x07
    24ea:	8f 81       	ldd	r24, Y+7	; 0x07
    24ec:	98 85       	ldd	r25, Y+8	; 0x08
    24ee:	81 30       	cpi	r24, 0x01	; 1
    24f0:	91 05       	cpc	r25, r1
    24f2:	49 f1       	breq	.+82     	; 0x2546 <DIO_enumSetPinDirection+0x9c>
    24f4:	2f 81       	ldd	r18, Y+7	; 0x07
    24f6:	38 85       	ldd	r19, Y+8	; 0x08
    24f8:	22 30       	cpi	r18, 0x02	; 2
    24fa:	31 05       	cpc	r19, r1
    24fc:	2c f4       	brge	.+10     	; 0x2508 <DIO_enumSetPinDirection+0x5e>
    24fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2500:	98 85       	ldd	r25, Y+8	; 0x08
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	61 f0       	breq	.+24     	; 0x251e <DIO_enumSetPinDirection+0x74>
    2506:	d6 c0       	rjmp	.+428    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
    2508:	2f 81       	ldd	r18, Y+7	; 0x07
    250a:	38 85       	ldd	r19, Y+8	; 0x08
    250c:	22 30       	cpi	r18, 0x02	; 2
    250e:	31 05       	cpc	r19, r1
    2510:	71 f1       	breq	.+92     	; 0x256e <DIO_enumSetPinDirection+0xc4>
    2512:	8f 81       	ldd	r24, Y+7	; 0x07
    2514:	98 85       	ldd	r25, Y+8	; 0x08
    2516:	83 30       	cpi	r24, 0x03	; 3
    2518:	91 05       	cpc	r25, r1
    251a:	e9 f1       	breq	.+122    	; 0x2596 <DIO_enumSetPinDirection+0xec>
    251c:	cb c0       	rjmp	.+406    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    251e:	aa e3       	ldi	r26, 0x3A	; 58
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	ea e3       	ldi	r30, 0x3A	; 58
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	48 2f       	mov	r20, r24
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 2e       	mov	r0, r18
    2536:	02 c0       	rjmp	.+4      	; 0x253c <DIO_enumSetPinDirection+0x92>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	0a 94       	dec	r0
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <DIO_enumSetPinDirection+0x8e>
    2540:	84 2b       	or	r24, r20
    2542:	8c 93       	st	X, r24
    2544:	b7 c0       	rjmp	.+366    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    2546:	a7 e3       	ldi	r26, 0x37	; 55
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e7 e3       	ldi	r30, 0x37	; 55
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	48 2f       	mov	r20, r24
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	02 2e       	mov	r0, r18
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <DIO_enumSetPinDirection+0xba>
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	0a 94       	dec	r0
    2566:	e2 f7       	brpl	.-8      	; 0x2560 <DIO_enumSetPinDirection+0xb6>
    2568:	84 2b       	or	r24, r20
    256a:	8c 93       	st	X, r24
    256c:	a3 c0       	rjmp	.+326    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    256e:	a4 e3       	ldi	r26, 0x34	; 52
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e4 e3       	ldi	r30, 0x34	; 52
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	02 2e       	mov	r0, r18
    2586:	02 c0       	rjmp	.+4      	; 0x258c <DIO_enumSetPinDirection+0xe2>
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	0a 94       	dec	r0
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <DIO_enumSetPinDirection+0xde>
    2590:	84 2b       	or	r24, r20
    2592:	8c 93       	st	X, r24
    2594:	8f c0       	rjmp	.+286    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    2596:	a1 e3       	ldi	r26, 0x31	; 49
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e1 e3       	ldi	r30, 0x31	; 49
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	48 2f       	mov	r20, r24
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	02 2e       	mov	r0, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <DIO_enumSetPinDirection+0x10a>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	0a 94       	dec	r0
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <DIO_enumSetPinDirection+0x106>
    25b8:	84 2b       	or	r24, r20
    25ba:	8c 93       	st	X, r24
    25bc:	7b c0       	rjmp	.+246    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    25be:	8c 81       	ldd	r24, Y+4	; 0x04
    25c0:	88 23       	and	r24, r24
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <DIO_enumSetPinDirection+0x11c>
    25c4:	74 c0       	rjmp	.+232    	; 0x26ae <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	3e 83       	std	Y+6, r19	; 0x06
    25ce:	2d 83       	std	Y+5, r18	; 0x05
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	91 05       	cpc	r25, r1
    25d8:	59 f1       	breq	.+86     	; 0x2630 <DIO_enumSetPinDirection+0x186>
    25da:	2d 81       	ldd	r18, Y+5	; 0x05
    25dc:	3e 81       	ldd	r19, Y+6	; 0x06
    25de:	22 30       	cpi	r18, 0x02	; 2
    25e0:	31 05       	cpc	r19, r1
    25e2:	2c f4       	brge	.+10     	; 0x25ee <DIO_enumSetPinDirection+0x144>
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	69 f0       	breq	.+26     	; 0x2606 <DIO_enumSetPinDirection+0x15c>
    25ec:	63 c0       	rjmp	.+198    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
    25ee:	2d 81       	ldd	r18, Y+5	; 0x05
    25f0:	3e 81       	ldd	r19, Y+6	; 0x06
    25f2:	22 30       	cpi	r18, 0x02	; 2
    25f4:	31 05       	cpc	r19, r1
    25f6:	89 f1       	breq	.+98     	; 0x265a <DIO_enumSetPinDirection+0x1b0>
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	91 05       	cpc	r25, r1
    2600:	09 f4       	brne	.+2      	; 0x2604 <DIO_enumSetPinDirection+0x15a>
    2602:	40 c0       	rjmp	.+128    	; 0x2684 <DIO_enumSetPinDirection+0x1da>
    2604:	57 c0       	rjmp	.+174    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    2606:	aa e3       	ldi	r26, 0x3A	; 58
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	ea e3       	ldi	r30, 0x3A	; 58
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 2e       	mov	r0, r18
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <DIO_enumSetPinDirection+0x17a>
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	0a 94       	dec	r0
    2626:	e2 f7       	brpl	.-8      	; 0x2620 <DIO_enumSetPinDirection+0x176>
    2628:	80 95       	com	r24
    262a:	84 23       	and	r24, r20
    262c:	8c 93       	st	X, r24
    262e:	42 c0       	rjmp	.+132    	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    2630:	a7 e3       	ldi	r26, 0x37	; 55
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e7 e3       	ldi	r30, 0x37	; 55
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	48 2f       	mov	r20, r24
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	02 2e       	mov	r0, r18
    2648:	02 c0       	rjmp	.+4      	; 0x264e <DIO_enumSetPinDirection+0x1a4>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	0a 94       	dec	r0
    2650:	e2 f7       	brpl	.-8      	; 0x264a <DIO_enumSetPinDirection+0x1a0>
    2652:	80 95       	com	r24
    2654:	84 23       	and	r24, r20
    2656:	8c 93       	st	X, r24
    2658:	2d c0       	rjmp	.+90     	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    265a:	a4 e3       	ldi	r26, 0x34	; 52
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e4 e3       	ldi	r30, 0x34	; 52
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	48 2f       	mov	r20, r24
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 2e       	mov	r0, r18
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <DIO_enumSetPinDirection+0x1ce>
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	0a 94       	dec	r0
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <DIO_enumSetPinDirection+0x1ca>
    267c:	80 95       	com	r24
    267e:	84 23       	and	r24, r20
    2680:	8c 93       	st	X, r24
    2682:	18 c0       	rjmp	.+48     	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    2684:	a1 e3       	ldi	r26, 0x31	; 49
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e1 e3       	ldi	r30, 0x31	; 49
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	48 2f       	mov	r20, r24
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	02 2e       	mov	r0, r18
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <DIO_enumSetPinDirection+0x1f8>
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <DIO_enumSetPinDirection+0x1f4>
    26a6:	80 95       	com	r24
    26a8:	84 23       	and	r24, r20
    26aa:	8c 93       	st	X, r24
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    26ae:	19 82       	std	Y+1, r1	; 0x01
    26b0:	01 c0       	rjmp	.+2      	; 0x26b4 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    26b2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    26b6:	28 96       	adiw	r28, 0x08	; 8
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	28 97       	sbiw	r28, 0x08	; 8
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	8a 83       	std	Y+2, r24	; 0x02
    26de:	6b 83       	std	Y+3, r22	; 0x03
    26e0:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	84 30       	cpi	r24, 0x04	; 4
    26ea:	08 f0       	brcs	.+2      	; 0x26ee <DIO_enumSetPinValue+0x26>
    26ec:	f1 c0       	rjmp	.+482    	; 0x28d0 <DIO_enumSetPinValue+0x208>
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	88 30       	cpi	r24, 0x08	; 8
    26f2:	08 f0       	brcs	.+2      	; 0x26f6 <DIO_enumSetPinValue+0x2e>
    26f4:	ed c0       	rjmp	.+474    	; 0x28d0 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	81 30       	cpi	r24, 0x01	; 1
    26fa:	09 f0       	breq	.+2      	; 0x26fe <DIO_enumSetPinValue+0x36>
    26fc:	6f c0       	rjmp	.+222    	; 0x27dc <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	38 87       	std	Y+8, r19	; 0x08
    2706:	2f 83       	std	Y+7, r18	; 0x07
    2708:	8f 81       	ldd	r24, Y+7	; 0x07
    270a:	98 85       	ldd	r25, Y+8	; 0x08
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	91 05       	cpc	r25, r1
    2710:	49 f1       	breq	.+82     	; 0x2764 <DIO_enumSetPinValue+0x9c>
    2712:	2f 81       	ldd	r18, Y+7	; 0x07
    2714:	38 85       	ldd	r19, Y+8	; 0x08
    2716:	22 30       	cpi	r18, 0x02	; 2
    2718:	31 05       	cpc	r19, r1
    271a:	2c f4       	brge	.+10     	; 0x2726 <DIO_enumSetPinValue+0x5e>
    271c:	8f 81       	ldd	r24, Y+7	; 0x07
    271e:	98 85       	ldd	r25, Y+8	; 0x08
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	61 f0       	breq	.+24     	; 0x273c <DIO_enumSetPinValue+0x74>
    2724:	d6 c0       	rjmp	.+428    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
    2726:	2f 81       	ldd	r18, Y+7	; 0x07
    2728:	38 85       	ldd	r19, Y+8	; 0x08
    272a:	22 30       	cpi	r18, 0x02	; 2
    272c:	31 05       	cpc	r19, r1
    272e:	71 f1       	breq	.+92     	; 0x278c <DIO_enumSetPinValue+0xc4>
    2730:	8f 81       	ldd	r24, Y+7	; 0x07
    2732:	98 85       	ldd	r25, Y+8	; 0x08
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	91 05       	cpc	r25, r1
    2738:	e9 f1       	breq	.+122    	; 0x27b4 <DIO_enumSetPinValue+0xec>
    273a:	cb c0       	rjmp	.+406    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    273c:	ab e3       	ldi	r26, 0x3B	; 59
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	eb e3       	ldi	r30, 0x3B	; 59
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	48 2f       	mov	r20, r24
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	02 2e       	mov	r0, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <DIO_enumSetPinValue+0x92>
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	0a 94       	dec	r0
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <DIO_enumSetPinValue+0x8e>
    275e:	84 2b       	or	r24, r20
    2760:	8c 93       	st	X, r24
    2762:	b7 c0       	rjmp	.+366    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    2764:	a8 e3       	ldi	r26, 0x38	; 56
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e8 e3       	ldi	r30, 0x38	; 56
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	48 2f       	mov	r20, r24
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	02 2e       	mov	r0, r18
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <DIO_enumSetPinValue+0xba>
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	0a 94       	dec	r0
    2784:	e2 f7       	brpl	.-8      	; 0x277e <DIO_enumSetPinValue+0xb6>
    2786:	84 2b       	or	r24, r20
    2788:	8c 93       	st	X, r24
    278a:	a3 c0       	rjmp	.+326    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    278c:	a5 e3       	ldi	r26, 0x35	; 53
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e5 e3       	ldi	r30, 0x35	; 53
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	48 2f       	mov	r20, r24
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	02 2e       	mov	r0, r18
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <DIO_enumSetPinValue+0xe2>
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	0a 94       	dec	r0
    27ac:	e2 f7       	brpl	.-8      	; 0x27a6 <DIO_enumSetPinValue+0xde>
    27ae:	84 2b       	or	r24, r20
    27b0:	8c 93       	st	X, r24
    27b2:	8f c0       	rjmp	.+286    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    27b4:	a2 e3       	ldi	r26, 0x32	; 50
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e2 e3       	ldi	r30, 0x32	; 50
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	48 2f       	mov	r20, r24
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <DIO_enumSetPinValue+0x10a>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <DIO_enumSetPinValue+0x106>
    27d6:	84 2b       	or	r24, r20
    27d8:	8c 93       	st	X, r24
    27da:	7b c0       	rjmp	.+246    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	88 23       	and	r24, r24
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <DIO_enumSetPinValue+0x11c>
    27e2:	74 c0       	rjmp	.+232    	; 0x28cc <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	3e 83       	std	Y+6, r19	; 0x06
    27ec:	2d 83       	std	Y+5, r18	; 0x05
    27ee:	8d 81       	ldd	r24, Y+5	; 0x05
    27f0:	9e 81       	ldd	r25, Y+6	; 0x06
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	91 05       	cpc	r25, r1
    27f6:	59 f1       	breq	.+86     	; 0x284e <DIO_enumSetPinValue+0x186>
    27f8:	2d 81       	ldd	r18, Y+5	; 0x05
    27fa:	3e 81       	ldd	r19, Y+6	; 0x06
    27fc:	22 30       	cpi	r18, 0x02	; 2
    27fe:	31 05       	cpc	r19, r1
    2800:	2c f4       	brge	.+10     	; 0x280c <DIO_enumSetPinValue+0x144>
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	69 f0       	breq	.+26     	; 0x2824 <DIO_enumSetPinValue+0x15c>
    280a:	63 c0       	rjmp	.+198    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
    280c:	2d 81       	ldd	r18, Y+5	; 0x05
    280e:	3e 81       	ldd	r19, Y+6	; 0x06
    2810:	22 30       	cpi	r18, 0x02	; 2
    2812:	31 05       	cpc	r19, r1
    2814:	89 f1       	breq	.+98     	; 0x2878 <DIO_enumSetPinValue+0x1b0>
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	83 30       	cpi	r24, 0x03	; 3
    281c:	91 05       	cpc	r25, r1
    281e:	09 f4       	brne	.+2      	; 0x2822 <DIO_enumSetPinValue+0x15a>
    2820:	40 c0       	rjmp	.+128    	; 0x28a2 <DIO_enumSetPinValue+0x1da>
    2822:	57 c0       	rjmp	.+174    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    2824:	ab e3       	ldi	r26, 0x3B	; 59
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	eb e3       	ldi	r30, 0x3B	; 59
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	48 2f       	mov	r20, r24
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	02 2e       	mov	r0, r18
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <DIO_enumSetPinValue+0x17a>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	0a 94       	dec	r0
    2844:	e2 f7       	brpl	.-8      	; 0x283e <DIO_enumSetPinValue+0x176>
    2846:	80 95       	com	r24
    2848:	84 23       	and	r24, r20
    284a:	8c 93       	st	X, r24
    284c:	42 c0       	rjmp	.+132    	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    284e:	a8 e3       	ldi	r26, 0x38	; 56
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e8 e3       	ldi	r30, 0x38	; 56
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	48 2f       	mov	r20, r24
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	02 2e       	mov	r0, r18
    2866:	02 c0       	rjmp	.+4      	; 0x286c <DIO_enumSetPinValue+0x1a4>
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	0a 94       	dec	r0
    286e:	e2 f7       	brpl	.-8      	; 0x2868 <DIO_enumSetPinValue+0x1a0>
    2870:	80 95       	com	r24
    2872:	84 23       	and	r24, r20
    2874:	8c 93       	st	X, r24
    2876:	2d c0       	rjmp	.+90     	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    2878:	a5 e3       	ldi	r26, 0x35	; 53
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e5 e3       	ldi	r30, 0x35	; 53
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	48 2f       	mov	r20, r24
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 2e       	mov	r0, r18
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <DIO_enumSetPinValue+0x1ce>
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	0a 94       	dec	r0
    2898:	e2 f7       	brpl	.-8      	; 0x2892 <DIO_enumSetPinValue+0x1ca>
    289a:	80 95       	com	r24
    289c:	84 23       	and	r24, r20
    289e:	8c 93       	st	X, r24
    28a0:	18 c0       	rjmp	.+48     	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    28a2:	a2 e3       	ldi	r26, 0x32	; 50
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e2 e3       	ldi	r30, 0x32	; 50
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	48 2f       	mov	r20, r24
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	02 2e       	mov	r0, r18
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <DIO_enumSetPinValue+0x1f8>
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	0a 94       	dec	r0
    28c2:	e2 f7       	brpl	.-8      	; 0x28bc <DIO_enumSetPinValue+0x1f4>
    28c4:	80 95       	com	r24
    28c6:	84 23       	and	r24, r20
    28c8:	8c 93       	st	X, r24
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    28cc:	19 82       	std	Y+1, r1	; 0x01
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    28d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01

}
    28d4:	28 96       	adiw	r28, 0x08	; 8
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <DIO_enumGetPinValue>:



DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	27 97       	sbiw	r28, 0x07	; 7
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	8a 83       	std	Y+2, r24	; 0x02
    28fc:	6b 83       	std	Y+3, r22	; 0x03
    28fe:	5d 83       	std	Y+5, r21	; 0x05
    2900:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	84 30       	cpi	r24, 0x04	; 4
    290a:	08 f0       	brcs	.+2      	; 0x290e <DIO_enumGetPinValue+0x28>
    290c:	a6 c0       	rjmp	.+332    	; 0x2a5a <DIO_enumGetPinValue+0x174>
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	88 30       	cpi	r24, 0x08	; 8
    2912:	08 f0       	brcs	.+2      	; 0x2916 <DIO_enumGetPinValue+0x30>
    2914:	a2 c0       	rjmp	.+324    	; 0x2a5a <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	3f 83       	std	Y+7, r19	; 0x07
    291e:	2e 83       	std	Y+6, r18	; 0x06
    2920:	4e 81       	ldd	r20, Y+6	; 0x06
    2922:	5f 81       	ldd	r21, Y+7	; 0x07
    2924:	41 30       	cpi	r20, 0x01	; 1
    2926:	51 05       	cpc	r21, r1
    2928:	c1 f1       	breq	.+112    	; 0x299a <DIO_enumGetPinValue+0xb4>
    292a:	8e 81       	ldd	r24, Y+6	; 0x06
    292c:	9f 81       	ldd	r25, Y+7	; 0x07
    292e:	82 30       	cpi	r24, 0x02	; 2
    2930:	91 05       	cpc	r25, r1
    2932:	34 f4       	brge	.+12     	; 0x2940 <DIO_enumGetPinValue+0x5a>
    2934:	2e 81       	ldd	r18, Y+6	; 0x06
    2936:	3f 81       	ldd	r19, Y+7	; 0x07
    2938:	21 15       	cp	r18, r1
    293a:	31 05       	cpc	r19, r1
    293c:	71 f0       	breq	.+28     	; 0x295a <DIO_enumGetPinValue+0x74>
    293e:	8e c0       	rjmp	.+284    	; 0x2a5c <DIO_enumGetPinValue+0x176>
    2940:	4e 81       	ldd	r20, Y+6	; 0x06
    2942:	5f 81       	ldd	r21, Y+7	; 0x07
    2944:	42 30       	cpi	r20, 0x02	; 2
    2946:	51 05       	cpc	r21, r1
    2948:	09 f4       	brne	.+2      	; 0x294c <DIO_enumGetPinValue+0x66>
    294a:	47 c0       	rjmp	.+142    	; 0x29da <DIO_enumGetPinValue+0xf4>
    294c:	8e 81       	ldd	r24, Y+6	; 0x06
    294e:	9f 81       	ldd	r25, Y+7	; 0x07
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	91 05       	cpc	r25, r1
    2954:	09 f4       	brne	.+2      	; 0x2958 <DIO_enumGetPinValue+0x72>
    2956:	61 c0       	rjmp	.+194    	; 0x2a1a <DIO_enumGetPinValue+0x134>
    2958:	81 c0       	rjmp	.+258    	; 0x2a5c <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    295a:	e9 e3       	ldi	r30, 0x39	; 57
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	48 2f       	mov	r20, r24
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <DIO_enumGetPinValue+0x8e>
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	2a 95       	dec	r18
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <DIO_enumGetPinValue+0x8a>
    2978:	9a 01       	movw	r18, r20
    297a:	28 23       	and	r18, r24
    297c:	39 23       	and	r19, r25
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	88 2f       	mov	r24, r24
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a9 01       	movw	r20, r18
    2986:	02 c0       	rjmp	.+4      	; 0x298c <DIO_enumGetPinValue+0xa6>
    2988:	55 95       	asr	r21
    298a:	47 95       	ror	r20
    298c:	8a 95       	dec	r24
    298e:	e2 f7       	brpl	.-8      	; 0x2988 <DIO_enumGetPinValue+0xa2>
    2990:	ca 01       	movw	r24, r20
    2992:	ec 81       	ldd	r30, Y+4	; 0x04
    2994:	fd 81       	ldd	r31, Y+5	; 0x05
    2996:	80 83       	st	Z, r24
    2998:	61 c0       	rjmp	.+194    	; 0x2a5c <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    299a:	e6 e3       	ldi	r30, 0x36	; 54
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	48 2f       	mov	r20, r24
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <DIO_enumGetPinValue+0xce>
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	2a 95       	dec	r18
    29b6:	e2 f7       	brpl	.-8      	; 0x29b0 <DIO_enumGetPinValue+0xca>
    29b8:	9a 01       	movw	r18, r20
    29ba:	28 23       	and	r18, r24
    29bc:	39 23       	and	r19, r25
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	88 2f       	mov	r24, r24
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a9 01       	movw	r20, r18
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <DIO_enumGetPinValue+0xe6>
    29c8:	55 95       	asr	r21
    29ca:	47 95       	ror	r20
    29cc:	8a 95       	dec	r24
    29ce:	e2 f7       	brpl	.-8      	; 0x29c8 <DIO_enumGetPinValue+0xe2>
    29d0:	ca 01       	movw	r24, r20
    29d2:	ec 81       	ldd	r30, Y+4	; 0x04
    29d4:	fd 81       	ldd	r31, Y+5	; 0x05
    29d6:	80 83       	st	Z, r24
    29d8:	41 c0       	rjmp	.+130    	; 0x2a5c <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    29da:	e3 e3       	ldi	r30, 0x33	; 51
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	48 2f       	mov	r20, r24
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <DIO_enumGetPinValue+0x10e>
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	2a 95       	dec	r18
    29f6:	e2 f7       	brpl	.-8      	; 0x29f0 <DIO_enumGetPinValue+0x10a>
    29f8:	9a 01       	movw	r18, r20
    29fa:	28 23       	and	r18, r24
    29fc:	39 23       	and	r19, r25
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <DIO_enumGetPinValue+0x126>
    2a08:	55 95       	asr	r21
    2a0a:	47 95       	ror	r20
    2a0c:	8a 95       	dec	r24
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <DIO_enumGetPinValue+0x122>
    2a10:	ca 01       	movw	r24, r20
    2a12:	ec 81       	ldd	r30, Y+4	; 0x04
    2a14:	fd 81       	ldd	r31, Y+5	; 0x05
    2a16:	80 83       	st	Z, r24
    2a18:	21 c0       	rjmp	.+66     	; 0x2a5c <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    2a1a:	e0 e3       	ldi	r30, 0x30	; 48
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	48 2f       	mov	r20, r24
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <DIO_enumGetPinValue+0x14e>
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	2a 95       	dec	r18
    2a36:	e2 f7       	brpl	.-8      	; 0x2a30 <DIO_enumGetPinValue+0x14a>
    2a38:	9a 01       	movw	r18, r20
    2a3a:	28 23       	and	r18, r24
    2a3c:	39 23       	and	r19, r25
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a9 01       	movw	r20, r18
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <DIO_enumGetPinValue+0x166>
    2a48:	55 95       	asr	r21
    2a4a:	47 95       	ror	r20
    2a4c:	8a 95       	dec	r24
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <DIO_enumGetPinValue+0x162>
    2a50:	ca 01       	movw	r24, r20
    2a52:	ec 81       	ldd	r30, Y+4	; 0x04
    2a54:	fd 81       	ldd	r31, Y+5	; 0x05
    2a56:	80 83       	st	Z, r24
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    2a5a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a5e:	27 96       	adiw	r28, 0x07	; 7
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <DIO_enumTogglePinValue>:


DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <DIO_enumTogglePinValue+0x6>
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <DIO_enumTogglePinValue+0x8>
    2a78:	0f 92       	push	r0
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
    2a80:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	88 30       	cpi	r24, 0x08	; 8
    2a8a:	08 f0       	brcs	.+2      	; 0x2a8e <DIO_enumTogglePinValue+0x1e>
    2a8c:	6f c0       	rjmp	.+222    	; 0x2b6c <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	3d 83       	std	Y+5, r19	; 0x05
    2a96:	2c 83       	std	Y+4, r18	; 0x04
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	49 f1       	breq	.+82     	; 0x2af4 <DIO_enumTogglePinValue+0x84>
    2aa2:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa4:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa6:	22 30       	cpi	r18, 0x02	; 2
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <DIO_enumTogglePinValue+0x46>
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	61 f0       	breq	.+24     	; 0x2acc <DIO_enumTogglePinValue+0x5c>
    2ab4:	5c c0       	rjmp	.+184    	; 0x2b6e <DIO_enumTogglePinValue+0xfe>
    2ab6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab8:	3d 81       	ldd	r19, Y+5	; 0x05
    2aba:	22 30       	cpi	r18, 0x02	; 2
    2abc:	31 05       	cpc	r19, r1
    2abe:	71 f1       	breq	.+92     	; 0x2b1c <DIO_enumTogglePinValue+0xac>
    2ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac4:	83 30       	cpi	r24, 0x03	; 3
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	e9 f1       	breq	.+122    	; 0x2b44 <DIO_enumTogglePinValue+0xd4>
    2aca:	51 c0       	rjmp	.+162    	; 0x2b6e <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    2acc:	ab e3       	ldi	r26, 0x3B	; 59
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	eb e3       	ldi	r30, 0x3B	; 59
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	48 2f       	mov	r20, r24
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	02 2e       	mov	r0, r18
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <DIO_enumTogglePinValue+0x7a>
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	0a 94       	dec	r0
    2aec:	e2 f7       	brpl	.-8      	; 0x2ae6 <DIO_enumTogglePinValue+0x76>
    2aee:	84 27       	eor	r24, r20
    2af0:	8c 93       	st	X, r24
    2af2:	3d c0       	rjmp	.+122    	; 0x2b6e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    2af4:	a8 e3       	ldi	r26, 0x38	; 56
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e8 e3       	ldi	r30, 0x38	; 56
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	48 2f       	mov	r20, r24
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	02 2e       	mov	r0, r18
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <DIO_enumTogglePinValue+0xa2>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	0a 94       	dec	r0
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <DIO_enumTogglePinValue+0x9e>
    2b16:	84 27       	eor	r24, r20
    2b18:	8c 93       	st	X, r24
    2b1a:	29 c0       	rjmp	.+82     	; 0x2b6e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    2b1c:	a5 e3       	ldi	r26, 0x35	; 53
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e5 e3       	ldi	r30, 0x35	; 53
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	48 2f       	mov	r20, r24
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	02 2e       	mov	r0, r18
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <DIO_enumTogglePinValue+0xca>
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	0a 94       	dec	r0
    2b3c:	e2 f7       	brpl	.-8      	; 0x2b36 <DIO_enumTogglePinValue+0xc6>
    2b3e:	84 27       	eor	r24, r20
    2b40:	8c 93       	st	X, r24
    2b42:	15 c0       	rjmp	.+42     	; 0x2b6e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    2b44:	a2 e3       	ldi	r26, 0x32	; 50
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e2 e3       	ldi	r30, 0x32	; 50
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	48 2f       	mov	r20, r24
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	02 2e       	mov	r0, r18
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <DIO_enumTogglePinValue+0xf2>
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	0a 94       	dec	r0
    2b64:	e2 f7       	brpl	.-8      	; 0x2b5e <DIO_enumTogglePinValue+0xee>
    2b66:	84 27       	eor	r24, r20
    2b68:	8c 93       	st	X, r24
    2b6a:	01 c0       	rjmp	.+2      	; 0x2b6e <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    2b6c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <DIO_enumConnectPullup>:


DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <DIO_enumConnectPullup+0x6>
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <DIO_enumConnectPullup+0x8>
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <DIO_enumConnectPullup+0xa>
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	8a 83       	std	Y+2, r24	; 0x02
    2b90:	6b 83       	std	Y+3, r22	; 0x03
    2b92:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	84 30       	cpi	r24, 0x04	; 4
    2b9c:	08 f0       	brcs	.+2      	; 0x2ba0 <DIO_enumConnectPullup+0x20>
    2b9e:	3e c1       	rjmp	.+636    	; 0x2e1c <DIO_enumConnectPullup+0x29c>
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	88 30       	cpi	r24, 0x08	; 8
    2ba4:	08 f0       	brcs	.+2      	; 0x2ba8 <DIO_enumConnectPullup+0x28>
    2ba6:	3a c1       	rjmp	.+628    	; 0x2e1c <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	28 2f       	mov	r18, r24
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	3e 83       	std	Y+6, r19	; 0x06
    2bb0:	2d 83       	std	Y+5, r18	; 0x05
    2bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	91 05       	cpc	r25, r1
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <DIO_enumConnectPullup+0x3e>
    2bbc:	5d c0       	rjmp	.+186    	; 0x2c78 <DIO_enumConnectPullup+0xf8>
    2bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    2bc0:	3e 81       	ldd	r19, Y+6	; 0x06
    2bc2:	22 30       	cpi	r18, 0x02	; 2
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <DIO_enumConnectPullup+0x52>
    2bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bca:	9e 81       	ldd	r25, Y+6	; 0x06
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	71 f0       	breq	.+28     	; 0x2bec <DIO_enumConnectPullup+0x6c>
    2bd0:	26 c1       	rjmp	.+588    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
    2bd2:	2d 81       	ldd	r18, Y+5	; 0x05
    2bd4:	3e 81       	ldd	r19, Y+6	; 0x06
    2bd6:	22 30       	cpi	r18, 0x02	; 2
    2bd8:	31 05       	cpc	r19, r1
    2bda:	09 f4       	brne	.+2      	; 0x2bde <DIO_enumConnectPullup+0x5e>
    2bdc:	93 c0       	rjmp	.+294    	; 0x2d04 <DIO_enumConnectPullup+0x184>
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	9e 81       	ldd	r25, Y+6	; 0x06
    2be2:	83 30       	cpi	r24, 0x03	; 3
    2be4:	91 05       	cpc	r25, r1
    2be6:	09 f4       	brne	.+2      	; 0x2bea <DIO_enumConnectPullup+0x6a>
    2be8:	d3 c0       	rjmp	.+422    	; 0x2d90 <DIO_enumConnectPullup+0x210>
    2bea:	19 c1       	rjmp	.+562    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2bec:	8c 81       	ldd	r24, Y+4	; 0x04
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	71 f5       	brne	.+92     	; 0x2c4e <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    2bf2:	a0 e5       	ldi	r26, 0x50	; 80
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e0 e5       	ldi	r30, 0x50	; 80
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	8b 7f       	andi	r24, 0xFB	; 251
    2bfe:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    2c00:	aa e3       	ldi	r26, 0x3A	; 58
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	ea e3       	ldi	r30, 0x3A	; 58
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	48 2f       	mov	r20, r24
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <DIO_enumConnectPullup+0x9c>
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	2a 95       	dec	r18
    2c1e:	e2 f7       	brpl	.-8      	; 0x2c18 <DIO_enumConnectPullup+0x98>
    2c20:	80 95       	com	r24
    2c22:	84 23       	and	r24, r20
    2c24:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    2c26:	ab e3       	ldi	r26, 0x3B	; 59
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	eb e3       	ldi	r30, 0x3B	; 59
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	48 2f       	mov	r20, r24
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	02 2e       	mov	r0, r18
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <DIO_enumConnectPullup+0xc4>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	0a 94       	dec	r0
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <DIO_enumConnectPullup+0xc0>
    2c48:	84 2b       	or	r24, r20
    2c4a:	8c 93       	st	X, r24
    2c4c:	e8 c0       	rjmp	.+464    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    2c4e:	ab e3       	ldi	r26, 0x3B	; 59
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	eb e3       	ldi	r30, 0x3B	; 59
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	48 2f       	mov	r20, r24
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	28 2f       	mov	r18, r24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	02 2e       	mov	r0, r18
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <DIO_enumConnectPullup+0xec>
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	0a 94       	dec	r0
    2c6e:	e2 f7       	brpl	.-8      	; 0x2c68 <DIO_enumConnectPullup+0xe8>
    2c70:	80 95       	com	r24
    2c72:	84 23       	and	r24, r20
    2c74:	8c 93       	st	X, r24
    2c76:	d3 c0       	rjmp	.+422    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2c78:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	71 f5       	brne	.+92     	; 0x2cda <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    2c7e:	a0 e5       	ldi	r26, 0x50	; 80
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e0 e5       	ldi	r30, 0x50	; 80
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	8b 7f       	andi	r24, 0xFB	; 251
    2c8a:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    2c8c:	a7 e3       	ldi	r26, 0x37	; 55
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	e7 e3       	ldi	r30, 0x37	; 55
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	48 2f       	mov	r20, r24
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <DIO_enumConnectPullup+0x128>
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	2a 95       	dec	r18
    2caa:	e2 f7       	brpl	.-8      	; 0x2ca4 <DIO_enumConnectPullup+0x124>
    2cac:	80 95       	com	r24
    2cae:	84 23       	and	r24, r20
    2cb0:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    2cb2:	a8 e3       	ldi	r26, 0x38	; 56
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e8 e3       	ldi	r30, 0x38	; 56
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	48 2f       	mov	r20, r24
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	02 2e       	mov	r0, r18
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <DIO_enumConnectPullup+0x150>
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	0a 94       	dec	r0
    2cd2:	e2 f7       	brpl	.-8      	; 0x2ccc <DIO_enumConnectPullup+0x14c>
    2cd4:	84 2b       	or	r24, r20
    2cd6:	8c 93       	st	X, r24
    2cd8:	a2 c0       	rjmp	.+324    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    2cda:	a8 e3       	ldi	r26, 0x38	; 56
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e8 e3       	ldi	r30, 0x38	; 56
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	48 2f       	mov	r20, r24
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	02 2e       	mov	r0, r18
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <DIO_enumConnectPullup+0x178>
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	0a 94       	dec	r0
    2cfa:	e2 f7       	brpl	.-8      	; 0x2cf4 <DIO_enumConnectPullup+0x174>
    2cfc:	80 95       	com	r24
    2cfe:	84 23       	and	r24, r20
    2d00:	8c 93       	st	X, r24
    2d02:	8d c0       	rjmp	.+282    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2d04:	8c 81       	ldd	r24, Y+4	; 0x04
    2d06:	81 30       	cpi	r24, 0x01	; 1
    2d08:	71 f5       	brne	.+92     	; 0x2d66 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    2d0a:	a0 e5       	ldi	r26, 0x50	; 80
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e0 e5       	ldi	r30, 0x50	; 80
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	8b 7f       	andi	r24, 0xFB	; 251
    2d16:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    2d18:	a4 e3       	ldi	r26, 0x34	; 52
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e4 e3       	ldi	r30, 0x34	; 52
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	48 2f       	mov	r20, r24
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <DIO_enumConnectPullup+0x1b4>
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	2a 95       	dec	r18
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <DIO_enumConnectPullup+0x1b0>
    2d38:	80 95       	com	r24
    2d3a:	84 23       	and	r24, r20
    2d3c:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    2d3e:	a5 e3       	ldi	r26, 0x35	; 53
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e5 e3       	ldi	r30, 0x35	; 53
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	48 2f       	mov	r20, r24
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	02 2e       	mov	r0, r18
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <DIO_enumConnectPullup+0x1dc>
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	0a 94       	dec	r0
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <DIO_enumConnectPullup+0x1d8>
    2d60:	84 2b       	or	r24, r20
    2d62:	8c 93       	st	X, r24
    2d64:	5c c0       	rjmp	.+184    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    2d66:	a5 e3       	ldi	r26, 0x35	; 53
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e5 e3       	ldi	r30, 0x35	; 53
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	48 2f       	mov	r20, r24
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	02 2e       	mov	r0, r18
    2d7e:	02 c0       	rjmp	.+4      	; 0x2d84 <DIO_enumConnectPullup+0x204>
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	0a 94       	dec	r0
    2d86:	e2 f7       	brpl	.-8      	; 0x2d80 <DIO_enumConnectPullup+0x200>
    2d88:	80 95       	com	r24
    2d8a:	84 23       	and	r24, r20
    2d8c:	8c 93       	st	X, r24
    2d8e:	47 c0       	rjmp	.+142    	; 0x2e1e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2d90:	8c 81       	ldd	r24, Y+4	; 0x04
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	71 f5       	brne	.+92     	; 0x2df2 <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    2d96:	a0 e5       	ldi	r26, 0x50	; 80
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e0 e5       	ldi	r30, 0x50	; 80
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	8b 7f       	andi	r24, 0xFB	; 251
    2da2:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    2da4:	a1 e3       	ldi	r26, 0x31	; 49
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e1 e3       	ldi	r30, 0x31	; 49
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	48 2f       	mov	r20, r24
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <DIO_enumConnectPullup+0x240>
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	2a 95       	dec	r18
    2dc2:	e2 f7       	brpl	.-8      	; 0x2dbc <DIO_enumConnectPullup+0x23c>
    2dc4:	80 95       	com	r24
    2dc6:	84 23       	and	r24, r20
    2dc8:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    2dca:	a2 e3       	ldi	r26, 0x32	; 50
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e2 e3       	ldi	r30, 0x32	; 50
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	48 2f       	mov	r20, r24
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	02 2e       	mov	r0, r18
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <DIO_enumConnectPullup+0x268>
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	0a 94       	dec	r0
    2dea:	e2 f7       	brpl	.-8      	; 0x2de4 <DIO_enumConnectPullup+0x264>
    2dec:	84 2b       	or	r24, r20
    2dee:	8c 93       	st	X, r24
    2df0:	16 c0       	rjmp	.+44     	; 0x2e1e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    2df2:	a2 e3       	ldi	r26, 0x32	; 50
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	e2 e3       	ldi	r30, 0x32	; 50
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	48 2f       	mov	r20, r24
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	02 2e       	mov	r0, r18
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <DIO_enumConnectPullup+0x290>
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	0a 94       	dec	r0
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <DIO_enumConnectPullup+0x28c>
    2e14:	80 95       	com	r24
    2e16:	84 23       	and	r24, r20
    2e18:	8c 93       	st	X, r24
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    2e1c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01


}
    2e20:	26 96       	adiw	r28, 0x06	; 6
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <DIO_voidWriteHighNibbles>:




DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <DIO_voidWriteHighNibbles+0x6>
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <DIO_voidWriteHighNibbles+0x8>
    2e3a:	0f 92       	push	r0
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	8a 83       	std	Y+2, r24	; 0x02
    2e42:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	84 30       	cpi	r24, 0x04	; 4
    2e4c:	08 f0       	brcs	.+2      	; 0x2e50 <DIO_voidWriteHighNibbles+0x1e>
    2e4e:	63 c0       	rjmp	.+198    	; 0x2f16 <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	82 95       	swap	r24
    2e54:	80 7f       	andi	r24, 0xF0	; 240
    2e56:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	3d 83       	std	Y+5, r19	; 0x05
    2e60:	2c 83       	std	Y+4, r18	; 0x04
    2e62:	8c 81       	ldd	r24, Y+4	; 0x04
    2e64:	9d 81       	ldd	r25, Y+5	; 0x05
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	91 05       	cpc	r25, r1
    2e6a:	29 f1       	breq	.+74     	; 0x2eb6 <DIO_voidWriteHighNibbles+0x84>
    2e6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e70:	22 30       	cpi	r18, 0x02	; 2
    2e72:	31 05       	cpc	r19, r1
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <DIO_voidWriteHighNibbles+0x4e>
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	61 f0       	breq	.+24     	; 0x2e96 <DIO_voidWriteHighNibbles+0x64>
    2e7e:	4c c0       	rjmp	.+152    	; 0x2f18 <DIO_voidWriteHighNibbles+0xe6>
    2e80:	2c 81       	ldd	r18, Y+4	; 0x04
    2e82:	3d 81       	ldd	r19, Y+5	; 0x05
    2e84:	22 30       	cpi	r18, 0x02	; 2
    2e86:	31 05       	cpc	r19, r1
    2e88:	31 f1       	breq	.+76     	; 0x2ed6 <DIO_voidWriteHighNibbles+0xa4>
    2e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8e:	83 30       	cpi	r24, 0x03	; 3
    2e90:	91 05       	cpc	r25, r1
    2e92:	89 f1       	breq	.+98     	; 0x2ef6 <DIO_voidWriteHighNibbles+0xc4>
    2e94:	41 c0       	rjmp	.+130    	; 0x2f18 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    2e96:	ab e3       	ldi	r26, 0x3B	; 59
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	eb e3       	ldi	r30, 0x3B	; 59
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8f 70       	andi	r24, 0x0F	; 15
    2ea2:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    2ea4:	ab e3       	ldi	r26, 0x3B	; 59
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	eb e3       	ldi	r30, 0x3B	; 59
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	90 81       	ld	r25, Z
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	89 2b       	or	r24, r25
    2eb2:	8c 93       	st	X, r24
    2eb4:	31 c0       	rjmp	.+98     	; 0x2f18 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    2eb6:	a8 e3       	ldi	r26, 0x38	; 56
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e8 e3       	ldi	r30, 0x38	; 56
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8f 70       	andi	r24, 0x0F	; 15
    2ec2:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    2ec4:	a8 e3       	ldi	r26, 0x38	; 56
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e8 e3       	ldi	r30, 0x38	; 56
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	90 81       	ld	r25, Z
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	89 2b       	or	r24, r25
    2ed2:	8c 93       	st	X, r24
    2ed4:	21 c0       	rjmp	.+66     	; 0x2f18 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    2ed6:	a5 e3       	ldi	r26, 0x35	; 53
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e5 e3       	ldi	r30, 0x35	; 53
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	8f 70       	andi	r24, 0x0F	; 15
    2ee2:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    2ee4:	a5 e3       	ldi	r26, 0x35	; 53
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e5 e3       	ldi	r30, 0x35	; 53
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	90 81       	ld	r25, Z
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	89 2b       	or	r24, r25
    2ef2:	8c 93       	st	X, r24
    2ef4:	11 c0       	rjmp	.+34     	; 0x2f18 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    2ef6:	a2 e3       	ldi	r26, 0x32	; 50
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e2 e3       	ldi	r30, 0x32	; 50
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	8f 70       	andi	r24, 0x0F	; 15
    2f02:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    2f04:	a2 e3       	ldi	r26, 0x32	; 50
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e2 e3       	ldi	r30, 0x32	; 50
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	90 81       	ld	r25, Z
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	89 2b       	or	r24, r25
    2f12:	8c 93       	st	X, r24
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2f16:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    2f18:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <DIO_enumSetPortDirection+0x6>
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <DIO_enumSetPortDirection+0x8>
    2f32:	0f 92       	push	r0
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	8a 83       	std	Y+2, r24	; 0x02
    2f3a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	84 30       	cpi	r24, 0x04	; 4
    2f44:	a8 f5       	brcc	.+106    	; 0x2fb0 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	3d 83       	std	Y+5, r19	; 0x05
    2f4e:	2c 83       	std	Y+4, r18	; 0x04
    2f50:	8c 81       	ldd	r24, Y+4	; 0x04
    2f52:	9d 81       	ldd	r25, Y+5	; 0x05
    2f54:	81 30       	cpi	r24, 0x01	; 1
    2f56:	91 05       	cpc	r25, r1
    2f58:	d1 f0       	breq	.+52     	; 0x2f8e <DIO_enumSetPortDirection+0x64>
    2f5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f5e:	22 30       	cpi	r18, 0x02	; 2
    2f60:	31 05       	cpc	r19, r1
    2f62:	2c f4       	brge	.+10     	; 0x2f6e <DIO_enumSetPortDirection+0x44>
    2f64:	8c 81       	ldd	r24, Y+4	; 0x04
    2f66:	9d 81       	ldd	r25, Y+5	; 0x05
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	61 f0       	breq	.+24     	; 0x2f84 <DIO_enumSetPortDirection+0x5a>
    2f6c:	1f c0       	rjmp	.+62     	; 0x2fac <DIO_enumSetPortDirection+0x82>
    2f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f70:	3d 81       	ldd	r19, Y+5	; 0x05
    2f72:	22 30       	cpi	r18, 0x02	; 2
    2f74:	31 05       	cpc	r19, r1
    2f76:	81 f0       	breq	.+32     	; 0x2f98 <DIO_enumSetPortDirection+0x6e>
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7c:	83 30       	cpi	r24, 0x03	; 3
    2f7e:	91 05       	cpc	r25, r1
    2f80:	81 f0       	breq	.+32     	; 0x2fa2 <DIO_enumSetPortDirection+0x78>
    2f82:	14 c0       	rjmp	.+40     	; 0x2fac <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    2f84:	ea e3       	ldi	r30, 0x3A	; 58
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	80 83       	st	Z, r24
    2f8c:	12 c0       	rjmp	.+36     	; 0x2fb2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    2f8e:	e7 e3       	ldi	r30, 0x37	; 55
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	80 83       	st	Z, r24
    2f96:	0d c0       	rjmp	.+26     	; 0x2fb2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    2f98:	e4 e3       	ldi	r30, 0x34	; 52
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	80 83       	st	Z, r24
    2fa0:	08 c0       	rjmp	.+16     	; 0x2fb2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    2fa2:	e1 e3       	ldi	r30, 0x31	; 49
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	80 83       	st	Z, r24
    2faa:	03 c0       	rjmp	.+6      	; 0x2fb2 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    2fac:	19 82       	std	Y+1, r1	; 0x01
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <DIO_enumSetPortDirection+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2fb0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <DIO_enumSetPortValue+0x6>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <DIO_enumSetPortValue+0x8>
    2fcc:	0f 92       	push	r0
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	84 30       	cpi	r24, 0x04	; 4
    2fde:	a8 f5       	brcc	.+106    	; 0x304a <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	3d 83       	std	Y+5, r19	; 0x05
    2fe8:	2c 83       	std	Y+4, r18	; 0x04
    2fea:	8c 81       	ldd	r24, Y+4	; 0x04
    2fec:	9d 81       	ldd	r25, Y+5	; 0x05
    2fee:	81 30       	cpi	r24, 0x01	; 1
    2ff0:	91 05       	cpc	r25, r1
    2ff2:	d1 f0       	breq	.+52     	; 0x3028 <DIO_enumSetPortValue+0x64>
    2ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ff8:	22 30       	cpi	r18, 0x02	; 2
    2ffa:	31 05       	cpc	r19, r1
    2ffc:	2c f4       	brge	.+10     	; 0x3008 <DIO_enumSetPortValue+0x44>
    2ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    3000:	9d 81       	ldd	r25, Y+5	; 0x05
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	61 f0       	breq	.+24     	; 0x301e <DIO_enumSetPortValue+0x5a>
    3006:	1f c0       	rjmp	.+62     	; 0x3046 <DIO_enumSetPortValue+0x82>
    3008:	2c 81       	ldd	r18, Y+4	; 0x04
    300a:	3d 81       	ldd	r19, Y+5	; 0x05
    300c:	22 30       	cpi	r18, 0x02	; 2
    300e:	31 05       	cpc	r19, r1
    3010:	81 f0       	breq	.+32     	; 0x3032 <DIO_enumSetPortValue+0x6e>
    3012:	8c 81       	ldd	r24, Y+4	; 0x04
    3014:	9d 81       	ldd	r25, Y+5	; 0x05
    3016:	83 30       	cpi	r24, 0x03	; 3
    3018:	91 05       	cpc	r25, r1
    301a:	81 f0       	breq	.+32     	; 0x303c <DIO_enumSetPortValue+0x78>
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    301e:	eb e3       	ldi	r30, 0x3B	; 59
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	80 83       	st	Z, r24
    3026:	12 c0       	rjmp	.+36     	; 0x304c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    3028:	e8 e3       	ldi	r30, 0x38	; 56
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	80 83       	st	Z, r24
    3030:	0d c0       	rjmp	.+26     	; 0x304c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    3032:	e5 e3       	ldi	r30, 0x35	; 53
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	80 83       	st	Z, r24
    303a:	08 c0       	rjmp	.+16     	; 0x304c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    303c:	e2 e3       	ldi	r30, 0x32	; 50
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	80 83       	st	Z, r24
    3044:	03 c0       	rjmp	.+6      	; 0x304c <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    3046:	19 82       	std	Y+1, r1	; 0x01
    3048:	01 c0       	rjmp	.+2      	; 0x304c <DIO_enumSetPortValue+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    304a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    304c:	89 81       	ldd	r24, Y+1	; 0x01
}
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <UART_voidInit>:
#include "UART_private.h"
#include "UART_config.h"
#include "UART_interface.h"

void UART_voidInit(void)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    /* MODE */
    #if UART_MODE == UART_MODE_ASYNC
        CLR_BIT(UCSRC, UMSEL);
    3066:	a0 e4       	ldi	r26, 0x40	; 64
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e0 e4       	ldi	r30, 0x40	; 64
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	8f 7b       	andi	r24, 0xBF	; 191
    3072:	8c 93       	st	X, r24
        SET_BIT(UCSRC, UMSEL);
    #endif

    /* PARITY */
    #if UART_PARITY == UART_PARITY_DISABLED
        CLR_BIT(UCSRC, UPM0); CLR_BIT(UCSRC, UPM1);
    3074:	a0 e4       	ldi	r26, 0x40	; 64
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e0 e4       	ldi	r30, 0x40	; 64
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	8f 7e       	andi	r24, 0xEF	; 239
    3080:	8c 93       	st	X, r24
    3082:	a0 e4       	ldi	r26, 0x40	; 64
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	e0 e4       	ldi	r30, 0x40	; 64
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	8f 7d       	andi	r24, 0xDF	; 223
    308e:	8c 93       	st	X, r24

    /* STOP BITS */
    #if UART_STOPBITS == UART_STOPBITS_1
        CLR_BIT(UCSRC, USBS);
    #else
        SET_BIT(UCSRC, USBS);
    3090:	a0 e4       	ldi	r26, 0x40	; 64
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e0 e4       	ldi	r30, 0x40	; 64
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	88 60       	ori	r24, 0x08	; 8
    309c:	8c 93       	st	X, r24
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_6
        CLR_BIT(UCSRB, UCSZ2); CLR_BIT(UCSRC, UCSZ1); SET_BIT(UCSRC, UCSZ0);
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_7
        CLR_BIT(UCSRB, UCSZ2); SET_BIT(UCSRC, UCSZ1); CLR_BIT(UCSRC, UCSZ0);
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_8
        CLR_BIT(UCSRB, UCSZ2); SET_BIT(UCSRC, UCSZ1); SET_BIT(UCSRC, UCSZ0);
    309e:	aa e2       	ldi	r26, 0x2A	; 42
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	ea e2       	ldi	r30, 0x2A	; 42
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	8b 7f       	andi	r24, 0xFB	; 251
    30aa:	8c 93       	st	X, r24
    30ac:	a0 e4       	ldi	r26, 0x40	; 64
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	e0 e4       	ldi	r30, 0x40	; 64
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	84 60       	ori	r24, 0x04	; 4
    30b8:	8c 93       	st	X, r24
    30ba:	a0 e4       	ldi	r26, 0x40	; 64
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e0 e4       	ldi	r30, 0x40	; 64
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	82 60       	ori	r24, 0x02	; 2
    30c6:	8c 93       	st	X, r24
    #elif UART_CHAR_SIZE == UART_CHAR_SIZE_9
        SET_BIT(UCSRB, UCSZ2); SET_BIT(UCSRC, UCSZ1); SET_BIT(UCSRC, UCSZ0);
    #endif

    /* BAUD RATE */
    UBRRL = (u8)(UART_BAUDRATE);
    30c8:	e9 e2       	ldi	r30, 0x29	; 41
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	8f ec       	ldi	r24, 0xCF	; 207
    30ce:	80 83       	st	Z, r24
    UBRRH = (u8)((UART_BAUDRATE >> 8) & 0x7F);  // Make sure URSEL is clear
    30d0:	e0 e4       	ldi	r30, 0x40	; 64
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	10 82       	st	Z, r1

    /* Enable TX, RX */
    SET_BIT(UCSRB, TXEN);
    30d6:	aa e2       	ldi	r26, 0x2A	; 42
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	ea e2       	ldi	r30, 0x2A	; 42
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	88 60       	ori	r24, 0x08	; 8
    30e2:	8c 93       	st	X, r24
    SET_BIT(UCSRB, RXEN);
    30e4:	aa e2       	ldi	r26, 0x2A	; 42
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	ea e2       	ldi	r30, 0x2A	; 42
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	80 61       	ori	r24, 0x10	; 16
    30f0:	8c 93       	st	X, r24
}
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <UART_voidSendByte>:

void UART_voidSendByte(u8 data)
{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	0f 92       	push	r0
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	89 83       	std	Y+1, r24	; 0x01
    while(GET_BIT(UCSRA, UDRE) == 0);  // Wait until UDR is ready
    3104:	eb e2       	ldi	r30, 0x2B	; 43
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	80 72       	andi	r24, 0x20	; 32
    3110:	90 70       	andi	r25, 0x00	; 0
    3112:	95 95       	asr	r25
    3114:	87 95       	ror	r24
    3116:	95 95       	asr	r25
    3118:	87 95       	ror	r24
    311a:	95 95       	asr	r25
    311c:	87 95       	ror	r24
    311e:	95 95       	asr	r25
    3120:	87 95       	ror	r24
    3122:	95 95       	asr	r25
    3124:	87 95       	ror	r24
    3126:	00 97       	sbiw	r24, 0x00	; 0
    3128:	69 f3       	breq	.-38     	; 0x3104 <UART_voidSendByte+0xc>
    UDR = data;
    312a:	ec e2       	ldi	r30, 0x2C	; 44
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	80 83       	st	Z, r24
}
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <UART_u8RecieveByte>:

u8 UART_u8RecieveByte(void)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    while(GET_BIT(UCSRA, RXC) == 0);  // Wait until data is received
    3142:	eb e2       	ldi	r30, 0x2B	; 43
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	88 1f       	adc	r24, r24
    314a:	88 27       	eor	r24, r24
    314c:	88 1f       	adc	r24, r24
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	90 70       	andi	r25, 0x00	; 0
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	a9 f3       	breq	.-22     	; 0x3142 <UART_u8RecieveByte+0x8>
    return UDR;
    3158:	ec e2       	ldi	r30, 0x2C	; 44
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
}
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <UART_voidDisable>:

void UART_voidDisable(void)
{
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB, TXEN);
    316c:	aa e2       	ldi	r26, 0x2A	; 42
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	ea e2       	ldi	r30, 0x2A	; 42
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	87 7f       	andi	r24, 0xF7	; 247
    3178:	8c 93       	st	X, r24
    CLR_BIT(UCSRB, RXEN);
    317a:	aa e2       	ldi	r26, 0x2A	; 42
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	ea e2       	ldi	r30, 0x2A	; 42
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	8f 7e       	andi	r24, 0xEF	; 239
    3186:	8c 93       	st	X, r24
}
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <__prologue_saves__>:
    318e:	2f 92       	push	r2
    3190:	3f 92       	push	r3
    3192:	4f 92       	push	r4
    3194:	5f 92       	push	r5
    3196:	6f 92       	push	r6
    3198:	7f 92       	push	r7
    319a:	8f 92       	push	r8
    319c:	9f 92       	push	r9
    319e:	af 92       	push	r10
    31a0:	bf 92       	push	r11
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	ca 1b       	sub	r28, r26
    31b8:	db 0b       	sbc	r29, r27
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	09 94       	ijmp

000031c6 <__epilogue_restores__>:
    31c6:	2a 88       	ldd	r2, Y+18	; 0x12
    31c8:	39 88       	ldd	r3, Y+17	; 0x11
    31ca:	48 88       	ldd	r4, Y+16	; 0x10
    31cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    31ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    31d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    31d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    31d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    31d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    31d8:	b9 84       	ldd	r11, Y+9	; 0x09
    31da:	c8 84       	ldd	r12, Y+8	; 0x08
    31dc:	df 80       	ldd	r13, Y+7	; 0x07
    31de:	ee 80       	ldd	r14, Y+6	; 0x06
    31e0:	fd 80       	ldd	r15, Y+5	; 0x05
    31e2:	0c 81       	ldd	r16, Y+4	; 0x04
    31e4:	1b 81       	ldd	r17, Y+3	; 0x03
    31e6:	aa 81       	ldd	r26, Y+2	; 0x02
    31e8:	b9 81       	ldd	r27, Y+1	; 0x01
    31ea:	ce 0f       	add	r28, r30
    31ec:	d1 1d       	adc	r29, r1
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	ed 01       	movw	r28, r26
    31fa:	08 95       	ret

000031fc <_exit>:
    31fc:	f8 94       	cli

000031fe <__stop_program>:
    31fe:	ff cf       	rjmp	.-2      	; 0x31fe <__stop_program>
