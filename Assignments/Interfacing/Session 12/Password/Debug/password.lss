
password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a64  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00002a64  00002ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002c7c  00000000  00000000  00002b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000016a5  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a9f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ab58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ade5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b5b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 ea       	ldi	r26, 0xA3	; 163
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 ea       	ldi	r24, 0xA3	; 163
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#define DELAY_TIME 1000
#define PASSWORD 1234
#define NOT_PRESSED 0xFF // Ensure NOT_PRESSED is defined

int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	e3 97       	sbiw	r28, 0x33	; 51
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
    KPD_voidInit();
     b4a:	0e 94 7b 07 	call	0xef6	; 0xef6 <KPD_voidInit>
    LCD_voidInit();
     b4e:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_voidInit>
    LED_Type CorrectGreen = {LED_PORTB, LED_PIN1, ACTIVE_HIGH};
     b52:	ce 01       	movw	r24, r28
     b54:	84 96       	adiw	r24, 0x24	; 36
     b56:	9b a7       	std	Y+43, r25	; 0x2b
     b58:	8a a7       	std	Y+42, r24	; 0x2a
     b5a:	e8 ec       	ldi	r30, 0xC8	; 200
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	fd a7       	std	Y+45, r31	; 0x2d
     b60:	ec a7       	std	Y+44, r30	; 0x2c
     b62:	f3 e0       	ldi	r31, 0x03	; 3
     b64:	fe a7       	std	Y+46, r31	; 0x2e
     b66:	ec a5       	ldd	r30, Y+44	; 0x2c
     b68:	fd a5       	ldd	r31, Y+45	; 0x2d
     b6a:	00 80       	ld	r0, Z
     b6c:	8c a5       	ldd	r24, Y+44	; 0x2c
     b6e:	9d a5       	ldd	r25, Y+45	; 0x2d
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	9d a7       	std	Y+45, r25	; 0x2d
     b74:	8c a7       	std	Y+44, r24	; 0x2c
     b76:	ea a5       	ldd	r30, Y+42	; 0x2a
     b78:	fb a5       	ldd	r31, Y+43	; 0x2b
     b7a:	00 82       	st	Z, r0
     b7c:	8a a5       	ldd	r24, Y+42	; 0x2a
     b7e:	9b a5       	ldd	r25, Y+43	; 0x2b
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9b a7       	std	Y+43, r25	; 0x2b
     b84:	8a a7       	std	Y+42, r24	; 0x2a
     b86:	9e a5       	ldd	r25, Y+46	; 0x2e
     b88:	91 50       	subi	r25, 0x01	; 1
     b8a:	9e a7       	std	Y+46, r25	; 0x2e
     b8c:	ee a5       	ldd	r30, Y+46	; 0x2e
     b8e:	ee 23       	and	r30, r30
     b90:	51 f7       	brne	.-44     	; 0xb66 <main+0x30>
    LED_Type WrongRed = {LED_PORTB, LED_PIN0, ACTIVE_HIGH};
     b92:	ce 01       	movw	r24, r28
     b94:	87 96       	adiw	r24, 0x27	; 39
     b96:	98 ab       	std	Y+48, r25	; 0x30
     b98:	8f a7       	std	Y+47, r24	; 0x2f
     b9a:	e5 ec       	ldi	r30, 0xC5	; 197
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	fa ab       	std	Y+50, r31	; 0x32
     ba0:	e9 ab       	std	Y+49, r30	; 0x31
     ba2:	f3 e0       	ldi	r31, 0x03	; 3
     ba4:	fb ab       	std	Y+51, r31	; 0x33
     ba6:	e9 a9       	ldd	r30, Y+49	; 0x31
     ba8:	fa a9       	ldd	r31, Y+50	; 0x32
     baa:	00 80       	ld	r0, Z
     bac:	89 a9       	ldd	r24, Y+49	; 0x31
     bae:	9a a9       	ldd	r25, Y+50	; 0x32
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	9a ab       	std	Y+50, r25	; 0x32
     bb4:	89 ab       	std	Y+49, r24	; 0x31
     bb6:	ef a5       	ldd	r30, Y+47	; 0x2f
     bb8:	f8 a9       	ldd	r31, Y+48	; 0x30
     bba:	00 82       	st	Z, r0
     bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
     bbe:	98 a9       	ldd	r25, Y+48	; 0x30
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	98 ab       	std	Y+48, r25	; 0x30
     bc4:	8f a7       	std	Y+47, r24	; 0x2f
     bc6:	9b a9       	ldd	r25, Y+51	; 0x33
     bc8:	91 50       	subi	r25, 0x01	; 1
     bca:	9b ab       	std	Y+51, r25	; 0x33
     bcc:	eb a9       	ldd	r30, Y+51	; 0x33
     bce:	ee 23       	and	r30, r30
     bd0:	51 f7       	brne	.-44     	; 0xba6 <main+0x70>
    LED_voidInit(CorrectGreen);
     bd2:	6c a1       	ldd	r22, Y+36	; 0x24
     bd4:	7d a1       	ldd	r23, Y+37	; 0x25
     bd6:	8e a1       	ldd	r24, Y+38	; 0x26
     bd8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LED_voidInit>
    LED_voidInit(WrongRed);
     bdc:	6f a1       	ldd	r22, Y+39	; 0x27
     bde:	78 a5       	ldd	r23, Y+40	; 0x28
     be0:	89 a5       	ldd	r24, Y+41	; 0x29
     be2:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LED_voidInit>
    LCD_voidSendString("Welcome");
     be6:	80 e6       	ldi	r24, 0x60	; 96
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 95 0c 	call	0x192a	; 0x192a <LCD_voidSendString>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	aa ef       	ldi	r26, 0xFA	; 250
     bf4:	b4 e4       	ldi	r27, 0x44	; 68
     bf6:	89 8f       	std	Y+25, r24	; 0x19
     bf8:	9a 8f       	std	Y+26, r25	; 0x1a
     bfa:	ab 8f       	std	Y+27, r26	; 0x1b
     bfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bfe:	69 8d       	ldd	r22, Y+25	; 0x19
     c00:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c02:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c04:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	4a ef       	ldi	r20, 0xFA	; 250
     c0c:	54 e4       	ldi	r21, 0x44	; 68
     c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	8d 8b       	std	Y+21, r24	; 0x15
     c18:	9e 8b       	std	Y+22, r25	; 0x16
     c1a:	af 8b       	std	Y+23, r26	; 0x17
     c1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c1e:	6d 89       	ldd	r22, Y+21	; 0x15
     c20:	7e 89       	ldd	r23, Y+22	; 0x16
     c22:	8f 89       	ldd	r24, Y+23	; 0x17
     c24:	98 8d       	ldd	r25, Y+24	; 0x18
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e8       	ldi	r20, 0x80	; 128
     c2c:	5f e3       	ldi	r21, 0x3F	; 63
     c2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c32:	88 23       	and	r24, r24
     c34:	2c f4       	brge	.+10     	; 0xc40 <main+0x10a>
		__ticks = 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9c 8b       	std	Y+20, r25	; 0x14
     c3c:	8b 8b       	std	Y+19, r24	; 0x13
     c3e:	3f c0       	rjmp	.+126    	; 0xcbe <main+0x188>
	else if (__tmp > 65535)
     c40:	6d 89       	ldd	r22, Y+21	; 0x15
     c42:	7e 89       	ldd	r23, Y+22	; 0x16
     c44:	8f 89       	ldd	r24, Y+23	; 0x17
     c46:	98 8d       	ldd	r25, Y+24	; 0x18
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	3f ef       	ldi	r19, 0xFF	; 255
     c4c:	4f e7       	ldi	r20, 0x7F	; 127
     c4e:	57 e4       	ldi	r21, 0x47	; 71
     c50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c54:	18 16       	cp	r1, r24
     c56:	4c f5       	brge	.+82     	; 0xcaa <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	69 8d       	ldd	r22, Y+25	; 0x19
     c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e2       	ldi	r20, 0x20	; 32
     c66:	51 e4       	ldi	r21, 0x41	; 65
     c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	bc 01       	movw	r22, r24
     c72:	cd 01       	movw	r24, r26
     c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	9c 8b       	std	Y+20, r25	; 0x14
     c7e:	8b 8b       	std	Y+19, r24	; 0x13
     c80:	0f c0       	rjmp	.+30     	; 0xca0 <main+0x16a>
     c82:	88 ec       	ldi	r24, 0xC8	; 200
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	9a 8b       	std	Y+18, r25	; 0x12
     c88:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8a:	89 89       	ldd	r24, Y+17	; 0x11
     c8c:	9a 89       	ldd	r25, Y+18	; 0x12
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <main+0x158>
     c92:	9a 8b       	std	Y+18, r25	; 0x12
     c94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c96:	8b 89       	ldd	r24, Y+19	; 0x13
     c98:	9c 89       	ldd	r25, Y+20	; 0x14
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	9c 8b       	std	Y+20, r25	; 0x14
     c9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca0:	8b 89       	ldd	r24, Y+19	; 0x13
     ca2:	9c 89       	ldd	r25, Y+20	; 0x14
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	69 f7       	brne	.-38     	; 0xc82 <main+0x14c>
     ca8:	14 c0       	rjmp	.+40     	; 0xcd2 <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     caa:	6d 89       	ldd	r22, Y+21	; 0x15
     cac:	7e 89       	ldd	r23, Y+22	; 0x16
     cae:	8f 89       	ldd	r24, Y+23	; 0x17
     cb0:	98 8d       	ldd	r25, Y+24	; 0x18
     cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	9c 8b       	std	Y+20, r25	; 0x14
     cbc:	8b 8b       	std	Y+19, r24	; 0x13
     cbe:	8b 89       	ldd	r24, Y+19	; 0x13
     cc0:	9c 89       	ldd	r25, Y+20	; 0x14
     cc2:	98 8b       	std	Y+16, r25	; 0x10
     cc4:	8f 87       	std	Y+15, r24	; 0x0f
     cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc8:	98 89       	ldd	r25, Y+16	; 0x10
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <main+0x194>
     cce:	98 8b       	std	Y+16, r25	; 0x10
     cd0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2000);
    LCD_voidSendCommand(LCD_CLEAR);
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
    LCD_voidSendString("Enter password :");
     cd8:	88 e6       	ldi	r24, 0x68	; 104
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 95 0c 	call	0x192a	; 0x192a <LCD_voidSendString>
    LCD_voidSetCursorPosition(2,8);
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	68 e0       	ldi	r22, 0x08	; 8
     ce4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_voidSetCursorPosition>
    u8 pressed, cnt, tries = 3;
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	89 a3       	std	Y+33, r24	; 0x21
    u32 password;
    while(1)
    {
        cnt = 0;
     cec:	1a a2       	std	Y+34, r1	; 0x22
        password = 0;
     cee:	1d 8e       	std	Y+29, r1	; 0x1d
     cf0:	1e 8e       	std	Y+30, r1	; 0x1e
     cf2:	1f 8e       	std	Y+31, r1	; 0x1f
     cf4:	18 a2       	std	Y+32, r1	; 0x20
     cf6:	e5 c0       	rjmp	.+458    	; 0xec2 <main+0x38c>
        while(tries > 0)
        {
            while(cnt < 4)
            {
                pressed = KPD_u8GetPressed();
     cf8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KPD_u8GetPressed>
     cfc:	8b a3       	std	Y+35, r24	; 0x23
                if(pressed != NOT_PRESSED)
     cfe:	8b a1       	ldd	r24, Y+35	; 0x23
     d00:	8f 3f       	cpi	r24, 0xFF	; 255
     d02:	21 f1       	breq	.+72     	; 0xd4c <main+0x216>
                {
                    LCD_voidSendData('*');
     d04:	8a e2       	ldi	r24, 0x2A	; 42
     d06:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_voidSendData>
                    password = (password * 10) + (pressed - '0');
     d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d0e:	af 8d       	ldd	r26, Y+31	; 0x1f
     d10:	b8 a1       	ldd	r27, Y+32	; 0x20
     d12:	2a e0       	ldi	r18, 0x0A	; 10
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__mulsi3>
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	8b a1       	ldd	r24, Y+35	; 0x23
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	c0 97       	sbiw	r24, 0x30	; 48
     d2e:	aa 27       	eor	r26, r26
     d30:	97 fd       	sbrc	r25, 7
     d32:	a0 95       	com	r26
     d34:	ba 2f       	mov	r27, r26
     d36:	82 0f       	add	r24, r18
     d38:	93 1f       	adc	r25, r19
     d3a:	a4 1f       	adc	r26, r20
     d3c:	b5 1f       	adc	r27, r21
     d3e:	8d 8f       	std	Y+29, r24	; 0x1d
     d40:	9e 8f       	std	Y+30, r25	; 0x1e
     d42:	af 8f       	std	Y+31, r26	; 0x1f
     d44:	b8 a3       	std	Y+32, r27	; 0x20
                    cnt++;
     d46:	8a a1       	ldd	r24, Y+34	; 0x22
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	8a a3       	std	Y+34, r24	; 0x22
    {
        cnt = 0;
        password = 0;
        while(tries > 0)
        {
            while(cnt < 4)
     d4c:	8a a1       	ldd	r24, Y+34	; 0x22
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	98 f2       	brcs	.-90     	; 0xcf8 <main+0x1c2>
                    password = (password * 10) + (pressed - '0');
                    cnt++;
                }
            }

            LCD_voidSendCommand(LCD_CLEAR);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
            if(password == PASSWORD)
     d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d5c:	af 8d       	ldd	r26, Y+31	; 0x1f
     d5e:	b8 a1       	ldd	r27, Y+32	; 0x20
     d60:	82 3d       	cpi	r24, 0xD2	; 210
     d62:	f4 e0       	ldi	r31, 0x04	; 4
     d64:	9f 07       	cpc	r25, r31
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	af 07       	cpc	r26, r31
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	bf 07       	cpc	r27, r31
     d6e:	51 f4       	brne	.+20     	; 0xd84 <main+0x24e>
            {
                LCD_voidSendString("Correct");
     d70:	89 e7       	ldi	r24, 0x79	; 121
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 95 0c 	call	0x192a	; 0x192a <LCD_voidSendString>
                LED_voidON(CorrectGreen);
     d78:	6c a1       	ldd	r22, Y+36	; 0x24
     d7a:	7d a1       	ldd	r23, Y+37	; 0x25
     d7c:	8e a1       	ldd	r24, Y+38	; 0x26
     d7e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LED_voidON>
     d82:	a3 c0       	rjmp	.+326    	; 0xeca <main+0x394>
                break;
            }
            else
            {
                tries--;
     d84:	89 a1       	ldd	r24, Y+33	; 0x21
     d86:	81 50       	subi	r24, 0x01	; 1
     d88:	89 a3       	std	Y+33, r24	; 0x21
                LED_voidON(WrongRed);
     d8a:	6f a1       	ldd	r22, Y+39	; 0x27
     d8c:	78 a5       	ldd	r23, Y+40	; 0x28
     d8e:	89 a5       	ldd	r24, Y+41	; 0x29
     d90:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LED_voidON>
                LCD_voidSendString("Wrong");
     d94:	81 e8       	ldi	r24, 0x81	; 129
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 95 0c 	call	0x192a	; 0x192a <LCD_voidSendString>
                LCD_voidSetCursorPosition(2,1);
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_voidSetCursorPosition>
                LCD_voidSendString("Tries left : ");
     da4:	87 e8       	ldi	r24, 0x87	; 135
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 95 0c 	call	0x192a	; 0x192a <LCD_voidSendString>
                LCD_voidSendData(tries + '0'); // Convert tries to character
     dac:	89 a1       	ldd	r24, Y+33	; 0x21
     dae:	80 5d       	subi	r24, 0xD0	; 208
     db0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_voidSendData>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	aa e7       	ldi	r26, 0x7A	; 122
     dba:	b4 e4       	ldi	r27, 0x44	; 68
     dbc:	8b 87       	std	Y+11, r24	; 0x0b
     dbe:	9c 87       	std	Y+12, r25	; 0x0c
     dc0:	ad 87       	std	Y+13, r26	; 0x0d
     dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dca:	9e 85       	ldd	r25, Y+14	; 0x0e
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a ef       	ldi	r20, 0xFA	; 250
     dd2:	54 e4       	ldi	r21, 0x44	; 68
     dd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8f 83       	std	Y+7, r24	; 0x07
     dde:	98 87       	std	Y+8, r25	; 0x08
     de0:	a9 87       	std	Y+9, r26	; 0x09
     de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <main+0x2d0>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <main+0x34e>
	else if (__tmp > 65535)
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e20:	7c 85       	ldd	r23, Y+12	; 0x0c
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <main+0x330>
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <main+0x31e>
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <main+0x312>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6f 81       	ldd	r22, Y+7	; 0x07
     e72:	78 85       	ldd	r23, Y+8	; 0x08
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <main+0x35a>
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(DELAY_TIME);
                LED_voidToggle(WrongRed);
     e98:	6f a1       	ldd	r22, Y+39	; 0x27
     e9a:	78 a5       	ldd	r23, Y+40	; 0x28
     e9c:	89 a5       	ldd	r24, Y+41	; 0x29
     e9e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LED_voidToggle>
                LCD_voidSendCommand(LCD_CLEAR);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
                LCD_voidSendString("Enter password :");
     ea8:	88 e6       	ldi	r24, 0x68	; 104
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 95 0c 	call	0x192a	; 0x192a <LCD_voidSendString>
                LCD_voidSetCursorPosition(2,8);
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	68 e0       	ldi	r22, 0x08	; 8
     eb4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_voidSetCursorPosition>
                cnt = 0;
     eb8:	1a a2       	std	Y+34, r1	; 0x22
                password = 0;
     eba:	1d 8e       	std	Y+29, r1	; 0x1d
     ebc:	1e 8e       	std	Y+30, r1	; 0x1e
     ebe:	1f 8e       	std	Y+31, r1	; 0x1f
     ec0:	18 a2       	std	Y+32, r1	; 0x20
    u32 password;
    while(1)
    {
        cnt = 0;
        password = 0;
        while(tries > 0)
     ec2:	89 a1       	ldd	r24, Y+33	; 0x21
     ec4:	88 23       	and	r24, r24
     ec6:	09 f0       	breq	.+2      	; 0xeca <main+0x394>
     ec8:	41 cf       	rjmp	.-382    	; 0xd4c <main+0x216>
                cnt = 0;
                password = 0;
            }
        }

        if(tries == 0)
     eca:	89 a1       	ldd	r24, Y+33	; 0x21
     ecc:	88 23       	and	r24, r24
     ece:	09 f0       	breq	.+2      	; 0xed2 <main+0x39c>
     ed0:	0d cf       	rjmp	.-486    	; 0xcec <main+0x1b6>
        {
            LCD_voidSendCommand(LCD_CLEAR);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
            LCD_voidSendString("No more tries");
     ed8:	85 e9       	ldi	r24, 0x95	; 149
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 95 0c 	call	0x192a	; 0x192a <LCD_voidSendString>
            break;
        }
    }
    return 0;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
}
     ee4:	e3 96       	adiw	r28, 0x33	; 51
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

void KPD_voidInit(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	/* ROWS -> INT_PULLUP */
	DIO_enumSetPinDirection(KPD_PORT, KPD_R0, DIO_PIN_INPUT);
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	41 e0       	ldi	r20, 0x01	; 1
     f0e:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R1, DIO_PIN_INPUT);
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R2, DIO_PIN_INPUT);
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	62 e0       	ldi	r22, 0x02	; 2
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	62 e0       	ldi	r22, 0x02	; 2
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R3, DIO_PIN_INPUT);
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	63 e0       	ldi	r22, 0x03	; 3
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	63 e0       	ldi	r22, 0x03	; 3
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	/* COLS -> OUTPUT, HIGH */
	DIO_enumSetPinDirection(KPD_PORT, KPD_C0, DIO_PIN_OUTPUT);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	64 e0       	ldi	r22, 0x04	; 4
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	64 e0       	ldi	r22, 0x04	; 4
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C1, DIO_PIN_OUTPUT);
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	65 e0       	ldi	r22, 0x05	; 5
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	65 e0       	ldi	r22, 0x05	; 5
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C2, DIO_PIN_OUTPUT);
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	66 e0       	ldi	r22, 0x06	; 6
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	66 e0       	ldi	r22, 0x06	; 6
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C3, DIO_PIN_OUTPUT);
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	67 e0       	ldi	r22, 0x07	; 7
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	67 e0       	ldi	r22, 0x07	; 7
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	
	
	
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <KPD_u8GetPressed>:

u8 KPD_u8GetPressed(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	a0 97       	sbiw	r28, 0x20	; 32
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8RetVal = NOT_PRESSED;
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
     fbc:	84 e0       	ldi	r24, 0x04	; 4
     fbe:	8d 8f       	std	Y+29, r24	; 0x1d
     fc0:	27 c1       	rjmp	.+590    	; 0x1210 <KPD_u8GetPressed+0x26c>
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
     fcc:	1e 8e       	std	Y+30, r1	; 0x1e
     fce:	14 c1       	rjmp	.+552    	; 0x11f8 <KPD_u8GetPressed+0x254>
		{
			DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
     fd0:	9e 01       	movw	r18, r28
     fd2:	20 5e       	subi	r18, 0xE0	; 224
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     fda:	a9 01       	movw	r20, r18
     fdc:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_enumGetPinValue>
			
			if(LOC_u8GetPressed == 0)
     fe0:	88 a1       	ldd	r24, Y+32	; 0x20
     fe2:	88 23       	and	r24, r24
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <KPD_u8GetPressed+0x44>
     fe6:	05 c1       	rjmp	.+522    	; 0x11f2 <KPD_u8GetPressed+0x24e>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a8 e4       	ldi	r26, 0x48	; 72
     fee:	b2 e4       	ldi	r27, 0x42	; 66
     ff0:	89 8f       	std	Y+25, r24	; 0x19
     ff2:	9a 8f       	std	Y+26, r25	; 0x1a
     ff4:	ab 8f       	std	Y+27, r26	; 0x1b
     ff6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	69 8d       	ldd	r22, Y+25	; 0x19
     ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a ef       	ldi	r20, 0xFA	; 250
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8d 8b       	std	Y+21, r24	; 0x15
    1012:	9e 8b       	std	Y+22, r25	; 0x16
    1014:	af 8b       	std	Y+23, r26	; 0x17
    1016:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1018:	6d 89       	ldd	r22, Y+21	; 0x15
    101a:	7e 89       	ldd	r23, Y+22	; 0x16
    101c:	8f 89       	ldd	r24, Y+23	; 0x17
    101e:	98 8d       	ldd	r25, Y+24	; 0x18
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <KPD_u8GetPressed+0x96>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 8b       	std	Y+20, r25	; 0x14
    1036:	8b 8b       	std	Y+19, r24	; 0x13
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    103a:	6d 89       	ldd	r22, Y+21	; 0x15
    103c:	7e 89       	ldd	r23, Y+22	; 0x16
    103e:	8f 89       	ldd	r24, Y+23	; 0x17
    1040:	98 8d       	ldd	r25, Y+24	; 0x18
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	69 8d       	ldd	r22, Y+25	; 0x19
    1054:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9c 8b       	std	Y+20, r25	; 0x14
    1078:	8b 8b       	std	Y+19, r24	; 0x13
    107a:	0f c0       	rjmp	.+30     	; 0x109a <KPD_u8GetPressed+0xf6>
    107c:	88 ec       	ldi	r24, 0xC8	; 200
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9a 8b       	std	Y+18, r25	; 0x12
    1082:	89 8b       	std	Y+17, r24	; 0x11
    1084:	89 89       	ldd	r24, Y+17	; 0x11
    1086:	9a 89       	ldd	r25, Y+18	; 0x12
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <KPD_u8GetPressed+0xe4>
    108c:	9a 8b       	std	Y+18, r25	; 0x12
    108e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	8b 89       	ldd	r24, Y+19	; 0x13
    1092:	9c 89       	ldd	r25, Y+20	; 0x14
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	9c 8b       	std	Y+20, r25	; 0x14
    1098:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	8b 89       	ldd	r24, Y+19	; 0x13
    109c:	9c 89       	ldd	r25, Y+20	; 0x14
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <KPD_u8GetPressed+0xd8>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	6d 89       	ldd	r22, Y+21	; 0x15
    10a6:	7e 89       	ldd	r23, Y+22	; 0x16
    10a8:	8f 89       	ldd	r24, Y+23	; 0x17
    10aa:	98 8d       	ldd	r25, Y+24	; 0x18
    10ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9c 8b       	std	Y+20, r25	; 0x14
    10b6:	8b 8b       	std	Y+19, r24	; 0x13
    10b8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ba:	9c 89       	ldd	r25, Y+20	; 0x14
    10bc:	98 8b       	std	Y+16, r25	; 0x10
    10be:	8f 87       	std	Y+15, r24	; 0x0f
    10c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c2:	98 89       	ldd	r25, Y+16	; 0x10
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <KPD_u8GetPressed+0x120>
    10c8:	98 8b       	std	Y+16, r25	; 0x10
    10ca:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50); // bouncing
				DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
    10cc:	9e 01       	movw	r18, r28
    10ce:	20 5e       	subi	r18, 0xE0	; 224
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    10d6:	a9 01       	movw	r20, r18
    10d8:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_enumGetPinValue>
				
				if(LOC_u8GetPressed == 0)
    10dc:	88 a1       	ldd	r24, Y+32	; 0x20
    10de:	88 23       	and	r24, r24
    10e0:	a9 f4       	brne	.+42     	; 0x110c <KPD_u8GetPressed+0x168>
				{
					LOC_u8RetVal = KPD_u8Buttons[LOC_u8ROW_Iterator - KPD_ROW_INIT][LOC_u8COL_Iterator - KPD_COL_INIT];
    10e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e4:	48 2f       	mov	r20, r24
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9c 01       	movw	r18, r24
    10f0:	24 50       	subi	r18, 0x04	; 4
    10f2:	30 40       	sbci	r19, 0x00	; 0
    10f4:	ca 01       	movw	r24, r20
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	82 0f       	add	r24, r18
    1100:	93 1f       	adc	r25, r19
    1102:	fc 01       	movw	r30, r24
    1104:	e5 55       	subi	r30, 0x55	; 85
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 81       	ld	r24, Z
    110a:	8f 8f       	std	Y+31, r24	; 0x1f
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a8 e4       	ldi	r26, 0x48	; 72
    1112:	b3 e4       	ldi	r27, 0x43	; 67
    1114:	8b 87       	std	Y+11, r24	; 0x0b
    1116:	9c 87       	std	Y+12, r25	; 0x0c
    1118:	ad 87       	std	Y+13, r26	; 0x0d
    111a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	6b 85       	ldd	r22, Y+11	; 0x0b
    111e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1120:	8d 85       	ldd	r24, Y+13	; 0x0d
    1122:	9e 85       	ldd	r25, Y+14	; 0x0e
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a ef       	ldi	r20, 0xFA	; 250
    112a:	54 e4       	ldi	r21, 0x44	; 68
    112c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	8f 83       	std	Y+7, r24	; 0x07
    1136:	98 87       	std	Y+8, r25	; 0x08
    1138:	a9 87       	std	Y+9, r26	; 0x09
    113a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <KPD_u8GetPressed+0x1ba>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <KPD_u8GetPressed+0x238>
	else if (__tmp > 65535)
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <KPD_u8GetPressed+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	6b 85       	ldd	r22, Y+11	; 0x0b
    1178:	7c 85       	ldd	r23, Y+12	; 0x0c
    117a:	8d 85       	ldd	r24, Y+13	; 0x0d
    117c:	9e 85       	ldd	r25, Y+14	; 0x0e
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	0f c0       	rjmp	.+30     	; 0x11be <KPD_u8GetPressed+0x21a>
    11a0:	88 ec       	ldi	r24, 0xC8	; 200
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <KPD_u8GetPressed+0x208>
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <KPD_u8GetPressed+0x1fc>
    11c6:	1c c0       	rjmp	.+56     	; 0x1200 <KPD_u8GetPressed+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <KPD_u8GetPressed+0x244>
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	07 c0       	rjmp	.+14     	; 0x1200 <KPD_u8GetPressed+0x25c>
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
    11f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	8e 8f       	std	Y+30, r24	; 0x1e
    11f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <KPD_u8GetPressed+0x25c>
    11fe:	e8 ce       	rjmp	.-560    	; 0xfd0 <KPD_u8GetPressed+0x2c>
				_delay_ms(200); // if continuous pressing
				break;
			}
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
    120a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	8d 8f       	std	Y+29, r24	; 0x1d
    1210:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1212:	87 30       	cpi	r24, 0x07	; 7
    1214:	08 f4       	brcc	.+2      	; 0x1218 <KPD_u8GetPressed+0x274>
    1216:	d5 ce       	rjmp	.-598    	; 0xfc2 <KPD_u8GetPressed+0x1e>
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
	}
	
	return LOC_u8RetVal;
    1218:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    121a:	a0 96       	adiw	r28, 0x20	; 32
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "util/delay.h"

void LCD_voidInit()
{
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	c4 55       	subi	r28, 0x54	; 84
    123a:	d0 40       	sbci	r29, 0x00	; 0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(LCD_CTRL_PORT, DIO_PORT_OUTPUT);
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	6f ef       	ldi	r22, 0xFF	; 255
    124a:	0e 94 40 14 	call	0x2880	; 0x2880 <DIO_enumSetPortDirection>
	DIO_enumSetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	6f ef       	ldi	r22, 0xFF	; 255
    1252:	0e 94 40 14 	call	0x2880	; 0x2880 <DIO_enumSetPortDirection>
    1256:	fe 01       	movw	r30, r28
    1258:	ef 5a       	subi	r30, 0xAF	; 175
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 ef       	ldi	r26, 0xF0	; 240
    1262:	b1 e4       	ldi	r27, 0x41	; 65
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	8e 01       	movw	r16, r28
    126e:	03 5b       	subi	r16, 0xB3	; 179
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	fe 01       	movw	r30, r28
    1274:	ef 5a       	subi	r30, 0xAF	; 175
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	60 81       	ld	r22, Z
    127a:	71 81       	ldd	r23, Z+1	; 0x01
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	93 81       	ldd	r25, Z+3	; 0x03
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4a ef       	ldi	r20, 0xFA	; 250
    1286:	54 e4       	ldi	r21, 0x44	; 68
    1288:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	80 83       	st	Z, r24
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	a2 83       	std	Z+2, r26	; 0x02
    1298:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    129a:	fe 01       	movw	r30, r28
    129c:	e3 5b       	subi	r30, 0xB3	; 179
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e8       	ldi	r20, 0x80	; 128
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	44 f4       	brge	.+16     	; 0x12c8 <LCD_voidInit+0x9c>
		__ticks = 1;
    12b8:	fe 01       	movw	r30, r28
    12ba:	e5 5b       	subi	r30, 0xB5	; 181
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
    12c6:	64 c0       	rjmp	.+200    	; 0x1390 <LCD_voidInit+0x164>
	else if (__tmp > 65535)
    12c8:	fe 01       	movw	r30, r28
    12ca:	e3 5b       	subi	r30, 0xB3	; 179
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	3f ef       	ldi	r19, 0xFF	; 255
    12da:	4f e7       	ldi	r20, 0x7F	; 127
    12dc:	57 e4       	ldi	r21, 0x47	; 71
    12de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	0c f0       	brlt	.+2      	; 0x12e8 <LCD_voidInit+0xbc>
    12e6:	43 c0       	rjmp	.+134    	; 0x136e <LCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e8:	fe 01       	movw	r30, r28
    12ea:	ef 5a       	subi	r30, 0xAF	; 175
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	60 81       	ld	r22, Z
    12f0:	71 81       	ldd	r23, Z+1	; 0x01
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8e 01       	movw	r16, r28
    1308:	05 5b       	subi	r16, 0xB5	; 181
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	bc 01       	movw	r22, r24
    130e:	cd 01       	movw	r24, r26
    1310:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	f8 01       	movw	r30, r16
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
    131e:	1f c0       	rjmp	.+62     	; 0x135e <LCD_voidInit+0x132>
    1320:	fe 01       	movw	r30, r28
    1322:	e7 5b       	subi	r30, 0xB7	; 183
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	91 83       	std	Z+1, r25	; 0x01
    132c:	80 83       	st	Z, r24
    132e:	fe 01       	movw	r30, r28
    1330:	e7 5b       	subi	r30, 0xB7	; 183
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_voidInit+0x10c>
    133c:	fe 01       	movw	r30, r28
    133e:	e7 5b       	subi	r30, 0xB7	; 183
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	de 01       	movw	r26, r28
    1348:	a5 5b       	subi	r26, 0xB5	; 181
    134a:	bf 4f       	sbci	r27, 0xFF	; 255
    134c:	fe 01       	movw	r30, r28
    134e:	e5 5b       	subi	r30, 0xB5	; 181
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	9c 93       	st	X, r25
    135c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	fe 01       	movw	r30, r28
    1360:	e5 5b       	subi	r30, 0xB5	; 181
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	d1 f6       	brne	.-76     	; 0x1320 <LCD_voidInit+0xf4>
    136c:	27 c0       	rjmp	.+78     	; 0x13bc <LCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	8e 01       	movw	r16, r28
    1370:	05 5b       	subi	r16, 0xB5	; 181
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	fe 01       	movw	r30, r28
    1376:	e3 5b       	subi	r30, 0xB3	; 179
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	f8 01       	movw	r30, r16
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	de 01       	movw	r26, r28
    1392:	a9 5b       	subi	r26, 0xB9	; 185
    1394:	bf 4f       	sbci	r27, 0xFF	; 255
    1396:	fe 01       	movw	r30, r28
    1398:	e5 5b       	subi	r30, 0xB5	; 181
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	8d 93       	st	X+, r24
    13a2:	9c 93       	st	X, r25
    13a4:	fe 01       	movw	r30, r28
    13a6:	e9 5b       	subi	r30, 0xB9	; 185
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 81       	ld	r24, Z
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_voidInit+0x182>
    13b2:	fe 01       	movw	r30, r28
    13b4:	e9 5b       	subi	r30, 0xB9	; 185
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	91 83       	std	Z+1, r25	; 0x01
    13ba:	80 83       	st	Z, r24
	//DIO_enumSetPortValue(LCD_CTRL_PORT, DIO_PORT_HIGH);
	_delay_ms(30);

	LCD_voidSendCommand(LCD_HOME);
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
    13c2:	fe 01       	movw	r30, r28
    13c4:	ed 5b       	subi	r30, 0xBD	; 189
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e8       	ldi	r26, 0x80	; 128
    13ce:	bf e3       	ldi	r27, 0x3F	; 63
    13d0:	80 83       	st	Z, r24
    13d2:	91 83       	std	Z+1, r25	; 0x01
    13d4:	a2 83       	std	Z+2, r26	; 0x02
    13d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	8e 01       	movw	r16, r28
    13da:	01 5c       	subi	r16, 0xC1	; 193
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	fe 01       	movw	r30, r28
    13e0:	ed 5b       	subi	r30, 0xBD	; 189
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	4a ef       	ldi	r20, 0xFA	; 250
    13f2:	54 e4       	ldi	r21, 0x44	; 68
    13f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	f8 01       	movw	r30, r16
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1406:	fe 01       	movw	r30, r28
    1408:	ff 96       	adiw	r30, 0x3f	; 63
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e8       	ldi	r20, 0x80	; 128
    1418:	5f e3       	ldi	r21, 0x3F	; 63
    141a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    141e:	88 23       	and	r24, r24
    1420:	2c f4       	brge	.+10     	; 0x142c <LCD_voidInit+0x200>
		__ticks = 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	9e af       	std	Y+62, r25	; 0x3e
    1428:	8d af       	std	Y+61, r24	; 0x3d
    142a:	46 c0       	rjmp	.+140    	; 0x14b8 <LCD_voidInit+0x28c>
	else if (__tmp > 65535)
    142c:	fe 01       	movw	r30, r28
    142e:	ff 96       	adiw	r30, 0x3f	; 63
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	64 f5       	brge	.+88     	; 0x14a0 <LCD_voidInit+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	fe 01       	movw	r30, r28
    144a:	ed 5b       	subi	r30, 0xBD	; 189
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e af       	std	Y+62, r25	; 0x3e
    1474:	8d af       	std	Y+61, r24	; 0x3d
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <LCD_voidInit+0x26a>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c af       	std	Y+60, r25	; 0x3c
    147e:	8b af       	std	Y+59, r24	; 0x3b
    1480:	8b ad       	ldd	r24, Y+59	; 0x3b
    1482:	9c ad       	ldd	r25, Y+60	; 0x3c
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_voidInit+0x258>
    1488:	9c af       	std	Y+60, r25	; 0x3c
    148a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d ad       	ldd	r24, Y+61	; 0x3d
    148e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e af       	std	Y+62, r25	; 0x3e
    1494:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d ad       	ldd	r24, Y+61	; 0x3d
    1498:	9e ad       	ldd	r25, Y+62	; 0x3e
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <LCD_voidInit+0x24c>
    149e:	16 c0       	rjmp	.+44     	; 0x14cc <LCD_voidInit+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	fe 01       	movw	r30, r28
    14a2:	ff 96       	adiw	r30, 0x3f	; 63
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	9e af       	std	Y+62, r25	; 0x3e
    14b6:	8d af       	std	Y+61, r24	; 0x3d
    14b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    14bc:	9a af       	std	Y+58, r25	; 0x3a
    14be:	89 af       	std	Y+57, r24	; 0x39
    14c0:	89 ad       	ldd	r24, Y+57	; 0x39
    14c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <LCD_voidInit+0x298>
    14c8:	9a af       	std	Y+58, r25	; 0x3a
    14ca:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	LCD_voidSendCommand(0X38);
    14cc:	88 e3       	ldi	r24, 0x38	; 56
    14ce:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 e8       	ldi	r26, 0x80	; 128
    14d8:	bf e3       	ldi	r27, 0x3F	; 63
    14da:	8d ab       	std	Y+53, r24	; 0x35
    14dc:	9e ab       	std	Y+54, r25	; 0x36
    14de:	af ab       	std	Y+55, r26	; 0x37
    14e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e2:	6d a9       	ldd	r22, Y+53	; 0x35
    14e4:	7e a9       	ldd	r23, Y+54	; 0x36
    14e6:	8f a9       	ldd	r24, Y+55	; 0x37
    14e8:	98 ad       	ldd	r25, Y+56	; 0x38
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a ef       	ldi	r20, 0xFA	; 250
    14f0:	54 e4       	ldi	r21, 0x44	; 68
    14f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	89 ab       	std	Y+49, r24	; 0x31
    14fc:	9a ab       	std	Y+50, r25	; 0x32
    14fe:	ab ab       	std	Y+51, r26	; 0x33
    1500:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1502:	69 a9       	ldd	r22, Y+49	; 0x31
    1504:	7a a9       	ldd	r23, Y+50	; 0x32
    1506:	8b a9       	ldd	r24, Y+51	; 0x33
    1508:	9c a9       	ldd	r25, Y+52	; 0x34
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	2c f4       	brge	.+10     	; 0x1524 <LCD_voidInit+0x2f8>
		__ticks = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	98 ab       	std	Y+48, r25	; 0x30
    1520:	8f a7       	std	Y+47, r24	; 0x2f
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <LCD_voidInit+0x376>
	else if (__tmp > 65535)
    1524:	69 a9       	ldd	r22, Y+49	; 0x31
    1526:	7a a9       	ldd	r23, Y+50	; 0x32
    1528:	8b a9       	ldd	r24, Y+51	; 0x33
    152a:	9c a9       	ldd	r25, Y+52	; 0x34
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1538:	18 16       	cp	r1, r24
    153a:	4c f5       	brge	.+82     	; 0x158e <LCD_voidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153c:	6d a9       	ldd	r22, Y+53	; 0x35
    153e:	7e a9       	ldd	r23, Y+54	; 0x36
    1540:	8f a9       	ldd	r24, Y+55	; 0x37
    1542:	98 ad       	ldd	r25, Y+56	; 0x38
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	98 ab       	std	Y+48, r25	; 0x30
    1562:	8f a7       	std	Y+47, r24	; 0x2f
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <LCD_voidInit+0x358>
    1566:	88 ec       	ldi	r24, 0xC8	; 200
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9e a7       	std	Y+46, r25	; 0x2e
    156c:	8d a7       	std	Y+45, r24	; 0x2d
    156e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1570:	9e a5       	ldd	r25, Y+46	; 0x2e
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <LCD_voidInit+0x346>
    1576:	9e a7       	std	Y+46, r25	; 0x2e
    1578:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157a:	8f a5       	ldd	r24, Y+47	; 0x2f
    157c:	98 a9       	ldd	r25, Y+48	; 0x30
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	98 ab       	std	Y+48, r25	; 0x30
    1582:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1584:	8f a5       	ldd	r24, Y+47	; 0x2f
    1586:	98 a9       	ldd	r25, Y+48	; 0x30
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f7       	brne	.-38     	; 0x1566 <LCD_voidInit+0x33a>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <LCD_voidInit+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158e:	69 a9       	ldd	r22, Y+49	; 0x31
    1590:	7a a9       	ldd	r23, Y+50	; 0x32
    1592:	8b a9       	ldd	r24, Y+51	; 0x33
    1594:	9c a9       	ldd	r25, Y+52	; 0x34
    1596:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	98 ab       	std	Y+48, r25	; 0x30
    15a0:	8f a7       	std	Y+47, r24	; 0x2f
    15a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a4:	98 a9       	ldd	r25, Y+48	; 0x30
    15a6:	9c a7       	std	Y+44, r25	; 0x2c
    15a8:	8b a7       	std	Y+43, r24	; 0x2b
    15aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <LCD_voidInit+0x382>
    15b2:	9c a7       	std	Y+44, r25	; 0x2c
    15b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    15b6:	8c e0       	ldi	r24, 0x0C	; 12
    15b8:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e8       	ldi	r26, 0x80	; 128
    15c2:	bf e3       	ldi	r27, 0x3F	; 63
    15c4:	8f a3       	std	Y+39, r24	; 0x27
    15c6:	98 a7       	std	Y+40, r25	; 0x28
    15c8:	a9 a7       	std	Y+41, r26	; 0x29
    15ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6f a1       	ldd	r22, Y+39	; 0x27
    15ce:	78 a5       	ldd	r23, Y+40	; 0x28
    15d0:	89 a5       	ldd	r24, Y+41	; 0x29
    15d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a ef       	ldi	r20, 0xFA	; 250
    15da:	54 e4       	ldi	r21, 0x44	; 68
    15dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8b a3       	std	Y+35, r24	; 0x23
    15e6:	9c a3       	std	Y+36, r25	; 0x24
    15e8:	ad a3       	std	Y+37, r26	; 0x25
    15ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15ec:	6b a1       	ldd	r22, Y+35	; 0x23
    15ee:	7c a1       	ldd	r23, Y+36	; 0x24
    15f0:	8d a1       	ldd	r24, Y+37	; 0x25
    15f2:	9e a1       	ldd	r25, Y+38	; 0x26
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <LCD_voidInit+0x3e2>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9a a3       	std	Y+34, r25	; 0x22
    160a:	89 a3       	std	Y+33, r24	; 0x21
    160c:	3f c0       	rjmp	.+126    	; 0x168c <LCD_voidInit+0x460>
	else if (__tmp > 65535)
    160e:	6b a1       	ldd	r22, Y+35	; 0x23
    1610:	7c a1       	ldd	r23, Y+36	; 0x24
    1612:	8d a1       	ldd	r24, Y+37	; 0x25
    1614:	9e a1       	ldd	r25, Y+38	; 0x26
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <LCD_voidInit+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6f a1       	ldd	r22, Y+39	; 0x27
    1628:	78 a5       	ldd	r23, Y+40	; 0x28
    162a:	89 a5       	ldd	r24, Y+41	; 0x29
    162c:	9a a5       	ldd	r25, Y+42	; 0x2a
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9a a3       	std	Y+34, r25	; 0x22
    164c:	89 a3       	std	Y+33, r24	; 0x21
    164e:	0f c0       	rjmp	.+30     	; 0x166e <LCD_voidInit+0x442>
    1650:	88 ec       	ldi	r24, 0xC8	; 200
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	98 a3       	std	Y+32, r25	; 0x20
    1656:	8f 8f       	std	Y+31, r24	; 0x1f
    1658:	8f 8d       	ldd	r24, Y+31	; 0x1f
    165a:	98 a1       	ldd	r25, Y+32	; 0x20
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_voidInit+0x430>
    1660:	98 a3       	std	Y+32, r25	; 0x20
    1662:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	89 a1       	ldd	r24, Y+33	; 0x21
    1666:	9a a1       	ldd	r25, Y+34	; 0x22
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9a a3       	std	Y+34, r25	; 0x22
    166c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	89 a1       	ldd	r24, Y+33	; 0x21
    1670:	9a a1       	ldd	r25, Y+34	; 0x22
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <LCD_voidInit+0x424>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <LCD_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6b a1       	ldd	r22, Y+35	; 0x23
    167a:	7c a1       	ldd	r23, Y+36	; 0x24
    167c:	8d a1       	ldd	r24, Y+37	; 0x25
    167e:	9e a1       	ldd	r25, Y+38	; 0x26
    1680:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9a a3       	std	Y+34, r25	; 0x22
    168a:	89 a3       	std	Y+33, r24	; 0x21
    168c:	89 a1       	ldd	r24, Y+33	; 0x21
    168e:	9a a1       	ldd	r25, Y+34	; 0x22
    1690:	9e 8f       	std	Y+30, r25	; 0x1e
    1692:	8d 8f       	std	Y+29, r24	; 0x1d
    1694:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1696:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_voidInit+0x46c>
    169c:	9e 8f       	std	Y+30, r25	; 0x1e
    169e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidSendCommand(LCD_CLEAR);
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 e0       	ldi	r26, 0x00	; 0
    16ac:	b0 e4       	ldi	r27, 0x40	; 64
    16ae:	89 8f       	std	Y+25, r24	; 0x19
    16b0:	9a 8f       	std	Y+26, r25	; 0x1a
    16b2:	ab 8f       	std	Y+27, r26	; 0x1b
    16b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b6:	69 8d       	ldd	r22, Y+25	; 0x19
    16b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a ef       	ldi	r20, 0xFA	; 250
    16c4:	54 e4       	ldi	r21, 0x44	; 68
    16c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	8d 8b       	std	Y+21, r24	; 0x15
    16d0:	9e 8b       	std	Y+22, r25	; 0x16
    16d2:	af 8b       	std	Y+23, r26	; 0x17
    16d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	7e 89       	ldd	r23, Y+22	; 0x16
    16da:	8f 89       	ldd	r24, Y+23	; 0x17
    16dc:	98 8d       	ldd	r25, Y+24	; 0x18
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e8       	ldi	r20, 0x80	; 128
    16e4:	5f e3       	ldi	r21, 0x3F	; 63
    16e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ea:	88 23       	and	r24, r24
    16ec:	2c f4       	brge	.+10     	; 0x16f8 <LCD_voidInit+0x4cc>
		__ticks = 1;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9c 8b       	std	Y+20, r25	; 0x14
    16f4:	8b 8b       	std	Y+19, r24	; 0x13
    16f6:	3f c0       	rjmp	.+126    	; 0x1776 <LCD_voidInit+0x54a>
	else if (__tmp > 65535)
    16f8:	6d 89       	ldd	r22, Y+21	; 0x15
    16fa:	7e 89       	ldd	r23, Y+22	; 0x16
    16fc:	8f 89       	ldd	r24, Y+23	; 0x17
    16fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	57 e4       	ldi	r21, 0x47	; 71
    1708:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    170c:	18 16       	cp	r1, r24
    170e:	4c f5       	brge	.+82     	; 0x1762 <LCD_voidInit+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1710:	69 8d       	ldd	r22, Y+25	; 0x19
    1712:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1714:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1716:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e2       	ldi	r20, 0x20	; 32
    171e:	51 e4       	ldi	r21, 0x41	; 65
    1720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	bc 01       	movw	r22, r24
    172a:	cd 01       	movw	r24, r26
    172c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9c 8b       	std	Y+20, r25	; 0x14
    1736:	8b 8b       	std	Y+19, r24	; 0x13
    1738:	0f c0       	rjmp	.+30     	; 0x1758 <LCD_voidInit+0x52c>
    173a:	88 ec       	ldi	r24, 0xC8	; 200
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9a 8b       	std	Y+18, r25	; 0x12
    1740:	89 8b       	std	Y+17, r24	; 0x11
    1742:	89 89       	ldd	r24, Y+17	; 0x11
    1744:	9a 89       	ldd	r25, Y+18	; 0x12
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_voidInit+0x51a>
    174a:	9a 8b       	std	Y+18, r25	; 0x12
    174c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174e:	8b 89       	ldd	r24, Y+19	; 0x13
    1750:	9c 89       	ldd	r25, Y+20	; 0x14
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	9c 8b       	std	Y+20, r25	; 0x14
    1756:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1758:	8b 89       	ldd	r24, Y+19	; 0x13
    175a:	9c 89       	ldd	r25, Y+20	; 0x14
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	69 f7       	brne	.-38     	; 0x173a <LCD_voidInit+0x50e>
    1760:	14 c0       	rjmp	.+40     	; 0x178a <LCD_voidInit+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1762:	6d 89       	ldd	r22, Y+21	; 0x15
    1764:	7e 89       	ldd	r23, Y+22	; 0x16
    1766:	8f 89       	ldd	r24, Y+23	; 0x17
    1768:	98 8d       	ldd	r25, Y+24	; 0x18
    176a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9c 8b       	std	Y+20, r25	; 0x14
    1774:	8b 8b       	std	Y+19, r24	; 0x13
    1776:	8b 89       	ldd	r24, Y+19	; 0x13
    1778:	9c 89       	ldd	r25, Y+20	; 0x14
    177a:	98 8b       	std	Y+16, r25	; 0x10
    177c:	8f 87       	std	Y+15, r24	; 0x0f
    177e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1780:	98 89       	ldd	r25, Y+16	; 0x10
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <LCD_voidInit+0x556>
    1786:	98 8b       	std	Y+16, r25	; 0x10
    1788:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidSendCommand(LCD_ENTRY_MODE);
    178a:	86 e0       	ldi	r24, 0x06	; 6
    178c:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a0 e8       	ldi	r26, 0x80	; 128
    1796:	bf e3       	ldi	r27, 0x3F	; 63
    1798:	8b 87       	std	Y+11, r24	; 0x0b
    179a:	9c 87       	std	Y+12, r25	; 0x0c
    179c:	ad 87       	std	Y+13, r26	; 0x0d
    179e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a ef       	ldi	r20, 0xFA	; 250
    17ae:	54 e4       	ldi	r21, 0x44	; 68
    17b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	98 87       	std	Y+8, r25	; 0x08
    17bc:	a9 87       	std	Y+9, r26	; 0x09
    17be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <LCD_voidInit+0x5b6>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <LCD_voidInit+0x634>
	else if (__tmp > 65535)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <LCD_voidInit+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <LCD_voidInit+0x616>
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_voidInit+0x604>
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <LCD_voidInit+0x5f8>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <LCD_voidInit+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_voidInit+0x640>
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1874:	cc 5a       	subi	r28, 0xAC	; 172
    1876:	df 4f       	sbci	r29, 0xFF	; 255
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortValue(LCD_DATA_PORT, command);
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	69 81       	ldd	r22, Y+1	; 0x01
    189c:	0e 94 8d 14 	call	0x291a	; 0x291a <DIO_enumSetPortValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_LOW);
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>

	//Send Pulse
	LCD_voidSendPulse();
    18b4:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_voidSendPulse>
}
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_HIGH);
    18cc:	83 e0       	ldi	r24, 0x03	; 3
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    18d6:	83 e0       	ldi	r24, 0x03	; 3
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	DIO_enumSetPortValue(LCD_DATA_PORT, data);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	69 81       	ldd	r22, Y+1	; 0x01
    18e4:	0e 94 8d 14 	call	0x291a	; 0x291a <DIO_enumSetPortValue>

	//Send Pulse
	LCD_voidSendPulse();
    18e8:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_voidSendPulse>
}
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <LCD_voidSetCursorPosition>:

void LCD_voidSetCursorPosition(u8 row, u8 col)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <LCD_voidSetCursorPosition+0x6>
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	6b 83       	std	Y+3, r22	; 0x03
	u8 pos;
	if(row == 1)
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	21 f4       	brne	.+8      	; 0x1912 <LCD_voidSetCursorPosition+0x1e>
		pos = LCD_CURSOR + (col - 1);
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	81 58       	subi	r24, 0x81	; 129
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <LCD_voidSetCursorPosition+0x24>
	else
		pos = LCD_CURSOR + (col - 1) + 64;
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	81 54       	subi	r24, 0x41	; 65
    1916:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(pos);
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	0e 94 46 0c 	call	0x188c	; 0x188c <LCD_voidSendCommand>
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <LCD_voidSendString>:

void LCD_voidSendString(u8* str)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <LCD_voidSendString+0x6>
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	9b 83       	std	Y+3, r25	; 0x03
    1938:	8a 83       	std	Y+2, r24	; 0x02
	u8 ptr = 0;
    193a:	19 82       	std	Y+1, r1	; 0x01
    193c:	0e c0       	rjmp	.+28     	; 0x195a <LCD_voidSendString+0x30>
	while(str[ptr] != '\0')
	{
		LCD_voidSendData(str[ptr]);
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	9b 81       	ldd	r25, Y+3	; 0x03
    1948:	fc 01       	movw	r30, r24
    194a:	e2 0f       	add	r30, r18
    194c:	f3 1f       	adc	r31, r19
    194e:	80 81       	ld	r24, Z
    1950:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_voidSendData>
		ptr++;
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8* str)
{
	u8 ptr = 0;
	while(str[ptr] != '\0')
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	9b 81       	ldd	r25, Y+3	; 0x03
    1964:	fc 01       	movw	r30, r24
    1966:	e2 0f       	add	r30, r18
    1968:	f3 1f       	adc	r31, r19
    196a:	80 81       	ld	r24, Z
    196c:	88 23       	and	r24, r24
    196e:	39 f7       	brne	.-50     	; 0x193e <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[ptr]);
		ptr++;
	}
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <LCD_voidSendPulse>:
static void LCD_voidSendPulse()
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	2e 97       	sbiw	r28, 0x0e	; 14
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_HIGH);
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	62 e0       	ldi	r22, 0x02	; 2
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e8       	ldi	r26, 0x80	; 128
    19a0:	bf e3       	ldi	r27, 0x3F	; 63
    19a2:	8b 87       	std	Y+11, r24	; 0x0b
    19a4:	9c 87       	std	Y+12, r25	; 0x0c
    19a6:	ad 87       	std	Y+13, r26	; 0x0d
    19a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a ef       	ldi	r20, 0xFA	; 250
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8f 83       	std	Y+7, r24	; 0x07
    19c4:	98 87       	std	Y+8, r25	; 0x08
    19c6:	a9 87       	std	Y+9, r26	; 0x09
    19c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <LCD_voidSendPulse+0x70>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <LCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <LCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <LCD_voidSendPulse+0xd0>
    1a2e:	88 ec       	ldi	r24, 0xC8	; 200
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_voidSendPulse+0xbe>
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <LCD_voidSendPulse+0xb2>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <LCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_voidSendPulse+0xfa>
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_LOW);
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	62 e0       	ldi	r22, 0x02	; 2
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>

}
    1a88:	2e 96       	adiw	r28, 0x0e	; 14
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <SSD_voidInit>:
#include "SSD_config.h"

static u8 Local_u8SSDNums[10] = SSD_ArrNums;

void SSD_voidInit(SSD_Type SSD_Configuration)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <SSD_voidInit+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <SSD_voidInit+0x8>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	69 83       	std	Y+1, r22	; 0x01
    1aa8:	7a 83       	std	Y+2, r23	; 0x02
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection (SSD_Configuration.DataPort, DIO_PORT_OUTPUT);
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	6f ef       	ldi	r22, 0xFF	; 255
    1ab2:	0e 94 40 14 	call	0x2880	; 0x2880 <DIO_enumSetPortDirection>
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <SSD_voidSendNumber>:

void SSD_voidSendNumber(SSD_Type SSD_Configuration, u8 Copy_u8Number)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <SSD_voidSendNumber+0x6>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <SSD_voidSendNumber+0x8>
    1acc:	0f 92       	push	r0
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	69 83       	std	Y+1, r22	; 0x01
    1ad4:	7a 83       	std	Y+2, r23	; 0x02
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	4d 83       	std	Y+5, r20	; 0x05
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	88 23       	and	r24, r24
    1ae0:	69 f4       	brne	.+26     	; 0x1afc <SSD_voidSendNumber+0x38>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, Local_u8SSDNums[Copy_u8Number] );
    1ae2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	fc 01       	movw	r30, r24
    1aec:	e5 54       	subi	r30, 0x45	; 69
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	90 81       	ld	r25, Z
    1af2:	82 2f       	mov	r24, r18
    1af4:	69 2f       	mov	r22, r25
    1af6:	0e 94 8d 14 	call	0x291a	; 0x291a <DIO_enumSetPortValue>
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <SSD_voidSendNumber+0x5a>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	71 f4       	brne	.+28     	; 0x1b1e <SSD_voidSendNumber+0x5a>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, ~Local_u8SSDNums[Copy_u8Number]);
    1b02:	2a 81       	ldd	r18, Y+2	; 0x02
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	e5 54       	subi	r30, 0x45	; 69
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	98 2f       	mov	r25, r24
    1b14:	90 95       	com	r25
    1b16:	82 2f       	mov	r24, r18
    1b18:	69 2f       	mov	r22, r25
    1b1a:	0e 94 8d 14 	call	0x291a	; 0x291a <DIO_enumSetPortValue>
	}
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <SSD_voidEnable>:

void SSD_voidEnable(SSD_Type SSD_Configuration)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <SSD_voidEnable+0x6>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <SSD_voidEnable+0x8>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	69 83       	std	Y+1, r22	; 0x01
    1b3c:	7a 83       	std	Y+2, r23	; 0x02
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    1b40:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	69 2f       	mov	r22, r25
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	88 23       	and	r24, r24
    1b52:	39 f4       	brne	.+14     	; 0x1b62 <SSD_voidEnable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	69 2f       	mov	r22, r25
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <SSD_voidEnable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	31 f4       	brne	.+12     	; 0x1b74 <SSD_voidEnable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	69 2f       	mov	r22, r25
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	}
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <SSD_voidDisable>:

void SSD_voidDisable(SSD_Type SSD_Configuration)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <SSD_voidDisable+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <SSD_voidDisable+0x8>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	69 83       	std	Y+1, r22	; 0x01
    1b90:	7a 83       	std	Y+2, r23	; 0x02
    1b92:	8b 83       	std	Y+3, r24	; 0x03
    1b94:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	69 2f       	mov	r22, r25
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	88 23       	and	r24, r24
    1ba6:	39 f4       	brne	.+14     	; 0x1bb6 <SSD_voidDisable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	69 2f       	mov	r22, r25
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <SSD_voidDisable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	31 f4       	brne	.+12     	; 0x1bc8 <SSD_voidDisable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	69 2f       	mov	r22, r25
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	}
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <SW_voidInit>:
#include "SW_interface.h"
#include "SW_config.h"
#include "SW_private.h"

void SW_voidInit(SW_Type SW_Config)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <SW_voidInit+0x6>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	69 83       	std	Y+1, r22	; 0x01
    1be4:	7a 83       	std	Y+2, r23	; 0x02
    1be6:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(SW_Config.PORT, SW_Config.PIN, DIO_PIN_INPUT);
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	69 2f       	mov	r22, r25
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
	if(SW_Config.PULL_STATE == SW_INT_PULL_UP)
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	88 23       	and	r24, r24
    1bf8:	31 f4       	brne	.+12     	; 0x1c06 <SW_voidInit+0x30>
		DIO_enumSetPinValue(SW_Config.PORT, SW_Config.PIN, DIO_PIN_OUTPUT);
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	69 2f       	mov	r22, r25
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
}
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <SW_u8GetPressed>:

u8 SW_u8GetPressed (SW_Type SW_Config){
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <SW_u8GetPressed+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <SW_u8GetPressed+0x8>
    1c1a:	0f 92       	push	r0
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	6b 83       	std	Y+3, r22	; 0x03
    1c22:	7c 83       	std	Y+4, r23	; 0x04
    1c24:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    1c26:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    1c28:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.PULL_STATE == SW_INT_PULL_UP) || (SW_Config.PULL_STATE == SW_EXT_PULL_UP) )
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	88 23       	and	r24, r24
    1c2e:	19 f0       	breq	.+6      	; 0x1c36 <SW_u8GetPressed+0x24>
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	a1 f4       	brne	.+40     	; 0x1c5e <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	9e 01       	movw	r18, r28
    1c3c:	2e 5f       	subi	r18, 0xFE	; 254
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c40:	69 2f       	mov	r22, r25
    1c42:	a9 01       	movw	r20, r18
    1c44:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	88 23       	and	r24, r24
    1c4c:	19 f4       	brne	.+6      	; 0x1c54 <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	1b c0       	rjmp	.+54     	; 0x1c8a <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	c1 f4       	brne	.+48     	; 0x1c8a <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1c5a:	19 82       	std	Y+1, r1	; 0x01
    1c5c:	16 c0       	rjmp	.+44     	; 0x1c8a <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.PULL_STATE == SW_EXT_PULL_DOWN)
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	82 30       	cpi	r24, 0x02	; 2
    1c62:	99 f4       	brne	.+38     	; 0x1c8a <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	9e 01       	movw	r18, r28
    1c6a:	2e 5f       	subi	r18, 0xFE	; 254
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	69 2f       	mov	r22, r25
    1c70:	a9 01       	movw	r20, r18
    1c72:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	88 23       	and	r24, r24
    1c7a:	11 f4       	brne	.+4      	; 0x1c80 <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1c7c:	19 82       	std	Y+1, r1	; 0x01
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	11 f4       	brne	.+4      	; 0x1c8a <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <BUZ_voidInit>:


#include "BUZ_interface.h"

void BUZ_voidInit(BUZ_Type BUZ_Configuration)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <BUZ_voidInit+0x6>
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	69 83       	std	Y+1, r22	; 0x01
    1caa:	7a 83       	std	Y+2, r23	; 0x02
    1cac:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_OUTPUT);
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	69 2f       	mov	r22, r25
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <BUZ_voidON>:

void BUZ_voidON(BUZ_Type BUZ_Configuration)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <BUZ_voidON+0x6>
    1ccc:	0f 92       	push	r0
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	69 83       	std	Y+1, r22	; 0x01
    1cd4:	7a 83       	std	Y+2, r23	; 0x02
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
	if(BUZ_Configuration.Active_State == ACTIVE_HIGH)
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <BUZ_voidON+0x26>
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_HIGH);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	69 2f       	mov	r22, r25
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <BUZ_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_LOW);
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	69 2f       	mov	r22, r25
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	}
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <BUZ_voidOff>:

void BUZ_voidOff ( BUZ_Type BUZ_Configuration )
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <BUZ_voidOff+0x6>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	69 83       	std	Y+1, r22	; 0x01
    1d12:	7a 83       	std	Y+2, r23	; 0x02
    1d14:	8b 83       	std	Y+3, r24	; 0x03

	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	39 f4       	brne	.+14     	; 0x1d2a <BUZ_voidOff+0x26>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d20:	69 2f       	mov	r22, r25
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
    1d28:	09 c0       	rjmp	.+18     	; 0x1d3c <BUZ_voidOff+0x38>

	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	88 23       	and	r24, r24
    1d2e:	31 f4       	brne	.+12     	; 0x1d3c <BUZ_voidOff+0x38>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH  );
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	69 2f       	mov	r22, r25
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>

	}

}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <BUZ_voidToggle>:


void BUZ_voidToggle(BUZ_Type BUZ_Configuration)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <BUZ_voidToggle+0x6>
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	69 83       	std	Y+1, r22	; 0x01
    1d56:	7a 83       	std	Y+2, r23	; 0x02
    1d58:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin);
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	69 2f       	mov	r22, r25
    1d60:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumTogglePinValue>
}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <LED_voidInit>:
#include "LED_interface.h"



void LED_voidInit(LED_Type LED_Configuration)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <LED_voidInit+0x6>
    1d76:	0f 92       	push	r0
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	69 83       	std	Y+1, r22	; 0x01
    1d7e:	7a 83       	std	Y+2, r23	; 0x02
    1d80:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_OUTPUT);
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	69 2f       	mov	r22, r25
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_enumSetPinDirection>
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <LED_voidON>:

void LED_voidON(LED_Type LED_Configuration)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <LED_voidON+0x6>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	69 83       	std	Y+1, r22	; 0x01
    1da8:	7a 83       	std	Y+2, r23	; 0x02
    1daa:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	39 f4       	brne	.+14     	; 0x1dc0 <LED_voidON+0x26>
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_HIGH);
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	69 2f       	mov	r22, r25
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <LED_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_LOW);
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	69 2f       	mov	r22, r25
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_enumSetPinValue>
	}
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <LED_voidToggle>:

void LED_voidToggle(LED_Type LED_Configuration)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <LED_voidToggle+0x6>
    1dde:	0f 92       	push	r0
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	69 83       	std	Y+1, r22	; 0x01
    1de6:	7a 83       	std	Y+2, r23	; 0x02
    1de8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.port, LED_Configuration.pin);
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	69 2f       	mov	r22, r25
    1df0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumTogglePinValue>
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <DIO_enumSetPinDirection>:




DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	28 97       	sbiw	r28, 0x08	; 8
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	8a 83       	std	Y+2, r24	; 0x02
    1e16:	6b 83       	std	Y+3, r22	; 0x03
    1e18:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <DIO_enumSetPinDirection+0x26>
    1e24:	f1 c0       	rjmp	.+482    	; 0x2008 <DIO_enumSetPinDirection+0x208>
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	88 30       	cpi	r24, 0x08	; 8
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <DIO_enumSetPinDirection+0x2e>
    1e2c:	ed c0       	rjmp	.+474    	; 0x2008 <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <DIO_enumSetPinDirection+0x36>
    1e34:	6f c0       	rjmp	.+222    	; 0x1f14 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	38 87       	std	Y+8, r19	; 0x08
    1e3e:	2f 83       	std	Y+7, r18	; 0x07
    1e40:	8f 81       	ldd	r24, Y+7	; 0x07
    1e42:	98 85       	ldd	r25, Y+8	; 0x08
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	49 f1       	breq	.+82     	; 0x1e9c <DIO_enumSetPinDirection+0x9c>
    1e4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e4c:	38 85       	ldd	r19, Y+8	; 0x08
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <DIO_enumSetPinDirection+0x5e>
    1e54:	8f 81       	ldd	r24, Y+7	; 0x07
    1e56:	98 85       	ldd	r25, Y+8	; 0x08
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	61 f0       	breq	.+24     	; 0x1e74 <DIO_enumSetPinDirection+0x74>
    1e5c:	d6 c0       	rjmp	.+428    	; 0x200a <DIO_enumSetPinDirection+0x20a>
    1e5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e60:	38 85       	ldd	r19, Y+8	; 0x08
    1e62:	22 30       	cpi	r18, 0x02	; 2
    1e64:	31 05       	cpc	r19, r1
    1e66:	71 f1       	breq	.+92     	; 0x1ec4 <DIO_enumSetPinDirection+0xc4>
    1e68:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6a:	98 85       	ldd	r25, Y+8	; 0x08
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	e9 f1       	breq	.+122    	; 0x1eec <DIO_enumSetPinDirection+0xec>
    1e72:	cb c0       	rjmp	.+406    	; 0x200a <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    1e74:	aa e3       	ldi	r26, 0x3A	; 58
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	ea e3       	ldi	r30, 0x3A	; 58
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_enumSetPinDirection+0x92>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_enumSetPinDirection+0x8e>
    1e96:	84 2b       	or	r24, r20
    1e98:	8c 93       	st	X, r24
    1e9a:	b7 c0       	rjmp	.+366    	; 0x200a <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    1e9c:	a7 e3       	ldi	r26, 0x37	; 55
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e7 e3       	ldi	r30, 0x37	; 55
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <DIO_enumSetPinDirection+0xba>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <DIO_enumSetPinDirection+0xb6>
    1ebe:	84 2b       	or	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	a3 c0       	rjmp	.+326    	; 0x200a <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    1ec4:	a4 e3       	ldi	r26, 0x34	; 52
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e4 e3       	ldi	r30, 0x34	; 52
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_enumSetPinDirection+0xe2>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_enumSetPinDirection+0xde>
    1ee6:	84 2b       	or	r24, r20
    1ee8:	8c 93       	st	X, r24
    1eea:	8f c0       	rjmp	.+286    	; 0x200a <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    1eec:	a1 e3       	ldi	r26, 0x31	; 49
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e1 e3       	ldi	r30, 0x31	; 49
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_enumSetPinDirection+0x10a>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_enumSetPinDirection+0x106>
    1f0e:	84 2b       	or	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	7b c0       	rjmp	.+246    	; 0x200a <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	88 23       	and	r24, r24
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <DIO_enumSetPinDirection+0x11c>
    1f1a:	74 c0       	rjmp	.+232    	; 0x2004 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	3e 83       	std	Y+6, r19	; 0x06
    1f24:	2d 83       	std	Y+5, r18	; 0x05
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	59 f1       	breq	.+86     	; 0x1f86 <DIO_enumSetPinDirection+0x186>
    1f30:	2d 81       	ldd	r18, Y+5	; 0x05
    1f32:	3e 81       	ldd	r19, Y+6	; 0x06
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <DIO_enumSetPinDirection+0x144>
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	69 f0       	breq	.+26     	; 0x1f5c <DIO_enumSetPinDirection+0x15c>
    1f42:	63 c0       	rjmp	.+198    	; 0x200a <DIO_enumSetPinDirection+0x20a>
    1f44:	2d 81       	ldd	r18, Y+5	; 0x05
    1f46:	3e 81       	ldd	r19, Y+6	; 0x06
    1f48:	22 30       	cpi	r18, 0x02	; 2
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	89 f1       	breq	.+98     	; 0x1fb0 <DIO_enumSetPinDirection+0x1b0>
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	83 30       	cpi	r24, 0x03	; 3
    1f54:	91 05       	cpc	r25, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <DIO_enumSetPinDirection+0x15a>
    1f58:	40 c0       	rjmp	.+128    	; 0x1fda <DIO_enumSetPinDirection+0x1da>
    1f5a:	57 c0       	rjmp	.+174    	; 0x200a <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    1f5c:	aa e3       	ldi	r26, 0x3A	; 58
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	ea e3       	ldi	r30, 0x3A	; 58
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 2e       	mov	r0, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <DIO_enumSetPinDirection+0x17a>
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <DIO_enumSetPinDirection+0x176>
    1f7e:	80 95       	com	r24
    1f80:	84 23       	and	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	42 c0       	rjmp	.+132    	; 0x200a <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    1f86:	a7 e3       	ldi	r26, 0x37	; 55
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e7 e3       	ldi	r30, 0x37	; 55
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_enumSetPinDirection+0x1a4>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_enumSetPinDirection+0x1a0>
    1fa8:	80 95       	com	r24
    1faa:	84 23       	and	r24, r20
    1fac:	8c 93       	st	X, r24
    1fae:	2d c0       	rjmp	.+90     	; 0x200a <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    1fb0:	a4 e3       	ldi	r26, 0x34	; 52
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e4 e3       	ldi	r30, 0x34	; 52
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_enumSetPinDirection+0x1ce>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_enumSetPinDirection+0x1ca>
    1fd2:	80 95       	com	r24
    1fd4:	84 23       	and	r24, r20
    1fd6:	8c 93       	st	X, r24
    1fd8:	18 c0       	rjmp	.+48     	; 0x200a <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    1fda:	a1 e3       	ldi	r26, 0x31	; 49
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e1 e3       	ldi	r30, 0x31	; 49
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_enumSetPinDirection+0x1f8>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <DIO_enumSetPinDirection+0x1f4>
    1ffc:	80 95       	com	r24
    1ffe:	84 23       	and	r24, r20
    2000:	8c 93       	st	X, r24
    2002:	03 c0       	rjmp	.+6      	; 0x200a <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    2004:	19 82       	std	Y+1, r1	; 0x01
    2006:	01 c0       	rjmp	.+2      	; 0x200a <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    2008:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    200a:	89 81       	ldd	r24, Y+1	; 0x01

}
    200c:	28 96       	adiw	r28, 0x08	; 8
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	28 97       	sbiw	r28, 0x08	; 8
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	8a 83       	std	Y+2, r24	; 0x02
    2034:	6b 83       	std	Y+3, r22	; 0x03
    2036:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	84 30       	cpi	r24, 0x04	; 4
    2040:	08 f0       	brcs	.+2      	; 0x2044 <DIO_enumSetPinValue+0x26>
    2042:	f1 c0       	rjmp	.+482    	; 0x2226 <DIO_enumSetPinValue+0x208>
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	88 30       	cpi	r24, 0x08	; 8
    2048:	08 f0       	brcs	.+2      	; 0x204c <DIO_enumSetPinValue+0x2e>
    204a:	ed c0       	rjmp	.+474    	; 0x2226 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	09 f0       	breq	.+2      	; 0x2054 <DIO_enumSetPinValue+0x36>
    2052:	6f c0       	rjmp	.+222    	; 0x2132 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	38 87       	std	Y+8, r19	; 0x08
    205c:	2f 83       	std	Y+7, r18	; 0x07
    205e:	8f 81       	ldd	r24, Y+7	; 0x07
    2060:	98 85       	ldd	r25, Y+8	; 0x08
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	91 05       	cpc	r25, r1
    2066:	49 f1       	breq	.+82     	; 0x20ba <DIO_enumSetPinValue+0x9c>
    2068:	2f 81       	ldd	r18, Y+7	; 0x07
    206a:	38 85       	ldd	r19, Y+8	; 0x08
    206c:	22 30       	cpi	r18, 0x02	; 2
    206e:	31 05       	cpc	r19, r1
    2070:	2c f4       	brge	.+10     	; 0x207c <DIO_enumSetPinValue+0x5e>
    2072:	8f 81       	ldd	r24, Y+7	; 0x07
    2074:	98 85       	ldd	r25, Y+8	; 0x08
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	61 f0       	breq	.+24     	; 0x2092 <DIO_enumSetPinValue+0x74>
    207a:	d6 c0       	rjmp	.+428    	; 0x2228 <DIO_enumSetPinValue+0x20a>
    207c:	2f 81       	ldd	r18, Y+7	; 0x07
    207e:	38 85       	ldd	r19, Y+8	; 0x08
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	71 f1       	breq	.+92     	; 0x20e2 <DIO_enumSetPinValue+0xc4>
    2086:	8f 81       	ldd	r24, Y+7	; 0x07
    2088:	98 85       	ldd	r25, Y+8	; 0x08
    208a:	83 30       	cpi	r24, 0x03	; 3
    208c:	91 05       	cpc	r25, r1
    208e:	e9 f1       	breq	.+122    	; 0x210a <DIO_enumSetPinValue+0xec>
    2090:	cb c0       	rjmp	.+406    	; 0x2228 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    2092:	ab e3       	ldi	r26, 0x3B	; 59
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	eb e3       	ldi	r30, 0x3B	; 59
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 2e       	mov	r0, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <DIO_enumSetPinValue+0x92>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	0a 94       	dec	r0
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <DIO_enumSetPinValue+0x8e>
    20b4:	84 2b       	or	r24, r20
    20b6:	8c 93       	st	X, r24
    20b8:	b7 c0       	rjmp	.+366    	; 0x2228 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    20ba:	a8 e3       	ldi	r26, 0x38	; 56
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e8 e3       	ldi	r30, 0x38	; 56
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	48 2f       	mov	r20, r24
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	02 2e       	mov	r0, r18
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <DIO_enumSetPinValue+0xba>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	0a 94       	dec	r0
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <DIO_enumSetPinValue+0xb6>
    20dc:	84 2b       	or	r24, r20
    20de:	8c 93       	st	X, r24
    20e0:	a3 c0       	rjmp	.+326    	; 0x2228 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    20e2:	a5 e3       	ldi	r26, 0x35	; 53
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e5 e3       	ldi	r30, 0x35	; 53
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <DIO_enumSetPinValue+0xe2>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <DIO_enumSetPinValue+0xde>
    2104:	84 2b       	or	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	8f c0       	rjmp	.+286    	; 0x2228 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    210a:	a2 e3       	ldi	r26, 0x32	; 50
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e2 e3       	ldi	r30, 0x32	; 50
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <DIO_enumSetPinValue+0x10a>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <DIO_enumSetPinValue+0x106>
    212c:	84 2b       	or	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	7b c0       	rjmp	.+246    	; 0x2228 <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	88 23       	and	r24, r24
    2136:	09 f0       	breq	.+2      	; 0x213a <DIO_enumSetPinValue+0x11c>
    2138:	74 c0       	rjmp	.+232    	; 0x2222 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3e 83       	std	Y+6, r19	; 0x06
    2142:	2d 83       	std	Y+5, r18	; 0x05
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	59 f1       	breq	.+86     	; 0x21a4 <DIO_enumSetPinValue+0x186>
    214e:	2d 81       	ldd	r18, Y+5	; 0x05
    2150:	3e 81       	ldd	r19, Y+6	; 0x06
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	2c f4       	brge	.+10     	; 0x2162 <DIO_enumSetPinValue+0x144>
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f0       	breq	.+26     	; 0x217a <DIO_enumSetPinValue+0x15c>
    2160:	63 c0       	rjmp	.+198    	; 0x2228 <DIO_enumSetPinValue+0x20a>
    2162:	2d 81       	ldd	r18, Y+5	; 0x05
    2164:	3e 81       	ldd	r19, Y+6	; 0x06
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	89 f1       	breq	.+98     	; 0x21ce <DIO_enumSetPinValue+0x1b0>
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	91 05       	cpc	r25, r1
    2174:	09 f4       	brne	.+2      	; 0x2178 <DIO_enumSetPinValue+0x15a>
    2176:	40 c0       	rjmp	.+128    	; 0x21f8 <DIO_enumSetPinValue+0x1da>
    2178:	57 c0       	rjmp	.+174    	; 0x2228 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    217a:	ab e3       	ldi	r26, 0x3B	; 59
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	eb e3       	ldi	r30, 0x3B	; 59
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_enumSetPinValue+0x17a>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_enumSetPinValue+0x176>
    219c:	80 95       	com	r24
    219e:	84 23       	and	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	42 c0       	rjmp	.+132    	; 0x2228 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    21a4:	a8 e3       	ldi	r26, 0x38	; 56
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e8 e3       	ldi	r30, 0x38	; 56
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <DIO_enumSetPinValue+0x1a4>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <DIO_enumSetPinValue+0x1a0>
    21c6:	80 95       	com	r24
    21c8:	84 23       	and	r24, r20
    21ca:	8c 93       	st	X, r24
    21cc:	2d c0       	rjmp	.+90     	; 0x2228 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    21ce:	a5 e3       	ldi	r26, 0x35	; 53
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e5 e3       	ldi	r30, 0x35	; 53
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 2e       	mov	r0, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <DIO_enumSetPinValue+0x1ce>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	0a 94       	dec	r0
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <DIO_enumSetPinValue+0x1ca>
    21f0:	80 95       	com	r24
    21f2:	84 23       	and	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	18 c0       	rjmp	.+48     	; 0x2228 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    21f8:	a2 e3       	ldi	r26, 0x32	; 50
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e2 e3       	ldi	r30, 0x32	; 50
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <DIO_enumSetPinValue+0x1f8>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <DIO_enumSetPinValue+0x1f4>
    221a:	80 95       	com	r24
    221c:	84 23       	and	r24, r20
    221e:	8c 93       	st	X, r24
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    2222:	19 82       	std	Y+1, r1	; 0x01
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    2226:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    2228:	89 81       	ldd	r24, Y+1	; 0x01

}
    222a:	28 96       	adiw	r28, 0x08	; 8
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <DIO_enumGetPinValue>:



DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	27 97       	sbiw	r28, 0x07	; 7
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	8a 83       	std	Y+2, r24	; 0x02
    2252:	6b 83       	std	Y+3, r22	; 0x03
    2254:	5d 83       	std	Y+5, r21	; 0x05
    2256:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	84 30       	cpi	r24, 0x04	; 4
    2260:	08 f0       	brcs	.+2      	; 0x2264 <DIO_enumGetPinValue+0x28>
    2262:	a6 c0       	rjmp	.+332    	; 0x23b0 <DIO_enumGetPinValue+0x174>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	88 30       	cpi	r24, 0x08	; 8
    2268:	08 f0       	brcs	.+2      	; 0x226c <DIO_enumGetPinValue+0x30>
    226a:	a2 c0       	rjmp	.+324    	; 0x23b0 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	3f 83       	std	Y+7, r19	; 0x07
    2274:	2e 83       	std	Y+6, r18	; 0x06
    2276:	4e 81       	ldd	r20, Y+6	; 0x06
    2278:	5f 81       	ldd	r21, Y+7	; 0x07
    227a:	41 30       	cpi	r20, 0x01	; 1
    227c:	51 05       	cpc	r21, r1
    227e:	c1 f1       	breq	.+112    	; 0x22f0 <DIO_enumGetPinValue+0xb4>
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	82 30       	cpi	r24, 0x02	; 2
    2286:	91 05       	cpc	r25, r1
    2288:	34 f4       	brge	.+12     	; 0x2296 <DIO_enumGetPinValue+0x5a>
    228a:	2e 81       	ldd	r18, Y+6	; 0x06
    228c:	3f 81       	ldd	r19, Y+7	; 0x07
    228e:	21 15       	cp	r18, r1
    2290:	31 05       	cpc	r19, r1
    2292:	71 f0       	breq	.+28     	; 0x22b0 <DIO_enumGetPinValue+0x74>
    2294:	8e c0       	rjmp	.+284    	; 0x23b2 <DIO_enumGetPinValue+0x176>
    2296:	4e 81       	ldd	r20, Y+6	; 0x06
    2298:	5f 81       	ldd	r21, Y+7	; 0x07
    229a:	42 30       	cpi	r20, 0x02	; 2
    229c:	51 05       	cpc	r21, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <DIO_enumGetPinValue+0x66>
    22a0:	47 c0       	rjmp	.+142    	; 0x2330 <DIO_enumGetPinValue+0xf4>
    22a2:	8e 81       	ldd	r24, Y+6	; 0x06
    22a4:	9f 81       	ldd	r25, Y+7	; 0x07
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <DIO_enumGetPinValue+0x72>
    22ac:	61 c0       	rjmp	.+194    	; 0x2370 <DIO_enumGetPinValue+0x134>
    22ae:	81 c0       	rjmp	.+258    	; 0x23b2 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    22b0:	e9 e3       	ldi	r30, 0x39	; 57
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <DIO_enumGetPinValue+0x8e>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	2a 95       	dec	r18
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <DIO_enumGetPinValue+0x8a>
    22ce:	9a 01       	movw	r18, r20
    22d0:	28 23       	and	r18, r24
    22d2:	39 23       	and	r19, r25
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a9 01       	movw	r20, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <DIO_enumGetPinValue+0xa6>
    22de:	55 95       	asr	r21
    22e0:	47 95       	ror	r20
    22e2:	8a 95       	dec	r24
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <DIO_enumGetPinValue+0xa2>
    22e6:	ca 01       	movw	r24, r20
    22e8:	ec 81       	ldd	r30, Y+4	; 0x04
    22ea:	fd 81       	ldd	r31, Y+5	; 0x05
    22ec:	80 83       	st	Z, r24
    22ee:	61 c0       	rjmp	.+194    	; 0x23b2 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    22f0:	e6 e3       	ldi	r30, 0x36	; 54
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	48 2f       	mov	r20, r24
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 c0       	rjmp	.+4      	; 0x230a <DIO_enumGetPinValue+0xce>
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	2a 95       	dec	r18
    230c:	e2 f7       	brpl	.-8      	; 0x2306 <DIO_enumGetPinValue+0xca>
    230e:	9a 01       	movw	r18, r20
    2310:	28 23       	and	r18, r24
    2312:	39 23       	and	r19, r25
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_enumGetPinValue+0xe6>
    231e:	55 95       	asr	r21
    2320:	47 95       	ror	r20
    2322:	8a 95       	dec	r24
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_enumGetPinValue+0xe2>
    2326:	ca 01       	movw	r24, r20
    2328:	ec 81       	ldd	r30, Y+4	; 0x04
    232a:	fd 81       	ldd	r31, Y+5	; 0x05
    232c:	80 83       	st	Z, r24
    232e:	41 c0       	rjmp	.+130    	; 0x23b2 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    2330:	e3 e3       	ldi	r30, 0x33	; 51
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	48 2f       	mov	r20, r24
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 c0       	rjmp	.+4      	; 0x234a <DIO_enumGetPinValue+0x10e>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	2a 95       	dec	r18
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <DIO_enumGetPinValue+0x10a>
    234e:	9a 01       	movw	r18, r20
    2350:	28 23       	and	r18, r24
    2352:	39 23       	and	r19, r25
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a9 01       	movw	r20, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_enumGetPinValue+0x126>
    235e:	55 95       	asr	r21
    2360:	47 95       	ror	r20
    2362:	8a 95       	dec	r24
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_enumGetPinValue+0x122>
    2366:	ca 01       	movw	r24, r20
    2368:	ec 81       	ldd	r30, Y+4	; 0x04
    236a:	fd 81       	ldd	r31, Y+5	; 0x05
    236c:	80 83       	st	Z, r24
    236e:	21 c0       	rjmp	.+66     	; 0x23b2 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    2370:	e0 e3       	ldi	r30, 0x30	; 48
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	48 2f       	mov	r20, r24
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 c0       	rjmp	.+4      	; 0x238a <DIO_enumGetPinValue+0x14e>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	2a 95       	dec	r18
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <DIO_enumGetPinValue+0x14a>
    238e:	9a 01       	movw	r18, r20
    2390:	28 23       	and	r18, r24
    2392:	39 23       	and	r19, r25
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	a9 01       	movw	r20, r18
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <DIO_enumGetPinValue+0x166>
    239e:	55 95       	asr	r21
    23a0:	47 95       	ror	r20
    23a2:	8a 95       	dec	r24
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <DIO_enumGetPinValue+0x162>
    23a6:	ca 01       	movw	r24, r20
    23a8:	ec 81       	ldd	r30, Y+4	; 0x04
    23aa:	fd 81       	ldd	r31, Y+5	; 0x05
    23ac:	80 83       	st	Z, r24
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    23b0:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b4:	27 96       	adiw	r28, 0x07	; 7
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <DIO_enumTogglePinValue>:


DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <DIO_enumTogglePinValue+0x6>
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <DIO_enumTogglePinValue+0x8>
    23ce:	0f 92       	push	r0
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	8a 83       	std	Y+2, r24	; 0x02
    23d6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	88 30       	cpi	r24, 0x08	; 8
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <DIO_enumTogglePinValue+0x1e>
    23e2:	6f c0       	rjmp	.+222    	; 0x24c2 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	3d 83       	std	Y+5, r19	; 0x05
    23ec:	2c 83       	std	Y+4, r18	; 0x04
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	9d 81       	ldd	r25, Y+5	; 0x05
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	91 05       	cpc	r25, r1
    23f6:	49 f1       	breq	.+82     	; 0x244a <DIO_enumTogglePinValue+0x84>
    23f8:	2c 81       	ldd	r18, Y+4	; 0x04
    23fa:	3d 81       	ldd	r19, Y+5	; 0x05
    23fc:	22 30       	cpi	r18, 0x02	; 2
    23fe:	31 05       	cpc	r19, r1
    2400:	2c f4       	brge	.+10     	; 0x240c <DIO_enumTogglePinValue+0x46>
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	9d 81       	ldd	r25, Y+5	; 0x05
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	61 f0       	breq	.+24     	; 0x2422 <DIO_enumTogglePinValue+0x5c>
    240a:	5c c0       	rjmp	.+184    	; 0x24c4 <DIO_enumTogglePinValue+0xfe>
    240c:	2c 81       	ldd	r18, Y+4	; 0x04
    240e:	3d 81       	ldd	r19, Y+5	; 0x05
    2410:	22 30       	cpi	r18, 0x02	; 2
    2412:	31 05       	cpc	r19, r1
    2414:	71 f1       	breq	.+92     	; 0x2472 <DIO_enumTogglePinValue+0xac>
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	9d 81       	ldd	r25, Y+5	; 0x05
    241a:	83 30       	cpi	r24, 0x03	; 3
    241c:	91 05       	cpc	r25, r1
    241e:	e9 f1       	breq	.+122    	; 0x249a <DIO_enumTogglePinValue+0xd4>
    2420:	51 c0       	rjmp	.+162    	; 0x24c4 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    2422:	ab e3       	ldi	r26, 0x3B	; 59
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	eb e3       	ldi	r30, 0x3B	; 59
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	48 2f       	mov	r20, r24
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	02 2e       	mov	r0, r18
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <DIO_enumTogglePinValue+0x7a>
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	0a 94       	dec	r0
    2442:	e2 f7       	brpl	.-8      	; 0x243c <DIO_enumTogglePinValue+0x76>
    2444:	84 27       	eor	r24, r20
    2446:	8c 93       	st	X, r24
    2448:	3d c0       	rjmp	.+122    	; 0x24c4 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    244a:	a8 e3       	ldi	r26, 0x38	; 56
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e8 e3       	ldi	r30, 0x38	; 56
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	48 2f       	mov	r20, r24
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	02 2e       	mov	r0, r18
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <DIO_enumTogglePinValue+0xa2>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	0a 94       	dec	r0
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <DIO_enumTogglePinValue+0x9e>
    246c:	84 27       	eor	r24, r20
    246e:	8c 93       	st	X, r24
    2470:	29 c0       	rjmp	.+82     	; 0x24c4 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    2472:	a5 e3       	ldi	r26, 0x35	; 53
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e5 e3       	ldi	r30, 0x35	; 53
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	48 2f       	mov	r20, r24
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	02 2e       	mov	r0, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <DIO_enumTogglePinValue+0xca>
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	0a 94       	dec	r0
    2492:	e2 f7       	brpl	.-8      	; 0x248c <DIO_enumTogglePinValue+0xc6>
    2494:	84 27       	eor	r24, r20
    2496:	8c 93       	st	X, r24
    2498:	15 c0       	rjmp	.+42     	; 0x24c4 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    249a:	a2 e3       	ldi	r26, 0x32	; 50
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e2 e3       	ldi	r30, 0x32	; 50
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	48 2f       	mov	r20, r24
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	02 2e       	mov	r0, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <DIO_enumTogglePinValue+0xf2>
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	0a 94       	dec	r0
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <DIO_enumTogglePinValue+0xee>
    24bc:	84 27       	eor	r24, r20
    24be:	8c 93       	st	X, r24
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    24c2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <DIO_enumConnectPullup>:


DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <DIO_enumConnectPullup+0x6>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <DIO_enumConnectPullup+0x8>
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <DIO_enumConnectPullup+0xa>
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	8a 83       	std	Y+2, r24	; 0x02
    24e6:	6b 83       	std	Y+3, r22	; 0x03
    24e8:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	84 30       	cpi	r24, 0x04	; 4
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <DIO_enumConnectPullup+0x20>
    24f4:	3e c1       	rjmp	.+636    	; 0x2772 <DIO_enumConnectPullup+0x29c>
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	88 30       	cpi	r24, 0x08	; 8
    24fa:	08 f0       	brcs	.+2      	; 0x24fe <DIO_enumConnectPullup+0x28>
    24fc:	3a c1       	rjmp	.+628    	; 0x2772 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3e 83       	std	Y+6, r19	; 0x06
    2506:	2d 83       	std	Y+5, r18	; 0x05
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	09 f4       	brne	.+2      	; 0x2514 <DIO_enumConnectPullup+0x3e>
    2512:	5d c0       	rjmp	.+186    	; 0x25ce <DIO_enumConnectPullup+0xf8>
    2514:	2d 81       	ldd	r18, Y+5	; 0x05
    2516:	3e 81       	ldd	r19, Y+6	; 0x06
    2518:	22 30       	cpi	r18, 0x02	; 2
    251a:	31 05       	cpc	r19, r1
    251c:	2c f4       	brge	.+10     	; 0x2528 <DIO_enumConnectPullup+0x52>
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	71 f0       	breq	.+28     	; 0x2542 <DIO_enumConnectPullup+0x6c>
    2526:	26 c1       	rjmp	.+588    	; 0x2774 <DIO_enumConnectPullup+0x29e>
    2528:	2d 81       	ldd	r18, Y+5	; 0x05
    252a:	3e 81       	ldd	r19, Y+6	; 0x06
    252c:	22 30       	cpi	r18, 0x02	; 2
    252e:	31 05       	cpc	r19, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <DIO_enumConnectPullup+0x5e>
    2532:	93 c0       	rjmp	.+294    	; 0x265a <DIO_enumConnectPullup+0x184>
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	83 30       	cpi	r24, 0x03	; 3
    253a:	91 05       	cpc	r25, r1
    253c:	09 f4       	brne	.+2      	; 0x2540 <DIO_enumConnectPullup+0x6a>
    253e:	d3 c0       	rjmp	.+422    	; 0x26e6 <DIO_enumConnectPullup+0x210>
    2540:	19 c1       	rjmp	.+562    	; 0x2774 <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	81 30       	cpi	r24, 0x01	; 1
    2546:	71 f5       	brne	.+92     	; 0x25a4 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    2548:	a0 e5       	ldi	r26, 0x50	; 80
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e0 e5       	ldi	r30, 0x50	; 80
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	8b 7f       	andi	r24, 0xFB	; 251
    2554:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    2556:	aa e3       	ldi	r26, 0x3A	; 58
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	ea e3       	ldi	r30, 0x3A	; 58
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	48 2f       	mov	r20, r24
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <DIO_enumConnectPullup+0x9c>
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	2a 95       	dec	r18
    2574:	e2 f7       	brpl	.-8      	; 0x256e <DIO_enumConnectPullup+0x98>
    2576:	80 95       	com	r24
    2578:	84 23       	and	r24, r20
    257a:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    257c:	ab e3       	ldi	r26, 0x3B	; 59
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	eb e3       	ldi	r30, 0x3B	; 59
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	48 2f       	mov	r20, r24
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	02 2e       	mov	r0, r18
    2594:	02 c0       	rjmp	.+4      	; 0x259a <DIO_enumConnectPullup+0xc4>
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	0a 94       	dec	r0
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <DIO_enumConnectPullup+0xc0>
    259e:	84 2b       	or	r24, r20
    25a0:	8c 93       	st	X, r24
    25a2:	e8 c0       	rjmp	.+464    	; 0x2774 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    25a4:	ab e3       	ldi	r26, 0x3B	; 59
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	eb e3       	ldi	r30, 0x3B	; 59
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	48 2f       	mov	r20, r24
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <DIO_enumConnectPullup+0xec>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <DIO_enumConnectPullup+0xe8>
    25c6:	80 95       	com	r24
    25c8:	84 23       	and	r24, r20
    25ca:	8c 93       	st	X, r24
    25cc:	d3 c0       	rjmp	.+422    	; 0x2774 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    25ce:	8c 81       	ldd	r24, Y+4	; 0x04
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	71 f5       	brne	.+92     	; 0x2630 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    25d4:	a0 e5       	ldi	r26, 0x50	; 80
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e0 e5       	ldi	r30, 0x50	; 80
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8b 7f       	andi	r24, 0xFB	; 251
    25e0:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    25e2:	a7 e3       	ldi	r26, 0x37	; 55
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e7 e3       	ldi	r30, 0x37	; 55
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <DIO_enumConnectPullup+0x128>
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	2a 95       	dec	r18
    2600:	e2 f7       	brpl	.-8      	; 0x25fa <DIO_enumConnectPullup+0x124>
    2602:	80 95       	com	r24
    2604:	84 23       	and	r24, r20
    2606:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    2608:	a8 e3       	ldi	r26, 0x38	; 56
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e8 e3       	ldi	r30, 0x38	; 56
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	48 2f       	mov	r20, r24
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	02 2e       	mov	r0, r18
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <DIO_enumConnectPullup+0x150>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	0a 94       	dec	r0
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <DIO_enumConnectPullup+0x14c>
    262a:	84 2b       	or	r24, r20
    262c:	8c 93       	st	X, r24
    262e:	a2 c0       	rjmp	.+324    	; 0x2774 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    2630:	a8 e3       	ldi	r26, 0x38	; 56
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e8 e3       	ldi	r30, 0x38	; 56
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	48 2f       	mov	r20, r24
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	02 2e       	mov	r0, r18
    2648:	02 c0       	rjmp	.+4      	; 0x264e <DIO_enumConnectPullup+0x178>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	0a 94       	dec	r0
    2650:	e2 f7       	brpl	.-8      	; 0x264a <DIO_enumConnectPullup+0x174>
    2652:	80 95       	com	r24
    2654:	84 23       	and	r24, r20
    2656:	8c 93       	st	X, r24
    2658:	8d c0       	rjmp	.+282    	; 0x2774 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	71 f5       	brne	.+92     	; 0x26bc <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    2660:	a0 e5       	ldi	r26, 0x50	; 80
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e0 e5       	ldi	r30, 0x50	; 80
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	8b 7f       	andi	r24, 0xFB	; 251
    266c:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    266e:	a4 e3       	ldi	r26, 0x34	; 52
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e4 e3       	ldi	r30, 0x34	; 52
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	48 2f       	mov	r20, r24
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_enumConnectPullup+0x1b4>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	2a 95       	dec	r18
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_enumConnectPullup+0x1b0>
    268e:	80 95       	com	r24
    2690:	84 23       	and	r24, r20
    2692:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    2694:	a5 e3       	ldi	r26, 0x35	; 53
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e5 e3       	ldi	r30, 0x35	; 53
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	48 2f       	mov	r20, r24
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	02 2e       	mov	r0, r18
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <DIO_enumConnectPullup+0x1dc>
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	0a 94       	dec	r0
    26b4:	e2 f7       	brpl	.-8      	; 0x26ae <DIO_enumConnectPullup+0x1d8>
    26b6:	84 2b       	or	r24, r20
    26b8:	8c 93       	st	X, r24
    26ba:	5c c0       	rjmp	.+184    	; 0x2774 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    26bc:	a5 e3       	ldi	r26, 0x35	; 53
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e5 e3       	ldi	r30, 0x35	; 53
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	48 2f       	mov	r20, r24
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	02 2e       	mov	r0, r18
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <DIO_enumConnectPullup+0x204>
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	0a 94       	dec	r0
    26dc:	e2 f7       	brpl	.-8      	; 0x26d6 <DIO_enumConnectPullup+0x200>
    26de:	80 95       	com	r24
    26e0:	84 23       	and	r24, r20
    26e2:	8c 93       	st	X, r24
    26e4:	47 c0       	rjmp	.+142    	; 0x2774 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    26e6:	8c 81       	ldd	r24, Y+4	; 0x04
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	71 f5       	brne	.+92     	; 0x2748 <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    26ec:	a0 e5       	ldi	r26, 0x50	; 80
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e0 e5       	ldi	r30, 0x50	; 80
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8b 7f       	andi	r24, 0xFB	; 251
    26f8:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    26fa:	a1 e3       	ldi	r26, 0x31	; 49
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e1 e3       	ldi	r30, 0x31	; 49
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	48 2f       	mov	r20, r24
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_enumConnectPullup+0x240>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	2a 95       	dec	r18
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <DIO_enumConnectPullup+0x23c>
    271a:	80 95       	com	r24
    271c:	84 23       	and	r24, r20
    271e:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    2720:	a2 e3       	ldi	r26, 0x32	; 50
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e2 e3       	ldi	r30, 0x32	; 50
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	48 2f       	mov	r20, r24
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	02 2e       	mov	r0, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <DIO_enumConnectPullup+0x268>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	0a 94       	dec	r0
    2740:	e2 f7       	brpl	.-8      	; 0x273a <DIO_enumConnectPullup+0x264>
    2742:	84 2b       	or	r24, r20
    2744:	8c 93       	st	X, r24
    2746:	16 c0       	rjmp	.+44     	; 0x2774 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    2748:	a2 e3       	ldi	r26, 0x32	; 50
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e2 e3       	ldi	r30, 0x32	; 50
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <DIO_enumConnectPullup+0x290>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <DIO_enumConnectPullup+0x28c>
    276a:	80 95       	com	r24
    276c:	84 23       	and	r24, r20
    276e:	8c 93       	st	X, r24
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    2772:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    2774:	89 81       	ldd	r24, Y+1	; 0x01


}
    2776:	26 96       	adiw	r28, 0x06	; 6
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <DIO_voidWriteHighNibbles>:




DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <DIO_voidWriteHighNibbles+0x6>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <DIO_voidWriteHighNibbles+0x8>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	8a 83       	std	Y+2, r24	; 0x02
    2798:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	84 30       	cpi	r24, 0x04	; 4
    27a2:	08 f0       	brcs	.+2      	; 0x27a6 <DIO_voidWriteHighNibbles+0x1e>
    27a4:	63 c0       	rjmp	.+198    	; 0x286c <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	82 95       	swap	r24
    27aa:	80 7f       	andi	r24, 0xF0	; 240
    27ac:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	3d 83       	std	Y+5, r19	; 0x05
    27b6:	2c 83       	std	Y+4, r18	; 0x04
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	91 05       	cpc	r25, r1
    27c0:	29 f1       	breq	.+74     	; 0x280c <DIO_voidWriteHighNibbles+0x84>
    27c2:	2c 81       	ldd	r18, Y+4	; 0x04
    27c4:	3d 81       	ldd	r19, Y+5	; 0x05
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <DIO_voidWriteHighNibbles+0x4e>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	9d 81       	ldd	r25, Y+5	; 0x05
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	61 f0       	breq	.+24     	; 0x27ec <DIO_voidWriteHighNibbles+0x64>
    27d4:	4c c0       	rjmp	.+152    	; 0x286e <DIO_voidWriteHighNibbles+0xe6>
    27d6:	2c 81       	ldd	r18, Y+4	; 0x04
    27d8:	3d 81       	ldd	r19, Y+5	; 0x05
    27da:	22 30       	cpi	r18, 0x02	; 2
    27dc:	31 05       	cpc	r19, r1
    27de:	31 f1       	breq	.+76     	; 0x282c <DIO_voidWriteHighNibbles+0xa4>
    27e0:	8c 81       	ldd	r24, Y+4	; 0x04
    27e2:	9d 81       	ldd	r25, Y+5	; 0x05
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	91 05       	cpc	r25, r1
    27e8:	89 f1       	breq	.+98     	; 0x284c <DIO_voidWriteHighNibbles+0xc4>
    27ea:	41 c0       	rjmp	.+130    	; 0x286e <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    27ec:	ab e3       	ldi	r26, 0x3B	; 59
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	eb e3       	ldi	r30, 0x3B	; 59
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 70       	andi	r24, 0x0F	; 15
    27f8:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    27fa:	ab e3       	ldi	r26, 0x3B	; 59
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	eb e3       	ldi	r30, 0x3B	; 59
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	90 81       	ld	r25, Z
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	89 2b       	or	r24, r25
    2808:	8c 93       	st	X, r24
    280a:	31 c0       	rjmp	.+98     	; 0x286e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    280c:	a8 e3       	ldi	r26, 0x38	; 56
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e8 e3       	ldi	r30, 0x38	; 56
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	8f 70       	andi	r24, 0x0F	; 15
    2818:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    281a:	a8 e3       	ldi	r26, 0x38	; 56
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e8 e3       	ldi	r30, 0x38	; 56
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	90 81       	ld	r25, Z
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	89 2b       	or	r24, r25
    2828:	8c 93       	st	X, r24
    282a:	21 c0       	rjmp	.+66     	; 0x286e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    282c:	a5 e3       	ldi	r26, 0x35	; 53
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e5 e3       	ldi	r30, 0x35	; 53
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8f 70       	andi	r24, 0x0F	; 15
    2838:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    283a:	a5 e3       	ldi	r26, 0x35	; 53
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e5 e3       	ldi	r30, 0x35	; 53
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	90 81       	ld	r25, Z
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	89 2b       	or	r24, r25
    2848:	8c 93       	st	X, r24
    284a:	11 c0       	rjmp	.+34     	; 0x286e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    284c:	a2 e3       	ldi	r26, 0x32	; 50
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e2 e3       	ldi	r30, 0x32	; 50
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	8f 70       	andi	r24, 0x0F	; 15
    2858:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    285a:	a2 e3       	ldi	r26, 0x32	; 50
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e2 e3       	ldi	r30, 0x32	; 50
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	90 81       	ld	r25, Z
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	89 2b       	or	r24, r25
    2868:	8c 93       	st	X, r24
    286a:	01 c0       	rjmp	.+2      	; 0x286e <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    286c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    286e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <DIO_enumSetPortDirection+0x6>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <DIO_enumSetPortDirection+0x8>
    2888:	0f 92       	push	r0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	8a 83       	std	Y+2, r24	; 0x02
    2890:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	84 30       	cpi	r24, 0x04	; 4
    289a:	a8 f5       	brcc	.+106    	; 0x2906 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	3d 83       	std	Y+5, r19	; 0x05
    28a4:	2c 83       	std	Y+4, r18	; 0x04
    28a6:	8c 81       	ldd	r24, Y+4	; 0x04
    28a8:	9d 81       	ldd	r25, Y+5	; 0x05
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	91 05       	cpc	r25, r1
    28ae:	d1 f0       	breq	.+52     	; 0x28e4 <DIO_enumSetPortDirection+0x64>
    28b0:	2c 81       	ldd	r18, Y+4	; 0x04
    28b2:	3d 81       	ldd	r19, Y+5	; 0x05
    28b4:	22 30       	cpi	r18, 0x02	; 2
    28b6:	31 05       	cpc	r19, r1
    28b8:	2c f4       	brge	.+10     	; 0x28c4 <DIO_enumSetPortDirection+0x44>
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	9d 81       	ldd	r25, Y+5	; 0x05
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	61 f0       	breq	.+24     	; 0x28da <DIO_enumSetPortDirection+0x5a>
    28c2:	1f c0       	rjmp	.+62     	; 0x2902 <DIO_enumSetPortDirection+0x82>
    28c4:	2c 81       	ldd	r18, Y+4	; 0x04
    28c6:	3d 81       	ldd	r19, Y+5	; 0x05
    28c8:	22 30       	cpi	r18, 0x02	; 2
    28ca:	31 05       	cpc	r19, r1
    28cc:	81 f0       	breq	.+32     	; 0x28ee <DIO_enumSetPortDirection+0x6e>
    28ce:	8c 81       	ldd	r24, Y+4	; 0x04
    28d0:	9d 81       	ldd	r25, Y+5	; 0x05
    28d2:	83 30       	cpi	r24, 0x03	; 3
    28d4:	91 05       	cpc	r25, r1
    28d6:	81 f0       	breq	.+32     	; 0x28f8 <DIO_enumSetPortDirection+0x78>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    28da:	ea e3       	ldi	r30, 0x3A	; 58
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	80 83       	st	Z, r24
    28e2:	12 c0       	rjmp	.+36     	; 0x2908 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    28e4:	e7 e3       	ldi	r30, 0x37	; 55
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	80 83       	st	Z, r24
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    28ee:	e4 e3       	ldi	r30, 0x34	; 52
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	80 83       	st	Z, r24
    28f6:	08 c0       	rjmp	.+16     	; 0x2908 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    28f8:	e1 e3       	ldi	r30, 0x31	; 49
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	80 83       	st	Z, r24
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    2902:	19 82       	std	Y+1, r1	; 0x01
    2904:	01 c0       	rjmp	.+2      	; 0x2908 <DIO_enumSetPortDirection+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2906:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
}
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	00 d0       	rcall	.+0      	; 0x2920 <DIO_enumSetPortValue+0x6>
    2920:	00 d0       	rcall	.+0      	; 0x2922 <DIO_enumSetPortValue+0x8>
    2922:	0f 92       	push	r0
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	8a 83       	std	Y+2, r24	; 0x02
    292a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	84 30       	cpi	r24, 0x04	; 4
    2934:	a8 f5       	brcc	.+106    	; 0x29a0 <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	3d 83       	std	Y+5, r19	; 0x05
    293e:	2c 83       	std	Y+4, r18	; 0x04
    2940:	8c 81       	ldd	r24, Y+4	; 0x04
    2942:	9d 81       	ldd	r25, Y+5	; 0x05
    2944:	81 30       	cpi	r24, 0x01	; 1
    2946:	91 05       	cpc	r25, r1
    2948:	d1 f0       	breq	.+52     	; 0x297e <DIO_enumSetPortValue+0x64>
    294a:	2c 81       	ldd	r18, Y+4	; 0x04
    294c:	3d 81       	ldd	r19, Y+5	; 0x05
    294e:	22 30       	cpi	r18, 0x02	; 2
    2950:	31 05       	cpc	r19, r1
    2952:	2c f4       	brge	.+10     	; 0x295e <DIO_enumSetPortValue+0x44>
    2954:	8c 81       	ldd	r24, Y+4	; 0x04
    2956:	9d 81       	ldd	r25, Y+5	; 0x05
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	61 f0       	breq	.+24     	; 0x2974 <DIO_enumSetPortValue+0x5a>
    295c:	1f c0       	rjmp	.+62     	; 0x299c <DIO_enumSetPortValue+0x82>
    295e:	2c 81       	ldd	r18, Y+4	; 0x04
    2960:	3d 81       	ldd	r19, Y+5	; 0x05
    2962:	22 30       	cpi	r18, 0x02	; 2
    2964:	31 05       	cpc	r19, r1
    2966:	81 f0       	breq	.+32     	; 0x2988 <DIO_enumSetPortValue+0x6e>
    2968:	8c 81       	ldd	r24, Y+4	; 0x04
    296a:	9d 81       	ldd	r25, Y+5	; 0x05
    296c:	83 30       	cpi	r24, 0x03	; 3
    296e:	91 05       	cpc	r25, r1
    2970:	81 f0       	breq	.+32     	; 0x2992 <DIO_enumSetPortValue+0x78>
    2972:	14 c0       	rjmp	.+40     	; 0x299c <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    2974:	eb e3       	ldi	r30, 0x3B	; 59
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	80 83       	st	Z, r24
    297c:	12 c0       	rjmp	.+36     	; 0x29a2 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    297e:	e8 e3       	ldi	r30, 0x38	; 56
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	80 83       	st	Z, r24
    2986:	0d c0       	rjmp	.+26     	; 0x29a2 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    2988:	e5 e3       	ldi	r30, 0x35	; 53
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	80 83       	st	Z, r24
    2990:	08 c0       	rjmp	.+16     	; 0x29a2 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    2992:	e2 e3       	ldi	r30, 0x32	; 50
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	80 83       	st	Z, r24
    299a:	03 c0       	rjmp	.+6      	; 0x29a2 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    299c:	19 82       	std	Y+1, r1	; 0x01
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <DIO_enumSetPortValue+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    29a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <__mulsi3>:
    29b4:	62 9f       	mul	r22, r18
    29b6:	d0 01       	movw	r26, r0
    29b8:	73 9f       	mul	r23, r19
    29ba:	f0 01       	movw	r30, r0
    29bc:	82 9f       	mul	r24, r18
    29be:	e0 0d       	add	r30, r0
    29c0:	f1 1d       	adc	r31, r1
    29c2:	64 9f       	mul	r22, r20
    29c4:	e0 0d       	add	r30, r0
    29c6:	f1 1d       	adc	r31, r1
    29c8:	92 9f       	mul	r25, r18
    29ca:	f0 0d       	add	r31, r0
    29cc:	83 9f       	mul	r24, r19
    29ce:	f0 0d       	add	r31, r0
    29d0:	74 9f       	mul	r23, r20
    29d2:	f0 0d       	add	r31, r0
    29d4:	65 9f       	mul	r22, r21
    29d6:	f0 0d       	add	r31, r0
    29d8:	99 27       	eor	r25, r25
    29da:	72 9f       	mul	r23, r18
    29dc:	b0 0d       	add	r27, r0
    29de:	e1 1d       	adc	r30, r1
    29e0:	f9 1f       	adc	r31, r25
    29e2:	63 9f       	mul	r22, r19
    29e4:	b0 0d       	add	r27, r0
    29e6:	e1 1d       	adc	r30, r1
    29e8:	f9 1f       	adc	r31, r25
    29ea:	bd 01       	movw	r22, r26
    29ec:	cf 01       	movw	r24, r30
    29ee:	11 24       	eor	r1, r1
    29f0:	08 95       	ret

000029f2 <__prologue_saves__>:
    29f2:	2f 92       	push	r2
    29f4:	3f 92       	push	r3
    29f6:	4f 92       	push	r4
    29f8:	5f 92       	push	r5
    29fa:	6f 92       	push	r6
    29fc:	7f 92       	push	r7
    29fe:	8f 92       	push	r8
    2a00:	9f 92       	push	r9
    2a02:	af 92       	push	r10
    2a04:	bf 92       	push	r11
    2a06:	cf 92       	push	r12
    2a08:	df 92       	push	r13
    2a0a:	ef 92       	push	r14
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	ca 1b       	sub	r28, r26
    2a1c:	db 0b       	sbc	r29, r27
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	09 94       	ijmp

00002a2a <__epilogue_restores__>:
    2a2a:	2a 88       	ldd	r2, Y+18	; 0x12
    2a2c:	39 88       	ldd	r3, Y+17	; 0x11
    2a2e:	48 88       	ldd	r4, Y+16	; 0x10
    2a30:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a32:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a34:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a36:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a38:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a3c:	b9 84       	ldd	r11, Y+9	; 0x09
    2a3e:	c8 84       	ldd	r12, Y+8	; 0x08
    2a40:	df 80       	ldd	r13, Y+7	; 0x07
    2a42:	ee 80       	ldd	r14, Y+6	; 0x06
    2a44:	fd 80       	ldd	r15, Y+5	; 0x05
    2a46:	0c 81       	ldd	r16, Y+4	; 0x04
    2a48:	1b 81       	ldd	r17, Y+3	; 0x03
    2a4a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a4c:	b9 81       	ldd	r27, Y+1	; 0x01
    2a4e:	ce 0f       	add	r28, r30
    2a50:	d1 1d       	adc	r29, r1
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	ed 01       	movw	r28, r26
    2a5e:	08 95       	ret

00002a60 <_exit>:
    2a60:	f8 94       	cli

00002a62 <__stop_program>:
    2a62:	ff cf       	rjmp	.-2      	; 0x2a62 <__stop_program>
