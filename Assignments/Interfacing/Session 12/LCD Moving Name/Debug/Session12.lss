
Session12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002798  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00002798  0000280c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000029f4  00000000  00000000  0000284c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001650  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000069d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000afdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e7       	ldi	r26, 0x7B	; 123
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e7       	ldi	r24, 0x7B	; 123
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:


#define DELAY_TIME	1000

int main()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
     b4a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LCD_voidInit>
	//LCD_voidSendString("MOSTAFA");


	while(1)
	{
		for(u8 i =1; i<=16; i++)
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8f 87       	std	Y+15, r24	; 0x0f
     b52:	85 c0       	rjmp	.+266    	; 0xc5e <main+0x128>
		{
			LCD_voidSetCursorPosition(1, i);
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	6f 85       	ldd	r22, Y+15	; 0x0f
     b58:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_voidSetCursorPosition>
			LCD_voidSendString("ABOSALAMA");
     b5c:	80 e6       	ldi	r24, 0x60	; 96
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 4e 0b 	call	0x169c	; 0x169c <LCD_voidSendString>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	aa e7       	ldi	r26, 0x7A	; 122
     b6a:	b4 e4       	ldi	r27, 0x44	; 68
     b6c:	8b 87       	std	Y+11, r24	; 0x0b
     b6e:	9c 87       	std	Y+12, r25	; 0x0c
     b70:	ad 87       	std	Y+13, r26	; 0x0d
     b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	6b 85       	ldd	r22, Y+11	; 0x0b
     b76:	7c 85       	ldd	r23, Y+12	; 0x0c
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a ef       	ldi	r20, 0xFA	; 250
     b82:	54 e4       	ldi	r21, 0x44	; 68
     b84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	8f 83       	std	Y+7, r24	; 0x07
     b8e:	98 87       	std	Y+8, r25	; 0x08
     b90:	a9 87       	std	Y+9, r26	; 0x09
     b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	2c f4       	brge	.+10     	; 0xbb6 <main+0x80>
		__ticks = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	8d 83       	std	Y+5, r24	; 0x05
     bb4:	3f c0       	rjmp	.+126    	; 0xc34 <main+0xfe>
	else if (__tmp > 65535)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bca:	18 16       	cp	r1, r24
     bcc:	4c f5       	brge	.+82     	; 0xc20 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <main+0xe0>
     bf8:	88 ec       	ldi	r24, 0xC8	; 200
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <main+0xce>
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <main+0xc2>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	78 85       	ldd	r23, Y+8	; 0x08
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <main+0x10a>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_voidSetCursorPosition(1, i);
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     c4c:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_voidSetCursorPosition>
			LCD_voidSendString("                "); // Assuming a 16-character wide display
     c50:	8a e6       	ldi	r24, 0x6A	; 106
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 4e 0b 	call	0x169c	; 0x169c <LCD_voidSendString>
	//LCD_voidSendString("MOSTAFA");


	while(1)
	{
		for(u8 i =1; i<=16; i++)
     c58:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	8f 87       	std	Y+15, r24	; 0x0f
     c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c60:	81 31       	cpi	r24, 0x11	; 17
     c62:	08 f4       	brcc	.+2      	; 0xc66 <main+0x130>
     c64:	77 cf       	rjmp	.-274    	; 0xb54 <main+0x1e>
     c66:	73 cf       	rjmp	.-282    	; 0xb4e <main+0x18>

00000c68 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

void KPD_voidInit(void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
	/* ROWS -> INT_PULLUP */
	DIO_enumSetPinDirection(KPD_PORT, KPD_R0, DIO_PIN_INPUT);
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R1, DIO_PIN_INPUT);
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R2, DIO_PIN_INPUT);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	62 e0       	ldi	r22, 0x02	; 2
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R3, DIO_PIN_INPUT);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	63 e0       	ldi	r22, 0x03	; 3
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	63 e0       	ldi	r22, 0x03	; 3
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	/* COLS -> OUTPUT, HIGH */
	DIO_enumSetPinDirection(KPD_PORT, KPD_C0, DIO_PIN_OUTPUT);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	64 e0       	ldi	r22, 0x04	; 4
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	64 e0       	ldi	r22, 0x04	; 4
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C1, DIO_PIN_OUTPUT);
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	65 e0       	ldi	r22, 0x05	; 5
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C2, DIO_PIN_OUTPUT);
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	66 e0       	ldi	r22, 0x06	; 6
     cec:	41 e0       	ldi	r20, 0x01	; 1
     cee:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	66 e0       	ldi	r22, 0x06	; 6
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C3, DIO_PIN_OUTPUT);
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	67 e0       	ldi	r22, 0x07	; 7
     d00:	41 e0       	ldi	r20, 0x01	; 1
     d02:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	
	
	
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <KPD_u8GetPressed>:

u8 KPD_u8GetPressed(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	a0 97       	sbiw	r28, 0x20	; 32
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8RetVal = NOT_PRESSED;
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	8d 8f       	std	Y+29, r24	; 0x1d
     d32:	27 c1       	rjmp	.+590    	; 0xf82 <KPD_u8GetPressed+0x26c>
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
     d3e:	1e 8e       	std	Y+30, r1	; 0x1e
     d40:	14 c1       	rjmp	.+552    	; 0xf6a <KPD_u8GetPressed+0x254>
		{
			DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
     d42:	9e 01       	movw	r18, r28
     d44:	20 5e       	subi	r18, 0xE0	; 224
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     d4c:	a9 01       	movw	r20, r18
     d4e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_enumGetPinValue>
			
			if(LOC_u8GetPressed == 0)
     d52:	88 a1       	ldd	r24, Y+32	; 0x20
     d54:	88 23       	and	r24, r24
     d56:	09 f0       	breq	.+2      	; 0xd5a <KPD_u8GetPressed+0x44>
     d58:	05 c1       	rjmp	.+522    	; 0xf64 <KPD_u8GetPressed+0x24e>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a8 e4       	ldi	r26, 0x48	; 72
     d60:	b2 e4       	ldi	r27, 0x42	; 66
     d62:	89 8f       	std	Y+25, r24	; 0x19
     d64:	9a 8f       	std	Y+26, r25	; 0x1a
     d66:	ab 8f       	std	Y+27, r26	; 0x1b
     d68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6a:	69 8d       	ldd	r22, Y+25	; 0x19
     d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	4a ef       	ldi	r20, 0xFA	; 250
     d78:	54 e4       	ldi	r21, 0x44	; 68
     d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	8d 8b       	std	Y+21, r24	; 0x15
     d84:	9e 8b       	std	Y+22, r25	; 0x16
     d86:	af 8b       	std	Y+23, r26	; 0x17
     d88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d8a:	6d 89       	ldd	r22, Y+21	; 0x15
     d8c:	7e 89       	ldd	r23, Y+22	; 0x16
     d8e:	8f 89       	ldd	r24, Y+23	; 0x17
     d90:	98 8d       	ldd	r25, Y+24	; 0x18
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d9e:	88 23       	and	r24, r24
     da0:	2c f4       	brge	.+10     	; 0xdac <KPD_u8GetPressed+0x96>
		__ticks = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9c 8b       	std	Y+20, r25	; 0x14
     da8:	8b 8b       	std	Y+19, r24	; 0x13
     daa:	3f c0       	rjmp	.+126    	; 0xe2a <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
     dac:	6d 89       	ldd	r22, Y+21	; 0x15
     dae:	7e 89       	ldd	r23, Y+22	; 0x16
     db0:	8f 89       	ldd	r24, Y+23	; 0x17
     db2:	98 8d       	ldd	r25, Y+24	; 0x18
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	3f ef       	ldi	r19, 0xFF	; 255
     db8:	4f e7       	ldi	r20, 0x7F	; 127
     dba:	57 e4       	ldi	r21, 0x47	; 71
     dbc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dc0:	18 16       	cp	r1, r24
     dc2:	4c f5       	brge	.+82     	; 0xe16 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc4:	69 8d       	ldd	r22, Y+25	; 0x19
     dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e2       	ldi	r20, 0x20	; 32
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
     dec:	0f c0       	rjmp	.+30     	; 0xe0c <KPD_u8GetPressed+0xf6>
     dee:	88 ec       	ldi	r24, 0xC8	; 200
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9a 8b       	std	Y+18, r25	; 0x12
     df4:	89 8b       	std	Y+17, r24	; 0x11
     df6:	89 89       	ldd	r24, Y+17	; 0x11
     df8:	9a 89       	ldd	r25, Y+18	; 0x12
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <KPD_u8GetPressed+0xe4>
     dfe:	9a 8b       	std	Y+18, r25	; 0x12
     e00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e02:	8b 89       	ldd	r24, Y+19	; 0x13
     e04:	9c 89       	ldd	r25, Y+20	; 0x14
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	9c 8b       	std	Y+20, r25	; 0x14
     e0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0c:	8b 89       	ldd	r24, Y+19	; 0x13
     e0e:	9c 89       	ldd	r25, Y+20	; 0x14
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	69 f7       	brne	.-38     	; 0xdee <KPD_u8GetPressed+0xd8>
     e14:	14 c0       	rjmp	.+40     	; 0xe3e <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e16:	6d 89       	ldd	r22, Y+21	; 0x15
     e18:	7e 89       	ldd	r23, Y+22	; 0x16
     e1a:	8f 89       	ldd	r24, Y+23	; 0x17
     e1c:	98 8d       	ldd	r25, Y+24	; 0x18
     e1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	9c 8b       	std	Y+20, r25	; 0x14
     e28:	8b 8b       	std	Y+19, r24	; 0x13
     e2a:	8b 89       	ldd	r24, Y+19	; 0x13
     e2c:	9c 89       	ldd	r25, Y+20	; 0x14
     e2e:	98 8b       	std	Y+16, r25	; 0x10
     e30:	8f 87       	std	Y+15, r24	; 0x0f
     e32:	8f 85       	ldd	r24, Y+15	; 0x0f
     e34:	98 89       	ldd	r25, Y+16	; 0x10
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <KPD_u8GetPressed+0x120>
     e3a:	98 8b       	std	Y+16, r25	; 0x10
     e3c:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50); // bouncing
				DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
     e3e:	9e 01       	movw	r18, r28
     e40:	20 5e       	subi	r18, 0xE0	; 224
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e48:	a9 01       	movw	r20, r18
     e4a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_enumGetPinValue>
				
				if(LOC_u8GetPressed == 0)
     e4e:	88 a1       	ldd	r24, Y+32	; 0x20
     e50:	88 23       	and	r24, r24
     e52:	a9 f4       	brne	.+42     	; 0xe7e <KPD_u8GetPressed+0x168>
				{
					LOC_u8RetVal = KPD_u8Buttons[LOC_u8ROW_Iterator - KPD_ROW_INIT][LOC_u8COL_Iterator - KPD_COL_INIT];
     e54:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e56:	48 2f       	mov	r20, r24
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9c 01       	movw	r18, r24
     e62:	24 50       	subi	r18, 0x04	; 4
     e64:	30 40       	sbci	r19, 0x00	; 0
     e66:	ca 01       	movw	r24, r20
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	fc 01       	movw	r30, r24
     e76:	ed 57       	subi	r30, 0x7D	; 125
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 8f       	std	Y+31, r24	; 0x1f
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a8 e4       	ldi	r26, 0x48	; 72
     e84:	b3 e4       	ldi	r27, 0x43	; 67
     e86:	8b 87       	std	Y+11, r24	; 0x0b
     e88:	9c 87       	std	Y+12, r25	; 0x0c
     e8a:	ad 87       	std	Y+13, r26	; 0x0d
     e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	4a ef       	ldi	r20, 0xFA	; 250
     e9c:	54 e4       	ldi	r21, 0x44	; 68
     e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	a9 87       	std	Y+9, r26	; 0x09
     eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eae:	6f 81       	ldd	r22, Y+7	; 0x07
     eb0:	78 85       	ldd	r23, Y+8	; 0x08
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	2c f4       	brge	.+10     	; 0xed0 <KPD_u8GetPressed+0x1ba>
		__ticks = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	3f c0       	rjmp	.+126    	; 0xf4e <KPD_u8GetPressed+0x238>
	else if (__tmp > 65535)
     ed0:	6f 81       	ldd	r22, Y+7	; 0x07
     ed2:	78 85       	ldd	r23, Y+8	; 0x08
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	4c f5       	brge	.+82     	; 0xf3a <KPD_u8GetPressed+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eea:	7c 85       	ldd	r23, Y+12	; 0x0c
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e2       	ldi	r20, 0x20	; 32
     ef6:	51 e4       	ldi	r21, 0x41	; 65
     ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <KPD_u8GetPressed+0x21a>
     f12:	88 ec       	ldi	r24, 0xC8	; 200
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <KPD_u8GetPressed+0x208>
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	69 f7       	brne	.-38     	; 0xf12 <KPD_u8GetPressed+0x1fc>
     f38:	1c c0       	rjmp	.+56     	; 0xf72 <KPD_u8GetPressed+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9e 83       	std	Y+6, r25	; 0x06
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <KPD_u8GetPressed+0x244>
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <KPD_u8GetPressed+0x25c>
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
     f64:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	8e 8f       	std	Y+30, r24	; 0x1e
     f6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <KPD_u8GetPressed+0x25c>
     f70:	e8 ce       	rjmp	.-560    	; 0xd42 <KPD_u8GetPressed+0x2c>
				_delay_ms(200); // if continuous pressing
				break;
			}
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
     f7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	8d 8f       	std	Y+29, r24	; 0x1d
     f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f84:	87 30       	cpi	r24, 0x07	; 7
     f86:	08 f4       	brcc	.+2      	; 0xf8a <KPD_u8GetPressed+0x274>
     f88:	d5 ce       	rjmp	.-598    	; 0xd34 <KPD_u8GetPressed+0x1e>
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
	}
	
	return LOC_u8RetVal;
     f8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
     f8c:	a0 96       	adiw	r28, 0x20	; 32
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "util/delay.h"

void LCD_voidInit()
{
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	c4 55       	subi	r28, 0x54	; 84
     fac:	d0 40       	sbci	r29, 0x00	; 0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(LCD_CTRL_PORT, DIO_PORT_OUTPUT);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	6f ef       	ldi	r22, 0xFF	; 255
     fbc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <DIO_enumSetPortDirection>
	DIO_enumSetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	6f ef       	ldi	r22, 0xFF	; 255
     fc4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <DIO_enumSetPortDirection>
     fc8:	fe 01       	movw	r30, r28
     fca:	ef 5a       	subi	r30, 0xAF	; 175
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 ef       	ldi	r26, 0xF0	; 240
     fd4:	b1 e4       	ldi	r27, 0x41	; 65
     fd6:	80 83       	st	Z, r24
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	a2 83       	std	Z+2, r26	; 0x02
     fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	8e 01       	movw	r16, r28
     fe0:	03 5b       	subi	r16, 0xB3	; 179
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	fe 01       	movw	r30, r28
     fe6:	ef 5a       	subi	r30, 0xAF	; 175
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a ef       	ldi	r20, 0xFA	; 250
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	f8 01       	movw	r30, r16
    1004:	80 83       	st	Z, r24
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	a2 83       	std	Z+2, r26	; 0x02
    100a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    100c:	fe 01       	movw	r30, r28
    100e:	e3 5b       	subi	r30, 0xB3	; 179
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	44 f4       	brge	.+16     	; 0x103a <LCD_voidInit+0x9c>
		__ticks = 1;
    102a:	fe 01       	movw	r30, r28
    102c:	e5 5b       	subi	r30, 0xB5	; 181
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
    1038:	64 c0       	rjmp	.+200    	; 0x1102 <LCD_voidInit+0x164>
	else if (__tmp > 65535)
    103a:	fe 01       	movw	r30, r28
    103c:	e3 5b       	subi	r30, 0xB3	; 179
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	0c f0       	brlt	.+2      	; 0x105a <LCD_voidInit+0xbc>
    1058:	43 c0       	rjmp	.+134    	; 0x10e0 <LCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105a:	fe 01       	movw	r30, r28
    105c:	ef 5a       	subi	r30, 0xAF	; 175
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8e 01       	movw	r16, r28
    107a:	05 5b       	subi	r16, 0xB5	; 181
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	f8 01       	movw	r30, r16
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
    1090:	1f c0       	rjmp	.+62     	; 0x10d0 <LCD_voidInit+0x132>
    1092:	fe 01       	movw	r30, r28
    1094:	e7 5b       	subi	r30, 0xB7	; 183
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	88 ec       	ldi	r24, 0xC8	; 200
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	fe 01       	movw	r30, r28
    10a2:	e7 5b       	subi	r30, 0xB7	; 183
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <LCD_voidInit+0x10c>
    10ae:	fe 01       	movw	r30, r28
    10b0:	e7 5b       	subi	r30, 0xB7	; 183
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b8:	de 01       	movw	r26, r28
    10ba:	a5 5b       	subi	r26, 0xB5	; 181
    10bc:	bf 4f       	sbci	r27, 0xFF	; 255
    10be:	fe 01       	movw	r30, r28
    10c0:	e5 5b       	subi	r30, 0xB5	; 181
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	11 96       	adiw	r26, 0x01	; 1
    10cc:	9c 93       	st	X, r25
    10ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	fe 01       	movw	r30, r28
    10d2:	e5 5b       	subi	r30, 0xB5	; 181
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	d1 f6       	brne	.-76     	; 0x1092 <LCD_voidInit+0xf4>
    10de:	27 c0       	rjmp	.+78     	; 0x112e <LCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e0:	8e 01       	movw	r16, r28
    10e2:	05 5b       	subi	r16, 0xB5	; 181
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	fe 01       	movw	r30, r28
    10e8:	e3 5b       	subi	r30, 0xB3	; 179
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	f8 01       	movw	r30, r16
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	de 01       	movw	r26, r28
    1104:	a9 5b       	subi	r26, 0xB9	; 185
    1106:	bf 4f       	sbci	r27, 0xFF	; 255
    1108:	fe 01       	movw	r30, r28
    110a:	e5 5b       	subi	r30, 0xB5	; 181
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	8d 93       	st	X+, r24
    1114:	9c 93       	st	X, r25
    1116:	fe 01       	movw	r30, r28
    1118:	e9 5b       	subi	r30, 0xB9	; 185
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <LCD_voidInit+0x182>
    1124:	fe 01       	movw	r30, r28
    1126:	e9 5b       	subi	r30, 0xB9	; 185
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
	//DIO_enumSetPortValue(LCD_CTRL_PORT, DIO_PORT_HIGH);
	_delay_ms(30);

	LCD_voidSendCommand(LCD_HOME);
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <LCD_voidSendCommand>
    1134:	fe 01       	movw	r30, r28
    1136:	ed 5b       	subi	r30, 0xBD	; 189
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e8       	ldi	r26, 0x80	; 128
    1140:	bf e3       	ldi	r27, 0x3F	; 63
    1142:	80 83       	st	Z, r24
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	a2 83       	std	Z+2, r26	; 0x02
    1148:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114a:	8e 01       	movw	r16, r28
    114c:	01 5c       	subi	r16, 0xC1	; 193
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	fe 01       	movw	r30, r28
    1152:	ed 5b       	subi	r30, 0xBD	; 189
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	60 81       	ld	r22, Z
    1158:	71 81       	ldd	r23, Z+1	; 0x01
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	93 81       	ldd	r25, Z+3	; 0x03
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	4a ef       	ldi	r20, 0xFA	; 250
    1164:	54 e4       	ldi	r21, 0x44	; 68
    1166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	f8 01       	movw	r30, r16
    1170:	80 83       	st	Z, r24
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	a2 83       	std	Z+2, r26	; 0x02
    1176:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1178:	fe 01       	movw	r30, r28
    117a:	ff 96       	adiw	r30, 0x3f	; 63
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1190:	88 23       	and	r24, r24
    1192:	2c f4       	brge	.+10     	; 0x119e <LCD_voidInit+0x200>
		__ticks = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e af       	std	Y+62, r25	; 0x3e
    119a:	8d af       	std	Y+61, r24	; 0x3d
    119c:	46 c0       	rjmp	.+140    	; 0x122a <LCD_voidInit+0x28c>
	else if (__tmp > 65535)
    119e:	fe 01       	movw	r30, r28
    11a0:	ff 96       	adiw	r30, 0x3f	; 63
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
    11ae:	4f e7       	ldi	r20, 0x7F	; 127
    11b0:	57 e4       	ldi	r21, 0x47	; 71
    11b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11b6:	18 16       	cp	r1, r24
    11b8:	64 f5       	brge	.+88     	; 0x1212 <LCD_voidInit+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ba:	fe 01       	movw	r30, r28
    11bc:	ed 5b       	subi	r30, 0xBD	; 189
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e2       	ldi	r20, 0x20	; 32
    11ce:	51 e4       	ldi	r21, 0x41	; 65
    11d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	9e af       	std	Y+62, r25	; 0x3e
    11e6:	8d af       	std	Y+61, r24	; 0x3d
    11e8:	0f c0       	rjmp	.+30     	; 0x1208 <LCD_voidInit+0x26a>
    11ea:	88 ec       	ldi	r24, 0xC8	; 200
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	9c af       	std	Y+60, r25	; 0x3c
    11f0:	8b af       	std	Y+59, r24	; 0x3b
    11f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    11f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <LCD_voidInit+0x258>
    11fa:	9c af       	std	Y+60, r25	; 0x3c
    11fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1200:	9e ad       	ldd	r25, Y+62	; 0x3e
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	9e af       	std	Y+62, r25	; 0x3e
    1206:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1208:	8d ad       	ldd	r24, Y+61	; 0x3d
    120a:	9e ad       	ldd	r25, Y+62	; 0x3e
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	69 f7       	brne	.-38     	; 0x11ea <LCD_voidInit+0x24c>
    1210:	16 c0       	rjmp	.+44     	; 0x123e <LCD_voidInit+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1212:	fe 01       	movw	r30, r28
    1214:	ff 96       	adiw	r30, 0x3f	; 63
    1216:	60 81       	ld	r22, Z
    1218:	71 81       	ldd	r23, Z+1	; 0x01
    121a:	82 81       	ldd	r24, Z+2	; 0x02
    121c:	93 81       	ldd	r25, Z+3	; 0x03
    121e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9e af       	std	Y+62, r25	; 0x3e
    1228:	8d af       	std	Y+61, r24	; 0x3d
    122a:	8d ad       	ldd	r24, Y+61	; 0x3d
    122c:	9e ad       	ldd	r25, Y+62	; 0x3e
    122e:	9a af       	std	Y+58, r25	; 0x3a
    1230:	89 af       	std	Y+57, r24	; 0x39
    1232:	89 ad       	ldd	r24, Y+57	; 0x39
    1234:	9a ad       	ldd	r25, Y+58	; 0x3a
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <LCD_voidInit+0x298>
    123a:	9a af       	std	Y+58, r25	; 0x3a
    123c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	LCD_voidSendCommand(0X38);
    123e:	88 e3       	ldi	r24, 0x38	; 56
    1240:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <LCD_voidSendCommand>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a0 e8       	ldi	r26, 0x80	; 128
    124a:	bf e3       	ldi	r27, 0x3F	; 63
    124c:	8d ab       	std	Y+53, r24	; 0x35
    124e:	9e ab       	std	Y+54, r25	; 0x36
    1250:	af ab       	std	Y+55, r26	; 0x37
    1252:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1254:	6d a9       	ldd	r22, Y+53	; 0x35
    1256:	7e a9       	ldd	r23, Y+54	; 0x36
    1258:	8f a9       	ldd	r24, Y+55	; 0x37
    125a:	98 ad       	ldd	r25, Y+56	; 0x38
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a ef       	ldi	r20, 0xFA	; 250
    1262:	54 e4       	ldi	r21, 0x44	; 68
    1264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	89 ab       	std	Y+49, r24	; 0x31
    126e:	9a ab       	std	Y+50, r25	; 0x32
    1270:	ab ab       	std	Y+51, r26	; 0x33
    1272:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1274:	69 a9       	ldd	r22, Y+49	; 0x31
    1276:	7a a9       	ldd	r23, Y+50	; 0x32
    1278:	8b a9       	ldd	r24, Y+51	; 0x33
    127a:	9c a9       	ldd	r25, Y+52	; 0x34
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1288:	88 23       	and	r24, r24
    128a:	2c f4       	brge	.+10     	; 0x1296 <LCD_voidInit+0x2f8>
		__ticks = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	98 ab       	std	Y+48, r25	; 0x30
    1292:	8f a7       	std	Y+47, r24	; 0x2f
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <LCD_voidInit+0x376>
	else if (__tmp > 65535)
    1296:	69 a9       	ldd	r22, Y+49	; 0x31
    1298:	7a a9       	ldd	r23, Y+50	; 0x32
    129a:	8b a9       	ldd	r24, Y+51	; 0x33
    129c:	9c a9       	ldd	r25, Y+52	; 0x34
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	4c f5       	brge	.+82     	; 0x1300 <LCD_voidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	6d a9       	ldd	r22, Y+53	; 0x35
    12b0:	7e a9       	ldd	r23, Y+54	; 0x36
    12b2:	8f a9       	ldd	r24, Y+55	; 0x37
    12b4:	98 ad       	ldd	r25, Y+56	; 0x38
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	98 ab       	std	Y+48, r25	; 0x30
    12d4:	8f a7       	std	Y+47, r24	; 0x2f
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <LCD_voidInit+0x358>
    12d8:	88 ec       	ldi	r24, 0xC8	; 200
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9e a7       	std	Y+46, r25	; 0x2e
    12de:	8d a7       	std	Y+45, r24	; 0x2d
    12e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    12e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <LCD_voidInit+0x346>
    12e8:	9e a7       	std	Y+46, r25	; 0x2e
    12ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ee:	98 a9       	ldd	r25, Y+48	; 0x30
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	98 ab       	std	Y+48, r25	; 0x30
    12f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f8:	98 a9       	ldd	r25, Y+48	; 0x30
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <LCD_voidInit+0x33a>
    12fe:	14 c0       	rjmp	.+40     	; 0x1328 <LCD_voidInit+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1300:	69 a9       	ldd	r22, Y+49	; 0x31
    1302:	7a a9       	ldd	r23, Y+50	; 0x32
    1304:	8b a9       	ldd	r24, Y+51	; 0x33
    1306:	9c a9       	ldd	r25, Y+52	; 0x34
    1308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	98 ab       	std	Y+48, r25	; 0x30
    1312:	8f a7       	std	Y+47, r24	; 0x2f
    1314:	8f a5       	ldd	r24, Y+47	; 0x2f
    1316:	98 a9       	ldd	r25, Y+48	; 0x30
    1318:	9c a7       	std	Y+44, r25	; 0x2c
    131a:	8b a7       	std	Y+43, r24	; 0x2b
    131c:	8b a5       	ldd	r24, Y+43	; 0x2b
    131e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <LCD_voidInit+0x382>
    1324:	9c a7       	std	Y+44, r25	; 0x2c
    1326:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1328:	8c e0       	ldi	r24, 0x0C	; 12
    132a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <LCD_voidSendCommand>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a0 e8       	ldi	r26, 0x80	; 128
    1334:	bf e3       	ldi	r27, 0x3F	; 63
    1336:	8f a3       	std	Y+39, r24	; 0x27
    1338:	98 a7       	std	Y+40, r25	; 0x28
    133a:	a9 a7       	std	Y+41, r26	; 0x29
    133c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133e:	6f a1       	ldd	r22, Y+39	; 0x27
    1340:	78 a5       	ldd	r23, Y+40	; 0x28
    1342:	89 a5       	ldd	r24, Y+41	; 0x29
    1344:	9a a5       	ldd	r25, Y+42	; 0x2a
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4a ef       	ldi	r20, 0xFA	; 250
    134c:	54 e4       	ldi	r21, 0x44	; 68
    134e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	8b a3       	std	Y+35, r24	; 0x23
    1358:	9c a3       	std	Y+36, r25	; 0x24
    135a:	ad a3       	std	Y+37, r26	; 0x25
    135c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    135e:	6b a1       	ldd	r22, Y+35	; 0x23
    1360:	7c a1       	ldd	r23, Y+36	; 0x24
    1362:	8d a1       	ldd	r24, Y+37	; 0x25
    1364:	9e a1       	ldd	r25, Y+38	; 0x26
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	2c f4       	brge	.+10     	; 0x1380 <LCD_voidInit+0x3e2>
		__ticks = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9a a3       	std	Y+34, r25	; 0x22
    137c:	89 a3       	std	Y+33, r24	; 0x21
    137e:	3f c0       	rjmp	.+126    	; 0x13fe <LCD_voidInit+0x460>
	else if (__tmp > 65535)
    1380:	6b a1       	ldd	r22, Y+35	; 0x23
    1382:	7c a1       	ldd	r23, Y+36	; 0x24
    1384:	8d a1       	ldd	r24, Y+37	; 0x25
    1386:	9e a1       	ldd	r25, Y+38	; 0x26
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	57 e4       	ldi	r21, 0x47	; 71
    1390:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1394:	18 16       	cp	r1, r24
    1396:	4c f5       	brge	.+82     	; 0x13ea <LCD_voidInit+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	6f a1       	ldd	r22, Y+39	; 0x27
    139a:	78 a5       	ldd	r23, Y+40	; 0x28
    139c:	89 a5       	ldd	r24, Y+41	; 0x29
    139e:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9a a3       	std	Y+34, r25	; 0x22
    13be:	89 a3       	std	Y+33, r24	; 0x21
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <LCD_voidInit+0x442>
    13c2:	88 ec       	ldi	r24, 0xC8	; 200
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	98 a3       	std	Y+32, r25	; 0x20
    13c8:	8f 8f       	std	Y+31, r24	; 0x1f
    13ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13cc:	98 a1       	ldd	r25, Y+32	; 0x20
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <LCD_voidInit+0x430>
    13d2:	98 a3       	std	Y+32, r25	; 0x20
    13d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	89 a1       	ldd	r24, Y+33	; 0x21
    13d8:	9a a1       	ldd	r25, Y+34	; 0x22
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	9a a3       	std	Y+34, r25	; 0x22
    13de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	89 a1       	ldd	r24, Y+33	; 0x21
    13e2:	9a a1       	ldd	r25, Y+34	; 0x22
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f7       	brne	.-38     	; 0x13c2 <LCD_voidInit+0x424>
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <LCD_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ea:	6b a1       	ldd	r22, Y+35	; 0x23
    13ec:	7c a1       	ldd	r23, Y+36	; 0x24
    13ee:	8d a1       	ldd	r24, Y+37	; 0x25
    13f0:	9e a1       	ldd	r25, Y+38	; 0x26
    13f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	9a a3       	std	Y+34, r25	; 0x22
    13fc:	89 a3       	std	Y+33, r24	; 0x21
    13fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1400:	9a a1       	ldd	r25, Y+34	; 0x22
    1402:	9e 8f       	std	Y+30, r25	; 0x1e
    1404:	8d 8f       	std	Y+29, r24	; 0x1d
    1406:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1408:	9e 8d       	ldd	r25, Y+30	; 0x1e
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <LCD_voidInit+0x46c>
    140e:	9e 8f       	std	Y+30, r25	; 0x1e
    1410:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidSendCommand(LCD_CLEAR);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <LCD_voidSendCommand>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a0 e0       	ldi	r26, 0x00	; 0
    141e:	b0 e4       	ldi	r27, 0x40	; 64
    1420:	89 8f       	std	Y+25, r24	; 0x19
    1422:	9a 8f       	std	Y+26, r25	; 0x1a
    1424:	ab 8f       	std	Y+27, r26	; 0x1b
    1426:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1428:	69 8d       	ldd	r22, Y+25	; 0x19
    142a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    142c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    142e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4a ef       	ldi	r20, 0xFA	; 250
    1436:	54 e4       	ldi	r21, 0x44	; 68
    1438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	8d 8b       	std	Y+21, r24	; 0x15
    1442:	9e 8b       	std	Y+22, r25	; 0x16
    1444:	af 8b       	std	Y+23, r26	; 0x17
    1446:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1448:	6d 89       	ldd	r22, Y+21	; 0x15
    144a:	7e 89       	ldd	r23, Y+22	; 0x16
    144c:	8f 89       	ldd	r24, Y+23	; 0x17
    144e:	98 8d       	ldd	r25, Y+24	; 0x18
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    145c:	88 23       	and	r24, r24
    145e:	2c f4       	brge	.+10     	; 0x146a <LCD_voidInit+0x4cc>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9c 8b       	std	Y+20, r25	; 0x14
    1466:	8b 8b       	std	Y+19, r24	; 0x13
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <LCD_voidInit+0x54a>
	else if (__tmp > 65535)
    146a:	6d 89       	ldd	r22, Y+21	; 0x15
    146c:	7e 89       	ldd	r23, Y+22	; 0x16
    146e:	8f 89       	ldd	r24, Y+23	; 0x17
    1470:	98 8d       	ldd	r25, Y+24	; 0x18
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	57 e4       	ldi	r21, 0x47	; 71
    147a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    147e:	18 16       	cp	r1, r24
    1480:	4c f5       	brge	.+82     	; 0x14d4 <LCD_voidInit+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	69 8d       	ldd	r22, Y+25	; 0x19
    1484:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1486:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1488:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9c 8b       	std	Y+20, r25	; 0x14
    14a8:	8b 8b       	std	Y+19, r24	; 0x13
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <LCD_voidInit+0x52c>
    14ac:	88 ec       	ldi	r24, 0xC8	; 200
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9a 8b       	std	Y+18, r25	; 0x12
    14b2:	89 8b       	std	Y+17, r24	; 0x11
    14b4:	89 89       	ldd	r24, Y+17	; 0x11
    14b6:	9a 89       	ldd	r25, Y+18	; 0x12
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <LCD_voidInit+0x51a>
    14bc:	9a 8b       	std	Y+18, r25	; 0x12
    14be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	8b 89       	ldd	r24, Y+19	; 0x13
    14c2:	9c 89       	ldd	r25, Y+20	; 0x14
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	9c 8b       	std	Y+20, r25	; 0x14
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <LCD_voidInit+0x50e>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <LCD_voidInit+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	6d 89       	ldd	r22, Y+21	; 0x15
    14d6:	7e 89       	ldd	r23, Y+22	; 0x16
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9c 8b       	std	Y+20, r25	; 0x14
    14e6:	8b 8b       	std	Y+19, r24	; 0x13
    14e8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ea:	9c 89       	ldd	r25, Y+20	; 0x14
    14ec:	98 8b       	std	Y+16, r25	; 0x10
    14ee:	8f 87       	std	Y+15, r24	; 0x0f
    14f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f2:	98 89       	ldd	r25, Y+16	; 0x10
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <LCD_voidInit+0x556>
    14f8:	98 8b       	std	Y+16, r25	; 0x10
    14fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidSendCommand(LCD_ENTRY_MODE);
    14fc:	86 e0       	ldi	r24, 0x06	; 6
    14fe:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <LCD_voidSendCommand>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e8       	ldi	r26, 0x80	; 128
    1508:	bf e3       	ldi	r27, 0x3F	; 63
    150a:	8b 87       	std	Y+11, r24	; 0x0b
    150c:	9c 87       	std	Y+12, r25	; 0x0c
    150e:	ad 87       	std	Y+13, r26	; 0x0d
    1510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	4a ef       	ldi	r20, 0xFA	; 250
    1520:	54 e4       	ldi	r21, 0x44	; 68
    1522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8f 83       	std	Y+7, r24	; 0x07
    152c:	98 87       	std	Y+8, r25	; 0x08
    152e:	a9 87       	std	Y+9, r26	; 0x09
    1530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1532:	6f 81       	ldd	r22, Y+7	; 0x07
    1534:	78 85       	ldd	r23, Y+8	; 0x08
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	2c f4       	brge	.+10     	; 0x1554 <LCD_voidInit+0x5b6>
		__ticks = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <LCD_voidInit+0x634>
	else if (__tmp > 65535)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	57 e4       	ldi	r21, 0x47	; 71
    1564:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	4c f5       	brge	.+82     	; 0x15be <LCD_voidInit+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156c:	6b 85       	ldd	r22, Y+11	; 0x0b
    156e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1570:	8d 85       	ldd	r24, Y+13	; 0x0d
    1572:	9e 85       	ldd	r25, Y+14	; 0x0e
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <LCD_voidInit+0x616>
    1596:	88 ec       	ldi	r24, 0xC8	; 200
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <LCD_voidInit+0x604>
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f7       	brne	.-38     	; 0x1596 <LCD_voidInit+0x5f8>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <LCD_voidInit+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_voidInit+0x640>
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    15e6:	cc 5a       	subi	r28, 0xAC	; 172
    15e8:	df 4f       	sbci	r29, 0xFF	; 255
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

000015fe <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortValue(LCD_DATA_PORT, command);
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	69 81       	ldd	r22, Y+1	; 0x01
    160e:	0e 94 46 13 	call	0x268c	; 0x268c <DIO_enumSetPortValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_LOW);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>

	//Send Pulse
	LCD_voidSendPulse();
    1626:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_voidSendPulse>
}
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_HIGH);
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	DIO_enumSetPortValue(LCD_DATA_PORT, data);
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	69 81       	ldd	r22, Y+1	; 0x01
    1656:	0e 94 46 13 	call	0x268c	; 0x268c <DIO_enumSetPortValue>

	//Send Pulse
	LCD_voidSendPulse();
    165a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_voidSendPulse>
}
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <LCD_voidSetCursorPosition>:

void LCD_voidSetCursorPosition(u8 row, u8 col)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <LCD_voidSetCursorPosition+0x6>
    166c:	0f 92       	push	r0
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	6b 83       	std	Y+3, r22	; 0x03
	u8 pos;
	if(row == 1)
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	21 f4       	brne	.+8      	; 0x1684 <LCD_voidSetCursorPosition+0x1e>
		pos = LCD_CURSOR + (col - 1);
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 58       	subi	r24, 0x81	; 129
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	03 c0       	rjmp	.+6      	; 0x168a <LCD_voidSetCursorPosition+0x24>
	else
		pos = LCD_CURSOR + (col - 1) + 64;
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	81 54       	subi	r24, 0x41	; 65
    1688:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(pos);
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <LCD_voidSendCommand>
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <LCD_voidSendString>:

void LCD_voidSendString(u8* str)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <LCD_voidSendString+0x6>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	9b 83       	std	Y+3, r25	; 0x03
    16aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 ptr = 0;
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	0e c0       	rjmp	.+28     	; 0x16cc <LCD_voidSendString+0x30>
	while(str[ptr] != '\0')
	{
		LCD_voidSendData(str[ptr]);
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	fc 01       	movw	r30, r24
    16bc:	e2 0f       	add	r30, r18
    16be:	f3 1f       	adc	r31, r19
    16c0:	80 81       	ld	r24, Z
    16c2:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_voidSendData>
		ptr++;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	8f 5f       	subi	r24, 0xFF	; 255
    16ca:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8* str)
{
	u8 ptr = 0;
	while(str[ptr] != '\0')
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	9b 81       	ldd	r25, Y+3	; 0x03
    16d6:	fc 01       	movw	r30, r24
    16d8:	e2 0f       	add	r30, r18
    16da:	f3 1f       	adc	r31, r19
    16dc:	80 81       	ld	r24, Z
    16de:	88 23       	and	r24, r24
    16e0:	39 f7       	brne	.-50     	; 0x16b0 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[ptr]);
		ptr++;
	}
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <LCD_voidSendPulse>:
static void LCD_voidSendPulse()
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	2e 97       	sbiw	r28, 0x0e	; 14
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_HIGH);
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	62 e0       	ldi	r22, 0x02	; 2
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a0 e8       	ldi	r26, 0x80	; 128
    1712:	bf e3       	ldi	r27, 0x3F	; 63
    1714:	8b 87       	std	Y+11, r24	; 0x0b
    1716:	9c 87       	std	Y+12, r25	; 0x0c
    1718:	ad 87       	std	Y+13, r26	; 0x0d
    171a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171c:	6b 85       	ldd	r22, Y+11	; 0x0b
    171e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a ef       	ldi	r20, 0xFA	; 250
    172a:	54 e4       	ldi	r21, 0x44	; 68
    172c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8f 83       	std	Y+7, r24	; 0x07
    1736:	98 87       	std	Y+8, r25	; 0x08
    1738:	a9 87       	std	Y+9, r26	; 0x09
    173a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <LCD_voidSendPulse+0x70>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	3f c0       	rjmp	.+126    	; 0x17dc <LCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1772:	18 16       	cp	r1, r24
    1774:	4c f5       	brge	.+82     	; 0x17c8 <LCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1776:	6b 85       	ldd	r22, Y+11	; 0x0b
    1778:	7c 85       	ldd	r23, Y+12	; 0x0c
    177a:	8d 85       	ldd	r24, Y+13	; 0x0d
    177c:	9e 85       	ldd	r25, Y+14	; 0x0e
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e2       	ldi	r20, 0x20	; 32
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	8d 83       	std	Y+5, r24	; 0x05
    179e:	0f c0       	rjmp	.+30     	; 0x17be <LCD_voidSendPulse+0xd0>
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_voidSendPulse+0xbe>
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <LCD_voidSendPulse+0xb2>
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <LCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_voidSendPulse+0xfa>
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_LOW);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	62 e0       	ldi	r22, 0x02	; 2
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>

}
    17fa:	2e 96       	adiw	r28, 0x0e	; 14
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <SSD_voidInit>:
#include "SSD_config.h"

static u8 Local_u8SSDNums[10] = SSD_ArrNums;

void SSD_voidInit(SSD_Type SSD_Configuration)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <SSD_voidInit+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <SSD_voidInit+0x8>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	69 83       	std	Y+1, r22	; 0x01
    181a:	7a 83       	std	Y+2, r23	; 0x02
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection (SSD_Configuration.DataPort, DIO_PORT_OUTPUT);
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	6f ef       	ldi	r22, 0xFF	; 255
    1824:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <DIO_enumSetPortDirection>
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <SSD_voidSendNumber>:

void SSD_voidSendNumber(SSD_Type SSD_Configuration, u8 Copy_u8Number)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <SSD_voidSendNumber+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <SSD_voidSendNumber+0x8>
    183e:	0f 92       	push	r0
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	69 83       	std	Y+1, r22	; 0x01
    1846:	7a 83       	std	Y+2, r23	; 0x02
    1848:	8b 83       	std	Y+3, r24	; 0x03
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	4d 83       	std	Y+5, r20	; 0x05
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 23       	and	r24, r24
    1852:	69 f4       	brne	.+26     	; 0x186e <SSD_voidSendNumber+0x38>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, Local_u8SSDNums[Copy_u8Number] );
    1854:	2a 81       	ldd	r18, Y+2	; 0x02
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	fc 01       	movw	r30, r24
    185e:	ed 56       	subi	r30, 0x6D	; 109
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	90 81       	ld	r25, Z
    1864:	82 2f       	mov	r24, r18
    1866:	69 2f       	mov	r22, r25
    1868:	0e 94 46 13 	call	0x268c	; 0x268c <DIO_enumSetPortValue>
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <SSD_voidSendNumber+0x5a>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	71 f4       	brne	.+28     	; 0x1890 <SSD_voidSendNumber+0x5a>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, ~Local_u8SSDNums[Copy_u8Number]);
    1874:	2a 81       	ldd	r18, Y+2	; 0x02
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	fc 01       	movw	r30, r24
    187e:	ed 56       	subi	r30, 0x6D	; 109
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	80 81       	ld	r24, Z
    1884:	98 2f       	mov	r25, r24
    1886:	90 95       	com	r25
    1888:	82 2f       	mov	r24, r18
    188a:	69 2f       	mov	r22, r25
    188c:	0e 94 46 13 	call	0x268c	; 0x268c <DIO_enumSetPortValue>
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <SSD_voidEnable>:

void SSD_voidEnable(SSD_Type SSD_Configuration)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <SSD_voidEnable+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <SSD_voidEnable+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	69 83       	std	Y+1, r22	; 0x01
    18ae:	7a 83       	std	Y+2, r23	; 0x02
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    18b2:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	69 2f       	mov	r22, r25
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 23       	and	r24, r24
    18c4:	39 f4       	brne	.+14     	; 0x18d4 <SSD_voidEnable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	69 2f       	mov	r22, r25
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <SSD_voidEnable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	31 f4       	brne	.+12     	; 0x18e6 <SSD_voidEnable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	69 2f       	mov	r22, r25
    18e0:	41 e0       	ldi	r20, 0x01	; 1
    18e2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	}
}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <SSD_voidDisable>:

void SSD_voidDisable(SSD_Type SSD_Configuration)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <SSD_voidDisable+0x6>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <SSD_voidDisable+0x8>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	69 83       	std	Y+1, r22	; 0x01
    1902:	7a 83       	std	Y+2, r23	; 0x02
    1904:	8b 83       	std	Y+3, r24	; 0x03
    1906:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	69 2f       	mov	r22, r25
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	88 23       	and	r24, r24
    1918:	39 f4       	brne	.+14     	; 0x1928 <SSD_voidDisable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	69 2f       	mov	r22, r25
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
    1926:	09 c0       	rjmp	.+18     	; 0x193a <SSD_voidDisable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	31 f4       	brne	.+12     	; 0x193a <SSD_voidDisable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	69 2f       	mov	r22, r25
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <SW_voidInit>:
#include "SW_interface.h"
#include "SW_config.h"
#include "SW_private.h"

void SW_voidInit(SW_Type SW_Config)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <SW_voidInit+0x6>
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	69 83       	std	Y+1, r22	; 0x01
    1956:	7a 83       	std	Y+2, r23	; 0x02
    1958:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(SW_Config.PORT, SW_Config.PIN, DIO_PIN_INPUT);
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	69 2f       	mov	r22, r25
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
	if(SW_Config.PULL_STATE == SW_INT_PULL_UP)
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	88 23       	and	r24, r24
    196a:	31 f4       	brne	.+12     	; 0x1978 <SW_voidInit+0x30>
		DIO_enumSetPinValue(SW_Config.PORT, SW_Config.PIN, DIO_PIN_OUTPUT);
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	69 2f       	mov	r22, r25
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <SW_u8GetPressed>:

u8 SW_u8GetPressed (SW_Type SW_Config){
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <SW_u8GetPressed+0x6>
    198a:	00 d0       	rcall	.+0      	; 0x198c <SW_u8GetPressed+0x8>
    198c:	0f 92       	push	r0
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	6b 83       	std	Y+3, r22	; 0x03
    1994:	7c 83       	std	Y+4, r23	; 0x04
    1996:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    1998:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    199a:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.PULL_STATE == SW_INT_PULL_UP) || (SW_Config.PULL_STATE == SW_EXT_PULL_UP) )
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	88 23       	and	r24, r24
    19a0:	19 f0       	breq	.+6      	; 0x19a8 <SW_u8GetPressed+0x24>
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	a1 f4       	brne	.+40     	; 0x19d0 <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	9e 01       	movw	r18, r28
    19ae:	2e 5f       	subi	r18, 0xFE	; 254
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	69 2f       	mov	r22, r25
    19b4:	a9 01       	movw	r20, r18
    19b6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	88 23       	and	r24, r24
    19be:	19 f4       	brne	.+6      	; 0x19c6 <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	1b c0       	rjmp	.+54     	; 0x19fc <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	c1 f4       	brne	.+48     	; 0x19fc <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	16 c0       	rjmp	.+44     	; 0x19fc <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.PULL_STATE == SW_EXT_PULL_DOWN)
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	99 f4       	brne	.+38     	; 0x19fc <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	9e 01       	movw	r18, r28
    19dc:	2e 5f       	subi	r18, 0xFE	; 254
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	69 2f       	mov	r22, r25
    19e2:	a9 01       	movw	r20, r18
    19e4:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	88 23       	and	r24, r24
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    19ee:	19 82       	std	Y+1, r1	; 0x01
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	11 f4       	brne	.+4      	; 0x19fc <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <BUZ_voidInit>:


#include "BUZ_interface.h"

void BUZ_voidInit(BUZ_Type BUZ_Configuration)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <BUZ_voidInit+0x6>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	69 83       	std	Y+1, r22	; 0x01
    1a1c:	7a 83       	std	Y+2, r23	; 0x02
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_OUTPUT);
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	69 2f       	mov	r22, r25
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <BUZ_voidON>:

void BUZ_voidON(BUZ_Type BUZ_Configuration)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <BUZ_voidON+0x6>
    1a3e:	0f 92       	push	r0
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	69 83       	std	Y+1, r22	; 0x01
    1a46:	7a 83       	std	Y+2, r23	; 0x02
    1a48:	8b 83       	std	Y+3, r24	; 0x03
	if(BUZ_Configuration.Active_State == ACTIVE_HIGH)
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	39 f4       	brne	.+14     	; 0x1a5e <BUZ_voidON+0x26>
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_HIGH);
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	69 2f       	mov	r22, r25
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <BUZ_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_LOW);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	69 2f       	mov	r22, r25
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	}
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <BUZ_voidOff>:

void BUZ_voidOff ( BUZ_Type BUZ_Configuration )
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <BUZ_voidOff+0x6>
    1a7c:	0f 92       	push	r0
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	69 83       	std	Y+1, r22	; 0x01
    1a84:	7a 83       	std	Y+2, r23	; 0x02
    1a86:	8b 83       	std	Y+3, r24	; 0x03

	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	39 f4       	brne	.+14     	; 0x1a9c <BUZ_voidOff+0x26>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	69 2f       	mov	r22, r25
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
    1a9a:	09 c0       	rjmp	.+18     	; 0x1aae <BUZ_voidOff+0x38>

	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	88 23       	and	r24, r24
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <BUZ_voidOff+0x38>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH  );
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	69 2f       	mov	r22, r25
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>

	}

}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <BUZ_voidToggle>:


void BUZ_voidToggle(BUZ_Type BUZ_Configuration)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <BUZ_voidToggle+0x6>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	69 83       	std	Y+1, r22	; 0x01
    1ac8:	7a 83       	std	Y+2, r23	; 0x02
    1aca:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin);
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	69 2f       	mov	r22, r25
    1ad2:	0e 94 9c 10 	call	0x2138	; 0x2138 <DIO_enumTogglePinValue>
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <LED_voidInit>:
#include "LED_interface.h"



void LED_voidInit(LED_Type LED_Configuration)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <LED_voidInit+0x6>
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	69 83       	std	Y+1, r22	; 0x01
    1af0:	7a 83       	std	Y+2, r23	; 0x02
    1af2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_OUTPUT);
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	69 2f       	mov	r22, r25
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enumSetPinDirection>
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <LED_voidON>:

void LED_voidON(LED_Type LED_Configuration)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <LED_voidON+0x6>
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	69 83       	std	Y+1, r22	; 0x01
    1b1a:	7a 83       	std	Y+2, r23	; 0x02
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	39 f4       	brne	.+14     	; 0x1b32 <LED_voidON+0x26>
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_HIGH);
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	69 2f       	mov	r22, r25
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
    1b30:	06 c0       	rjmp	.+12     	; 0x1b3e <LED_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_LOW);
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	69 2f       	mov	r22, r25
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <DIO_enumSetPinValue>
	}
}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <LED_voidToggle>:

void LED_voidToggle(LED_Type LED_Configuration)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <LED_voidToggle+0x6>
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	69 83       	std	Y+1, r22	; 0x01
    1b58:	7a 83       	std	Y+2, r23	; 0x02
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.port, LED_Configuration.pin);
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	69 2f       	mov	r22, r25
    1b62:	0e 94 9c 10 	call	0x2138	; 0x2138 <DIO_enumTogglePinValue>
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <DIO_enumSetPinDirection>:




DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	28 97       	sbiw	r28, 0x08	; 8
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	6b 83       	std	Y+3, r22	; 0x03
    1b8a:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <DIO_enumSetPinDirection+0x26>
    1b96:	f1 c0       	rjmp	.+482    	; 0x1d7a <DIO_enumSetPinDirection+0x208>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	88 30       	cpi	r24, 0x08	; 8
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <DIO_enumSetPinDirection+0x2e>
    1b9e:	ed c0       	rjmp	.+474    	; 0x1d7a <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <DIO_enumSetPinDirection+0x36>
    1ba6:	6f c0       	rjmp	.+222    	; 0x1c86 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	38 87       	std	Y+8, r19	; 0x08
    1bb0:	2f 83       	std	Y+7, r18	; 0x07
    1bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb4:	98 85       	ldd	r25, Y+8	; 0x08
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	49 f1       	breq	.+82     	; 0x1c0e <DIO_enumSetPinDirection+0x9c>
    1bbc:	2f 81       	ldd	r18, Y+7	; 0x07
    1bbe:	38 85       	ldd	r19, Y+8	; 0x08
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <DIO_enumSetPinDirection+0x5e>
    1bc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc8:	98 85       	ldd	r25, Y+8	; 0x08
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	61 f0       	breq	.+24     	; 0x1be6 <DIO_enumSetPinDirection+0x74>
    1bce:	d6 c0       	rjmp	.+428    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
    1bd0:	2f 81       	ldd	r18, Y+7	; 0x07
    1bd2:	38 85       	ldd	r19, Y+8	; 0x08
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	71 f1       	breq	.+92     	; 0x1c36 <DIO_enumSetPinDirection+0xc4>
    1bda:	8f 81       	ldd	r24, Y+7	; 0x07
    1bdc:	98 85       	ldd	r25, Y+8	; 0x08
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	e9 f1       	breq	.+122    	; 0x1c5e <DIO_enumSetPinDirection+0xec>
    1be4:	cb c0       	rjmp	.+406    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    1be6:	aa e3       	ldi	r26, 0x3A	; 58
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ea e3       	ldi	r30, 0x3A	; 58
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_enumSetPinDirection+0x92>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_enumSetPinDirection+0x8e>
    1c08:	84 2b       	or	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	b7 c0       	rjmp	.+366    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    1c0e:	a7 e3       	ldi	r26, 0x37	; 55
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e7 e3       	ldi	r30, 0x37	; 55
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_enumSetPinDirection+0xba>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_enumSetPinDirection+0xb6>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	a3 c0       	rjmp	.+326    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    1c36:	a4 e3       	ldi	r26, 0x34	; 52
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e4 e3       	ldi	r30, 0x34	; 52
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_enumSetPinDirection+0xe2>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_enumSetPinDirection+0xde>
    1c58:	84 2b       	or	r24, r20
    1c5a:	8c 93       	st	X, r24
    1c5c:	8f c0       	rjmp	.+286    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    1c5e:	a1 e3       	ldi	r26, 0x31	; 49
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e1 e3       	ldi	r30, 0x31	; 49
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_enumSetPinDirection+0x10a>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <DIO_enumSetPinDirection+0x106>
    1c80:	84 2b       	or	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	7b c0       	rjmp	.+246    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	88 23       	and	r24, r24
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <DIO_enumSetPinDirection+0x11c>
    1c8c:	74 c0       	rjmp	.+232    	; 0x1d76 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	3e 83       	std	Y+6, r19	; 0x06
    1c96:	2d 83       	std	Y+5, r18	; 0x05
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	59 f1       	breq	.+86     	; 0x1cf8 <DIO_enumSetPinDirection+0x186>
    1ca2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca6:	22 30       	cpi	r18, 0x02	; 2
    1ca8:	31 05       	cpc	r19, r1
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <DIO_enumSetPinDirection+0x144>
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	69 f0       	breq	.+26     	; 0x1cce <DIO_enumSetPinDirection+0x15c>
    1cb4:	63 c0       	rjmp	.+198    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
    1cb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	89 f1       	breq	.+98     	; 0x1d22 <DIO_enumSetPinDirection+0x1b0>
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	83 30       	cpi	r24, 0x03	; 3
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <DIO_enumSetPinDirection+0x15a>
    1cca:	40 c0       	rjmp	.+128    	; 0x1d4c <DIO_enumSetPinDirection+0x1da>
    1ccc:	57 c0       	rjmp	.+174    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    1cce:	aa e3       	ldi	r26, 0x3A	; 58
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ea e3       	ldi	r30, 0x3A	; 58
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_enumSetPinDirection+0x17a>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_enumSetPinDirection+0x176>
    1cf0:	80 95       	com	r24
    1cf2:	84 23       	and	r24, r20
    1cf4:	8c 93       	st	X, r24
    1cf6:	42 c0       	rjmp	.+132    	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    1cf8:	a7 e3       	ldi	r26, 0x37	; 55
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e7 e3       	ldi	r30, 0x37	; 55
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_enumSetPinDirection+0x1a4>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_enumSetPinDirection+0x1a0>
    1d1a:	80 95       	com	r24
    1d1c:	84 23       	and	r24, r20
    1d1e:	8c 93       	st	X, r24
    1d20:	2d c0       	rjmp	.+90     	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    1d22:	a4 e3       	ldi	r26, 0x34	; 52
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e4 e3       	ldi	r30, 0x34	; 52
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <DIO_enumSetPinDirection+0x1ce>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <DIO_enumSetPinDirection+0x1ca>
    1d44:	80 95       	com	r24
    1d46:	84 23       	and	r24, r20
    1d48:	8c 93       	st	X, r24
    1d4a:	18 c0       	rjmp	.+48     	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    1d4c:	a1 e3       	ldi	r26, 0x31	; 49
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e1 e3       	ldi	r30, 0x31	; 49
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	48 2f       	mov	r20, r24
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 2e       	mov	r0, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <DIO_enumSetPinDirection+0x1f8>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	0a 94       	dec	r0
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <DIO_enumSetPinDirection+0x1f4>
    1d6e:	80 95       	com	r24
    1d70:	84 23       	and	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    1d76:	19 82       	std	Y+1, r1	; 0x01
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    1d7a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d7e:	28 96       	adiw	r28, 0x08	; 8
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	28 97       	sbiw	r28, 0x08	; 8
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	8a 83       	std	Y+2, r24	; 0x02
    1da6:	6b 83       	std	Y+3, r22	; 0x03
    1da8:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	84 30       	cpi	r24, 0x04	; 4
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <DIO_enumSetPinValue+0x26>
    1db4:	f1 c0       	rjmp	.+482    	; 0x1f98 <DIO_enumSetPinValue+0x208>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 30       	cpi	r24, 0x08	; 8
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <DIO_enumSetPinValue+0x2e>
    1dbc:	ed c0       	rjmp	.+474    	; 0x1f98 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <DIO_enumSetPinValue+0x36>
    1dc4:	6f c0       	rjmp	.+222    	; 0x1ea4 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	38 87       	std	Y+8, r19	; 0x08
    1dce:	2f 83       	std	Y+7, r18	; 0x07
    1dd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd2:	98 85       	ldd	r25, Y+8	; 0x08
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	49 f1       	breq	.+82     	; 0x1e2c <DIO_enumSetPinValue+0x9c>
    1dda:	2f 81       	ldd	r18, Y+7	; 0x07
    1ddc:	38 85       	ldd	r19, Y+8	; 0x08
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	2c f4       	brge	.+10     	; 0x1dee <DIO_enumSetPinValue+0x5e>
    1de4:	8f 81       	ldd	r24, Y+7	; 0x07
    1de6:	98 85       	ldd	r25, Y+8	; 0x08
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	61 f0       	breq	.+24     	; 0x1e04 <DIO_enumSetPinValue+0x74>
    1dec:	d6 c0       	rjmp	.+428    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
    1dee:	2f 81       	ldd	r18, Y+7	; 0x07
    1df0:	38 85       	ldd	r19, Y+8	; 0x08
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	71 f1       	breq	.+92     	; 0x1e54 <DIO_enumSetPinValue+0xc4>
    1df8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfa:	98 85       	ldd	r25, Y+8	; 0x08
    1dfc:	83 30       	cpi	r24, 0x03	; 3
    1dfe:	91 05       	cpc	r25, r1
    1e00:	e9 f1       	breq	.+122    	; 0x1e7c <DIO_enumSetPinValue+0xec>
    1e02:	cb c0       	rjmp	.+406    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    1e04:	ab e3       	ldi	r26, 0x3B	; 59
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	eb e3       	ldi	r30, 0x3B	; 59
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_enumSetPinValue+0x92>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_enumSetPinValue+0x8e>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	b7 c0       	rjmp	.+366    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    1e2c:	a8 e3       	ldi	r26, 0x38	; 56
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e8 e3       	ldi	r30, 0x38	; 56
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_enumSetPinValue+0xba>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <DIO_enumSetPinValue+0xb6>
    1e4e:	84 2b       	or	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	a3 c0       	rjmp	.+326    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    1e54:	a5 e3       	ldi	r26, 0x35	; 53
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e3       	ldi	r30, 0x35	; 53
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_enumSetPinValue+0xe2>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_enumSetPinValue+0xde>
    1e76:	84 2b       	or	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	8f c0       	rjmp	.+286    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    1e7c:	a2 e3       	ldi	r26, 0x32	; 50
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e2 e3       	ldi	r30, 0x32	; 50
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <DIO_enumSetPinValue+0x10a>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <DIO_enumSetPinValue+0x106>
    1e9e:	84 2b       	or	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	7b c0       	rjmp	.+246    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <DIO_enumSetPinValue+0x11c>
    1eaa:	74 c0       	rjmp	.+232    	; 0x1f94 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3e 83       	std	Y+6, r19	; 0x06
    1eb4:	2d 83       	std	Y+5, r18	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	59 f1       	breq	.+86     	; 0x1f16 <DIO_enumSetPinValue+0x186>
    1ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <DIO_enumSetPinValue+0x144>
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f0       	breq	.+26     	; 0x1eec <DIO_enumSetPinValue+0x15c>
    1ed2:	63 c0       	rjmp	.+198    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
    1ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	89 f1       	breq	.+98     	; 0x1f40 <DIO_enumSetPinValue+0x1b0>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <DIO_enumSetPinValue+0x15a>
    1ee8:	40 c0       	rjmp	.+128    	; 0x1f6a <DIO_enumSetPinValue+0x1da>
    1eea:	57 c0       	rjmp	.+174    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    1eec:	ab e3       	ldi	r26, 0x3B	; 59
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	eb e3       	ldi	r30, 0x3B	; 59
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_enumSetPinValue+0x17a>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_enumSetPinValue+0x176>
    1f0e:	80 95       	com	r24
    1f10:	84 23       	and	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	42 c0       	rjmp	.+132    	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    1f16:	a8 e3       	ldi	r26, 0x38	; 56
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e8 e3       	ldi	r30, 0x38	; 56
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_enumSetPinValue+0x1a4>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <DIO_enumSetPinValue+0x1a0>
    1f38:	80 95       	com	r24
    1f3a:	84 23       	and	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	2d c0       	rjmp	.+90     	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    1f40:	a5 e3       	ldi	r26, 0x35	; 53
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e5 e3       	ldi	r30, 0x35	; 53
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <DIO_enumSetPinValue+0x1ce>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <DIO_enumSetPinValue+0x1ca>
    1f62:	80 95       	com	r24
    1f64:	84 23       	and	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	18 c0       	rjmp	.+48     	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    1f6a:	a2 e3       	ldi	r26, 0x32	; 50
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e2 e3       	ldi	r30, 0x32	; 50
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	48 2f       	mov	r20, r24
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <DIO_enumSetPinValue+0x1f8>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <DIO_enumSetPinValue+0x1f4>
    1f8c:	80 95       	com	r24
    1f8e:	84 23       	and	r24, r20
    1f90:	8c 93       	st	X, r24
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    1f94:	19 82       	std	Y+1, r1	; 0x01
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    1f98:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f9c:	28 96       	adiw	r28, 0x08	; 8
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <DIO_enumGetPinValue>:



DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	27 97       	sbiw	r28, 0x07	; 7
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	6b 83       	std	Y+3, r22	; 0x03
    1fc6:	5d 83       	std	Y+5, r21	; 0x05
    1fc8:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	84 30       	cpi	r24, 0x04	; 4
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <DIO_enumGetPinValue+0x28>
    1fd4:	a6 c0       	rjmp	.+332    	; 0x2122 <DIO_enumGetPinValue+0x174>
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	88 30       	cpi	r24, 0x08	; 8
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <DIO_enumGetPinValue+0x30>
    1fdc:	a2 c0       	rjmp	.+324    	; 0x2122 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3f 83       	std	Y+7, r19	; 0x07
    1fe6:	2e 83       	std	Y+6, r18	; 0x06
    1fe8:	4e 81       	ldd	r20, Y+6	; 0x06
    1fea:	5f 81       	ldd	r21, Y+7	; 0x07
    1fec:	41 30       	cpi	r20, 0x01	; 1
    1fee:	51 05       	cpc	r21, r1
    1ff0:	c1 f1       	breq	.+112    	; 0x2062 <DIO_enumGetPinValue+0xb4>
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	34 f4       	brge	.+12     	; 0x2008 <DIO_enumGetPinValue+0x5a>
    1ffc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ffe:	3f 81       	ldd	r19, Y+7	; 0x07
    2000:	21 15       	cp	r18, r1
    2002:	31 05       	cpc	r19, r1
    2004:	71 f0       	breq	.+28     	; 0x2022 <DIO_enumGetPinValue+0x74>
    2006:	8e c0       	rjmp	.+284    	; 0x2124 <DIO_enumGetPinValue+0x176>
    2008:	4e 81       	ldd	r20, Y+6	; 0x06
    200a:	5f 81       	ldd	r21, Y+7	; 0x07
    200c:	42 30       	cpi	r20, 0x02	; 2
    200e:	51 05       	cpc	r21, r1
    2010:	09 f4       	brne	.+2      	; 0x2014 <DIO_enumGetPinValue+0x66>
    2012:	47 c0       	rjmp	.+142    	; 0x20a2 <DIO_enumGetPinValue+0xf4>
    2014:	8e 81       	ldd	r24, Y+6	; 0x06
    2016:	9f 81       	ldd	r25, Y+7	; 0x07
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	91 05       	cpc	r25, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <DIO_enumGetPinValue+0x72>
    201e:	61 c0       	rjmp	.+194    	; 0x20e2 <DIO_enumGetPinValue+0x134>
    2020:	81 c0       	rjmp	.+258    	; 0x2124 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    2022:	e9 e3       	ldi	r30, 0x39	; 57
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_enumGetPinValue+0x8e>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	2a 95       	dec	r18
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_enumGetPinValue+0x8a>
    2040:	9a 01       	movw	r18, r20
    2042:	28 23       	and	r18, r24
    2044:	39 23       	and	r19, r25
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a9 01       	movw	r20, r18
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <DIO_enumGetPinValue+0xa6>
    2050:	55 95       	asr	r21
    2052:	47 95       	ror	r20
    2054:	8a 95       	dec	r24
    2056:	e2 f7       	brpl	.-8      	; 0x2050 <DIO_enumGetPinValue+0xa2>
    2058:	ca 01       	movw	r24, r20
    205a:	ec 81       	ldd	r30, Y+4	; 0x04
    205c:	fd 81       	ldd	r31, Y+5	; 0x05
    205e:	80 83       	st	Z, r24
    2060:	61 c0       	rjmp	.+194    	; 0x2124 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    2062:	e6 e3       	ldi	r30, 0x36	; 54
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	48 2f       	mov	r20, r24
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	02 c0       	rjmp	.+4      	; 0x207c <DIO_enumGetPinValue+0xce>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	2a 95       	dec	r18
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <DIO_enumGetPinValue+0xca>
    2080:	9a 01       	movw	r18, r20
    2082:	28 23       	and	r18, r24
    2084:	39 23       	and	r19, r25
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a9 01       	movw	r20, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <DIO_enumGetPinValue+0xe6>
    2090:	55 95       	asr	r21
    2092:	47 95       	ror	r20
    2094:	8a 95       	dec	r24
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <DIO_enumGetPinValue+0xe2>
    2098:	ca 01       	movw	r24, r20
    209a:	ec 81       	ldd	r30, Y+4	; 0x04
    209c:	fd 81       	ldd	r31, Y+5	; 0x05
    209e:	80 83       	st	Z, r24
    20a0:	41 c0       	rjmp	.+130    	; 0x2124 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    20a2:	e3 e3       	ldi	r30, 0x33	; 51
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	48 2f       	mov	r20, r24
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <DIO_enumGetPinValue+0x10e>
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	2a 95       	dec	r18
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <DIO_enumGetPinValue+0x10a>
    20c0:	9a 01       	movw	r18, r20
    20c2:	28 23       	and	r18, r24
    20c4:	39 23       	and	r19, r25
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a9 01       	movw	r20, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <DIO_enumGetPinValue+0x126>
    20d0:	55 95       	asr	r21
    20d2:	47 95       	ror	r20
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <DIO_enumGetPinValue+0x122>
    20d8:	ca 01       	movw	r24, r20
    20da:	ec 81       	ldd	r30, Y+4	; 0x04
    20dc:	fd 81       	ldd	r31, Y+5	; 0x05
    20de:	80 83       	st	Z, r24
    20e0:	21 c0       	rjmp	.+66     	; 0x2124 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    20e2:	e0 e3       	ldi	r30, 0x30	; 48
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <DIO_enumGetPinValue+0x14e>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	2a 95       	dec	r18
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <DIO_enumGetPinValue+0x14a>
    2100:	9a 01       	movw	r18, r20
    2102:	28 23       	and	r18, r24
    2104:	39 23       	and	r19, r25
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a9 01       	movw	r20, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <DIO_enumGetPinValue+0x166>
    2110:	55 95       	asr	r21
    2112:	47 95       	ror	r20
    2114:	8a 95       	dec	r24
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <DIO_enumGetPinValue+0x162>
    2118:	ca 01       	movw	r24, r20
    211a:	ec 81       	ldd	r30, Y+4	; 0x04
    211c:	fd 81       	ldd	r31, Y+5	; 0x05
    211e:	80 83       	st	Z, r24
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    2122:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	27 96       	adiw	r28, 0x07	; 7
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <DIO_enumTogglePinValue>:


DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <DIO_enumTogglePinValue+0x6>
    213e:	00 d0       	rcall	.+0      	; 0x2140 <DIO_enumTogglePinValue+0x8>
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	8a 83       	std	Y+2, r24	; 0x02
    2148:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	88 30       	cpi	r24, 0x08	; 8
    2152:	08 f0       	brcs	.+2      	; 0x2156 <DIO_enumTogglePinValue+0x1e>
    2154:	6f c0       	rjmp	.+222    	; 0x2234 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	3d 83       	std	Y+5, r19	; 0x05
    215e:	2c 83       	std	Y+4, r18	; 0x04
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	9d 81       	ldd	r25, Y+5	; 0x05
    2164:	81 30       	cpi	r24, 0x01	; 1
    2166:	91 05       	cpc	r25, r1
    2168:	49 f1       	breq	.+82     	; 0x21bc <DIO_enumTogglePinValue+0x84>
    216a:	2c 81       	ldd	r18, Y+4	; 0x04
    216c:	3d 81       	ldd	r19, Y+5	; 0x05
    216e:	22 30       	cpi	r18, 0x02	; 2
    2170:	31 05       	cpc	r19, r1
    2172:	2c f4       	brge	.+10     	; 0x217e <DIO_enumTogglePinValue+0x46>
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	9d 81       	ldd	r25, Y+5	; 0x05
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	61 f0       	breq	.+24     	; 0x2194 <DIO_enumTogglePinValue+0x5c>
    217c:	5c c0       	rjmp	.+184    	; 0x2236 <DIO_enumTogglePinValue+0xfe>
    217e:	2c 81       	ldd	r18, Y+4	; 0x04
    2180:	3d 81       	ldd	r19, Y+5	; 0x05
    2182:	22 30       	cpi	r18, 0x02	; 2
    2184:	31 05       	cpc	r19, r1
    2186:	71 f1       	breq	.+92     	; 0x21e4 <DIO_enumTogglePinValue+0xac>
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	9d 81       	ldd	r25, Y+5	; 0x05
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	91 05       	cpc	r25, r1
    2190:	e9 f1       	breq	.+122    	; 0x220c <DIO_enumTogglePinValue+0xd4>
    2192:	51 c0       	rjmp	.+162    	; 0x2236 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    2194:	ab e3       	ldi	r26, 0x3B	; 59
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	eb e3       	ldi	r30, 0x3B	; 59
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	48 2f       	mov	r20, r24
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	02 2e       	mov	r0, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <DIO_enumTogglePinValue+0x7a>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <DIO_enumTogglePinValue+0x76>
    21b6:	84 27       	eor	r24, r20
    21b8:	8c 93       	st	X, r24
    21ba:	3d c0       	rjmp	.+122    	; 0x2236 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    21bc:	a8 e3       	ldi	r26, 0x38	; 56
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e8 e3       	ldi	r30, 0x38	; 56
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	48 2f       	mov	r20, r24
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	02 2e       	mov	r0, r18
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <DIO_enumTogglePinValue+0xa2>
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	0a 94       	dec	r0
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <DIO_enumTogglePinValue+0x9e>
    21de:	84 27       	eor	r24, r20
    21e0:	8c 93       	st	X, r24
    21e2:	29 c0       	rjmp	.+82     	; 0x2236 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    21e4:	a5 e3       	ldi	r26, 0x35	; 53
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e5 e3       	ldi	r30, 0x35	; 53
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	48 2f       	mov	r20, r24
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 2e       	mov	r0, r18
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <DIO_enumTogglePinValue+0xca>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	0a 94       	dec	r0
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <DIO_enumTogglePinValue+0xc6>
    2206:	84 27       	eor	r24, r20
    2208:	8c 93       	st	X, r24
    220a:	15 c0       	rjmp	.+42     	; 0x2236 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    220c:	a2 e3       	ldi	r26, 0x32	; 50
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e2 e3       	ldi	r30, 0x32	; 50
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	48 2f       	mov	r20, r24
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 2e       	mov	r0, r18
    2224:	02 c0       	rjmp	.+4      	; 0x222a <DIO_enumTogglePinValue+0xf2>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	0a 94       	dec	r0
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <DIO_enumTogglePinValue+0xee>
    222e:	84 27       	eor	r24, r20
    2230:	8c 93       	st	X, r24
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    2234:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <DIO_enumConnectPullup>:


DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <DIO_enumConnectPullup+0x6>
    224e:	00 d0       	rcall	.+0      	; 0x2250 <DIO_enumConnectPullup+0x8>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <DIO_enumConnectPullup+0xa>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	8a 83       	std	Y+2, r24	; 0x02
    2258:	6b 83       	std	Y+3, r22	; 0x03
    225a:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	84 30       	cpi	r24, 0x04	; 4
    2264:	08 f0       	brcs	.+2      	; 0x2268 <DIO_enumConnectPullup+0x20>
    2266:	3e c1       	rjmp	.+636    	; 0x24e4 <DIO_enumConnectPullup+0x29c>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	88 30       	cpi	r24, 0x08	; 8
    226c:	08 f0       	brcs	.+2      	; 0x2270 <DIO_enumConnectPullup+0x28>
    226e:	3a c1       	rjmp	.+628    	; 0x24e4 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3e 83       	std	Y+6, r19	; 0x06
    2278:	2d 83       	std	Y+5, r18	; 0x05
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	91 05       	cpc	r25, r1
    2282:	09 f4       	brne	.+2      	; 0x2286 <DIO_enumConnectPullup+0x3e>
    2284:	5d c0       	rjmp	.+186    	; 0x2340 <DIO_enumConnectPullup+0xf8>
    2286:	2d 81       	ldd	r18, Y+5	; 0x05
    2288:	3e 81       	ldd	r19, Y+6	; 0x06
    228a:	22 30       	cpi	r18, 0x02	; 2
    228c:	31 05       	cpc	r19, r1
    228e:	2c f4       	brge	.+10     	; 0x229a <DIO_enumConnectPullup+0x52>
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	71 f0       	breq	.+28     	; 0x22b4 <DIO_enumConnectPullup+0x6c>
    2298:	26 c1       	rjmp	.+588    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
    229a:	2d 81       	ldd	r18, Y+5	; 0x05
    229c:	3e 81       	ldd	r19, Y+6	; 0x06
    229e:	22 30       	cpi	r18, 0x02	; 2
    22a0:	31 05       	cpc	r19, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <DIO_enumConnectPullup+0x5e>
    22a4:	93 c0       	rjmp	.+294    	; 0x23cc <DIO_enumConnectPullup+0x184>
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	91 05       	cpc	r25, r1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <DIO_enumConnectPullup+0x6a>
    22b0:	d3 c0       	rjmp	.+422    	; 0x2458 <DIO_enumConnectPullup+0x210>
    22b2:	19 c1       	rjmp	.+562    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	71 f5       	brne	.+92     	; 0x2316 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    22ba:	a0 e5       	ldi	r26, 0x50	; 80
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e0 e5       	ldi	r30, 0x50	; 80
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8b 7f       	andi	r24, 0xFB	; 251
    22c6:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    22c8:	aa e3       	ldi	r26, 0x3A	; 58
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ea e3       	ldi	r30, 0x3A	; 58
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	48 2f       	mov	r20, r24
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <DIO_enumConnectPullup+0x9c>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	2a 95       	dec	r18
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <DIO_enumConnectPullup+0x98>
    22e8:	80 95       	com	r24
    22ea:	84 23       	and	r24, r20
    22ec:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    22ee:	ab e3       	ldi	r26, 0x3B	; 59
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	eb e3       	ldi	r30, 0x3B	; 59
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	48 2f       	mov	r20, r24
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <DIO_enumConnectPullup+0xc4>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <DIO_enumConnectPullup+0xc0>
    2310:	84 2b       	or	r24, r20
    2312:	8c 93       	st	X, r24
    2314:	e8 c0       	rjmp	.+464    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    2316:	ab e3       	ldi	r26, 0x3B	; 59
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	eb e3       	ldi	r30, 0x3B	; 59
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	48 2f       	mov	r20, r24
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 2e       	mov	r0, r18
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <DIO_enumConnectPullup+0xec>
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	0a 94       	dec	r0
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <DIO_enumConnectPullup+0xe8>
    2338:	80 95       	com	r24
    233a:	84 23       	and	r24, r20
    233c:	8c 93       	st	X, r24
    233e:	d3 c0       	rjmp	.+422    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	71 f5       	brne	.+92     	; 0x23a2 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    2346:	a0 e5       	ldi	r26, 0x50	; 80
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e0 e5       	ldi	r30, 0x50	; 80
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8b 7f       	andi	r24, 0xFB	; 251
    2352:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    2354:	a7 e3       	ldi	r26, 0x37	; 55
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e7 e3       	ldi	r30, 0x37	; 55
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	48 2f       	mov	r20, r24
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <DIO_enumConnectPullup+0x128>
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	2a 95       	dec	r18
    2372:	e2 f7       	brpl	.-8      	; 0x236c <DIO_enumConnectPullup+0x124>
    2374:	80 95       	com	r24
    2376:	84 23       	and	r24, r20
    2378:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    237a:	a8 e3       	ldi	r26, 0x38	; 56
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e8 e3       	ldi	r30, 0x38	; 56
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	02 2e       	mov	r0, r18
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <DIO_enumConnectPullup+0x150>
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	0a 94       	dec	r0
    239a:	e2 f7       	brpl	.-8      	; 0x2394 <DIO_enumConnectPullup+0x14c>
    239c:	84 2b       	or	r24, r20
    239e:	8c 93       	st	X, r24
    23a0:	a2 c0       	rjmp	.+324    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    23a2:	a8 e3       	ldi	r26, 0x38	; 56
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e8 e3       	ldi	r30, 0x38	; 56
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	48 2f       	mov	r20, r24
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 2e       	mov	r0, r18
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <DIO_enumConnectPullup+0x178>
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	0a 94       	dec	r0
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <DIO_enumConnectPullup+0x174>
    23c4:	80 95       	com	r24
    23c6:	84 23       	and	r24, r20
    23c8:	8c 93       	st	X, r24
    23ca:	8d c0       	rjmp	.+282    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	71 f5       	brne	.+92     	; 0x242e <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    23d2:	a0 e5       	ldi	r26, 0x50	; 80
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e0 e5       	ldi	r30, 0x50	; 80
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8b 7f       	andi	r24, 0xFB	; 251
    23de:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    23e0:	a4 e3       	ldi	r26, 0x34	; 52
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e4 e3       	ldi	r30, 0x34	; 52
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	48 2f       	mov	r20, r24
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <DIO_enumConnectPullup+0x1b4>
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	2a 95       	dec	r18
    23fe:	e2 f7       	brpl	.-8      	; 0x23f8 <DIO_enumConnectPullup+0x1b0>
    2400:	80 95       	com	r24
    2402:	84 23       	and	r24, r20
    2404:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    2406:	a5 e3       	ldi	r26, 0x35	; 53
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e5 e3       	ldi	r30, 0x35	; 53
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	48 2f       	mov	r20, r24
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	02 2e       	mov	r0, r18
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <DIO_enumConnectPullup+0x1dc>
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	0a 94       	dec	r0
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <DIO_enumConnectPullup+0x1d8>
    2428:	84 2b       	or	r24, r20
    242a:	8c 93       	st	X, r24
    242c:	5c c0       	rjmp	.+184    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    242e:	a5 e3       	ldi	r26, 0x35	; 53
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e5 e3       	ldi	r30, 0x35	; 53
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	48 2f       	mov	r20, r24
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	02 2e       	mov	r0, r18
    2446:	02 c0       	rjmp	.+4      	; 0x244c <DIO_enumConnectPullup+0x204>
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	0a 94       	dec	r0
    244e:	e2 f7       	brpl	.-8      	; 0x2448 <DIO_enumConnectPullup+0x200>
    2450:	80 95       	com	r24
    2452:	84 23       	and	r24, r20
    2454:	8c 93       	st	X, r24
    2456:	47 c0       	rjmp	.+142    	; 0x24e6 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	71 f5       	brne	.+92     	; 0x24ba <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    245e:	a0 e5       	ldi	r26, 0x50	; 80
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e0 e5       	ldi	r30, 0x50	; 80
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8b 7f       	andi	r24, 0xFB	; 251
    246a:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    246c:	a1 e3       	ldi	r26, 0x31	; 49
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e1 e3       	ldi	r30, 0x31	; 49
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <DIO_enumConnectPullup+0x240>
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	2a 95       	dec	r18
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <DIO_enumConnectPullup+0x23c>
    248c:	80 95       	com	r24
    248e:	84 23       	and	r24, r20
    2490:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    2492:	a2 e3       	ldi	r26, 0x32	; 50
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e2 e3       	ldi	r30, 0x32	; 50
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	48 2f       	mov	r20, r24
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	02 2e       	mov	r0, r18
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <DIO_enumConnectPullup+0x268>
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	0a 94       	dec	r0
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <DIO_enumConnectPullup+0x264>
    24b4:	84 2b       	or	r24, r20
    24b6:	8c 93       	st	X, r24
    24b8:	16 c0       	rjmp	.+44     	; 0x24e6 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    24ba:	a2 e3       	ldi	r26, 0x32	; 50
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e2 e3       	ldi	r30, 0x32	; 50
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	48 2f       	mov	r20, r24
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	02 2e       	mov	r0, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <DIO_enumConnectPullup+0x290>
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	0a 94       	dec	r0
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <DIO_enumConnectPullup+0x28c>
    24dc:	80 95       	com	r24
    24de:	84 23       	and	r24, r20
    24e0:	8c 93       	st	X, r24
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    24e4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    24e6:	89 81       	ldd	r24, Y+1	; 0x01


}
    24e8:	26 96       	adiw	r28, 0x06	; 6
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <DIO_voidWriteHighNibbles>:




DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <DIO_voidWriteHighNibbles+0x6>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <DIO_voidWriteHighNibbles+0x8>
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	8a 83       	std	Y+2, r24	; 0x02
    250a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	84 30       	cpi	r24, 0x04	; 4
    2514:	08 f0       	brcs	.+2      	; 0x2518 <DIO_voidWriteHighNibbles+0x1e>
    2516:	63 c0       	rjmp	.+198    	; 0x25de <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	82 95       	swap	r24
    251c:	80 7f       	andi	r24, 0xF0	; 240
    251e:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	3d 83       	std	Y+5, r19	; 0x05
    2528:	2c 83       	std	Y+4, r18	; 0x04
    252a:	8c 81       	ldd	r24, Y+4	; 0x04
    252c:	9d 81       	ldd	r25, Y+5	; 0x05
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	91 05       	cpc	r25, r1
    2532:	29 f1       	breq	.+74     	; 0x257e <DIO_voidWriteHighNibbles+0x84>
    2534:	2c 81       	ldd	r18, Y+4	; 0x04
    2536:	3d 81       	ldd	r19, Y+5	; 0x05
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	2c f4       	brge	.+10     	; 0x2548 <DIO_voidWriteHighNibbles+0x4e>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	61 f0       	breq	.+24     	; 0x255e <DIO_voidWriteHighNibbles+0x64>
    2546:	4c c0       	rjmp	.+152    	; 0x25e0 <DIO_voidWriteHighNibbles+0xe6>
    2548:	2c 81       	ldd	r18, Y+4	; 0x04
    254a:	3d 81       	ldd	r19, Y+5	; 0x05
    254c:	22 30       	cpi	r18, 0x02	; 2
    254e:	31 05       	cpc	r19, r1
    2550:	31 f1       	breq	.+76     	; 0x259e <DIO_voidWriteHighNibbles+0xa4>
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	83 30       	cpi	r24, 0x03	; 3
    2558:	91 05       	cpc	r25, r1
    255a:	89 f1       	breq	.+98     	; 0x25be <DIO_voidWriteHighNibbles+0xc4>
    255c:	41 c0       	rjmp	.+130    	; 0x25e0 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    255e:	ab e3       	ldi	r26, 0x3B	; 59
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	eb e3       	ldi	r30, 0x3B	; 59
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8f 70       	andi	r24, 0x0F	; 15
    256a:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    256c:	ab e3       	ldi	r26, 0x3B	; 59
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	eb e3       	ldi	r30, 0x3B	; 59
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	90 81       	ld	r25, Z
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	89 2b       	or	r24, r25
    257a:	8c 93       	st	X, r24
    257c:	31 c0       	rjmp	.+98     	; 0x25e0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    257e:	a8 e3       	ldi	r26, 0x38	; 56
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e8 e3       	ldi	r30, 0x38	; 56
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	8f 70       	andi	r24, 0x0F	; 15
    258a:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    258c:	a8 e3       	ldi	r26, 0x38	; 56
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e8 e3       	ldi	r30, 0x38	; 56
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	90 81       	ld	r25, Z
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	89 2b       	or	r24, r25
    259a:	8c 93       	st	X, r24
    259c:	21 c0       	rjmp	.+66     	; 0x25e0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    259e:	a5 e3       	ldi	r26, 0x35	; 53
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e5 e3       	ldi	r30, 0x35	; 53
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	8f 70       	andi	r24, 0x0F	; 15
    25aa:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    25ac:	a5 e3       	ldi	r26, 0x35	; 53
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e5 e3       	ldi	r30, 0x35	; 53
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	90 81       	ld	r25, Z
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	89 2b       	or	r24, r25
    25ba:	8c 93       	st	X, r24
    25bc:	11 c0       	rjmp	.+34     	; 0x25e0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    25be:	a2 e3       	ldi	r26, 0x32	; 50
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e2 e3       	ldi	r30, 0x32	; 50
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 70       	andi	r24, 0x0F	; 15
    25ca:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    25cc:	a2 e3       	ldi	r26, 0x32	; 50
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e2 e3       	ldi	r30, 0x32	; 50
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	90 81       	ld	r25, Z
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	89 2b       	or	r24, r25
    25da:	8c 93       	st	X, r24
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    25de:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    25e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <DIO_enumSetPortDirection+0x6>
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <DIO_enumSetPortDirection+0x8>
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	8a 83       	std	Y+2, r24	; 0x02
    2602:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	84 30       	cpi	r24, 0x04	; 4
    260c:	a8 f5       	brcc	.+106    	; 0x2678 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	3d 83       	std	Y+5, r19	; 0x05
    2616:	2c 83       	std	Y+4, r18	; 0x04
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	9d 81       	ldd	r25, Y+5	; 0x05
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	91 05       	cpc	r25, r1
    2620:	d1 f0       	breq	.+52     	; 0x2656 <DIO_enumSetPortDirection+0x64>
    2622:	2c 81       	ldd	r18, Y+4	; 0x04
    2624:	3d 81       	ldd	r19, Y+5	; 0x05
    2626:	22 30       	cpi	r18, 0x02	; 2
    2628:	31 05       	cpc	r19, r1
    262a:	2c f4       	brge	.+10     	; 0x2636 <DIO_enumSetPortDirection+0x44>
    262c:	8c 81       	ldd	r24, Y+4	; 0x04
    262e:	9d 81       	ldd	r25, Y+5	; 0x05
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	61 f0       	breq	.+24     	; 0x264c <DIO_enumSetPortDirection+0x5a>
    2634:	1f c0       	rjmp	.+62     	; 0x2674 <DIO_enumSetPortDirection+0x82>
    2636:	2c 81       	ldd	r18, Y+4	; 0x04
    2638:	3d 81       	ldd	r19, Y+5	; 0x05
    263a:	22 30       	cpi	r18, 0x02	; 2
    263c:	31 05       	cpc	r19, r1
    263e:	81 f0       	breq	.+32     	; 0x2660 <DIO_enumSetPortDirection+0x6e>
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	9d 81       	ldd	r25, Y+5	; 0x05
    2644:	83 30       	cpi	r24, 0x03	; 3
    2646:	91 05       	cpc	r25, r1
    2648:	81 f0       	breq	.+32     	; 0x266a <DIO_enumSetPortDirection+0x78>
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    264c:	ea e3       	ldi	r30, 0x3A	; 58
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	80 83       	st	Z, r24
    2654:	12 c0       	rjmp	.+36     	; 0x267a <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    2656:	e7 e3       	ldi	r30, 0x37	; 55
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	80 83       	st	Z, r24
    265e:	0d c0       	rjmp	.+26     	; 0x267a <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    2660:	e4 e3       	ldi	r30, 0x34	; 52
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	80 83       	st	Z, r24
    2668:	08 c0       	rjmp	.+16     	; 0x267a <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    266a:	e1 e3       	ldi	r30, 0x31	; 49
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	80 83       	st	Z, r24
    2672:	03 c0       	rjmp	.+6      	; 0x267a <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    2674:	19 82       	std	Y+1, r1	; 0x01
    2676:	01 c0       	rjmp	.+2      	; 0x267a <DIO_enumSetPortDirection+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2678:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    267a:	89 81       	ldd	r24, Y+1	; 0x01
}
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	00 d0       	rcall	.+0      	; 0x2692 <DIO_enumSetPortValue+0x6>
    2692:	00 d0       	rcall	.+0      	; 0x2694 <DIO_enumSetPortValue+0x8>
    2694:	0f 92       	push	r0
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	8a 83       	std	Y+2, r24	; 0x02
    269c:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	84 30       	cpi	r24, 0x04	; 4
    26a6:	a8 f5       	brcc	.+106    	; 0x2712 <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	3d 83       	std	Y+5, r19	; 0x05
    26b0:	2c 83       	std	Y+4, r18	; 0x04
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	9d 81       	ldd	r25, Y+5	; 0x05
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	91 05       	cpc	r25, r1
    26ba:	d1 f0       	breq	.+52     	; 0x26f0 <DIO_enumSetPortValue+0x64>
    26bc:	2c 81       	ldd	r18, Y+4	; 0x04
    26be:	3d 81       	ldd	r19, Y+5	; 0x05
    26c0:	22 30       	cpi	r18, 0x02	; 2
    26c2:	31 05       	cpc	r19, r1
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <DIO_enumSetPortValue+0x44>
    26c6:	8c 81       	ldd	r24, Y+4	; 0x04
    26c8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	61 f0       	breq	.+24     	; 0x26e6 <DIO_enumSetPortValue+0x5a>
    26ce:	1f c0       	rjmp	.+62     	; 0x270e <DIO_enumSetPortValue+0x82>
    26d0:	2c 81       	ldd	r18, Y+4	; 0x04
    26d2:	3d 81       	ldd	r19, Y+5	; 0x05
    26d4:	22 30       	cpi	r18, 0x02	; 2
    26d6:	31 05       	cpc	r19, r1
    26d8:	81 f0       	breq	.+32     	; 0x26fa <DIO_enumSetPortValue+0x6e>
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	9d 81       	ldd	r25, Y+5	; 0x05
    26de:	83 30       	cpi	r24, 0x03	; 3
    26e0:	91 05       	cpc	r25, r1
    26e2:	81 f0       	breq	.+32     	; 0x2704 <DIO_enumSetPortValue+0x78>
    26e4:	14 c0       	rjmp	.+40     	; 0x270e <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    26e6:	eb e3       	ldi	r30, 0x3B	; 59
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	80 83       	st	Z, r24
    26ee:	12 c0       	rjmp	.+36     	; 0x2714 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    26f0:	e8 e3       	ldi	r30, 0x38	; 56
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	80 83       	st	Z, r24
    26f8:	0d c0       	rjmp	.+26     	; 0x2714 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    26fa:	e5 e3       	ldi	r30, 0x35	; 53
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	80 83       	st	Z, r24
    2702:	08 c0       	rjmp	.+16     	; 0x2714 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    2704:	e2 e3       	ldi	r30, 0x32	; 50
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	80 83       	st	Z, r24
    270c:	03 c0       	rjmp	.+6      	; 0x2714 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    270e:	19 82       	std	Y+1, r1	; 0x01
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <DIO_enumSetPortValue+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2712:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
}
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <__prologue_saves__>:
    2726:	2f 92       	push	r2
    2728:	3f 92       	push	r3
    272a:	4f 92       	push	r4
    272c:	5f 92       	push	r5
    272e:	6f 92       	push	r6
    2730:	7f 92       	push	r7
    2732:	8f 92       	push	r8
    2734:	9f 92       	push	r9
    2736:	af 92       	push	r10
    2738:	bf 92       	push	r11
    273a:	cf 92       	push	r12
    273c:	df 92       	push	r13
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	ca 1b       	sub	r28, r26
    2750:	db 0b       	sbc	r29, r27
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	09 94       	ijmp

0000275e <__epilogue_restores__>:
    275e:	2a 88       	ldd	r2, Y+18	; 0x12
    2760:	39 88       	ldd	r3, Y+17	; 0x11
    2762:	48 88       	ldd	r4, Y+16	; 0x10
    2764:	5f 84       	ldd	r5, Y+15	; 0x0f
    2766:	6e 84       	ldd	r6, Y+14	; 0x0e
    2768:	7d 84       	ldd	r7, Y+13	; 0x0d
    276a:	8c 84       	ldd	r8, Y+12	; 0x0c
    276c:	9b 84       	ldd	r9, Y+11	; 0x0b
    276e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2770:	b9 84       	ldd	r11, Y+9	; 0x09
    2772:	c8 84       	ldd	r12, Y+8	; 0x08
    2774:	df 80       	ldd	r13, Y+7	; 0x07
    2776:	ee 80       	ldd	r14, Y+6	; 0x06
    2778:	fd 80       	ldd	r15, Y+5	; 0x05
    277a:	0c 81       	ldd	r16, Y+4	; 0x04
    277c:	1b 81       	ldd	r17, Y+3	; 0x03
    277e:	aa 81       	ldd	r26, Y+2	; 0x02
    2780:	b9 81       	ldd	r27, Y+1	; 0x01
    2782:	ce 0f       	add	r28, r30
    2784:	d1 1d       	adc	r29, r1
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	ed 01       	movw	r28, r26
    2792:	08 95       	ret

00002794 <_exit>:
    2794:	f8 94       	cli

00002796 <__stop_program>:
    2796:	ff cf       	rjmp	.-2      	; 0x2796 <__stop_program>
