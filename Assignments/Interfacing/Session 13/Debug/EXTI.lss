
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00002a48  00002adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800086  00800086  00002b02  2**0
                  ALLOC
  3 .debug_aranges 00000378  00000000  00000000  00002b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000563  00000000  00000000  00002e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002dbd  00000000  00000000  000033dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001621  00000000  00000000  0000619a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002476  00000000  00000000  000077bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  00009c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000883  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000a947  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  0000b115  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_1>
       8:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_2>
       c:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


void Airbag();

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	EXTI_Init();
     b4e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EXTI_Init>
	EXTI_Enable(EXTI0);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <EXTI_Enable>
	EXTI_SetCallback(EXTI0, Airbag);
     b58:	25 eb       	ldi	r18, 0xB5	; 181
     b5a:	35 e0       	ldi	r19, 0x05	; 5
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	b9 01       	movw	r22, r18
     b60:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <EXTI_SetCallback>
	GIE_voidEnable();
     b64:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GIE_voidEnable>
     b68:	ff cf       	rjmp	.-2      	; 0xb68 <main+0x22>

00000b6a <Airbag>:
	}
	return 0;
}

void Airbag()
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	28 97       	sbiw	r28, 0x08	; 8
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
	LED_Type Led1 = {LED_PORTA, LED_PIN0, ACTIVE_HIGH};	LED_voidInit(Led1);
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9d 83       	std	Y+5, r25	; 0x05
     b84:	8c 83       	std	Y+4, r24	; 0x04
     b86:	e2 e8       	ldi	r30, 0x82	; 130
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	ff 83       	std	Y+7, r31	; 0x07
     b8c:	ee 83       	std	Y+6, r30	; 0x06
     b8e:	f3 e0       	ldi	r31, 0x03	; 3
     b90:	f8 87       	std	Y+8, r31	; 0x08
     b92:	ee 81       	ldd	r30, Y+6	; 0x06
     b94:	ff 81       	ldd	r31, Y+7	; 0x07
     b96:	00 80       	ld	r0, Z
     b98:	8e 81       	ldd	r24, Y+6	; 0x06
     b9a:	9f 81       	ldd	r25, Y+7	; 0x07
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	9f 83       	std	Y+7, r25	; 0x07
     ba0:	8e 83       	std	Y+6, r24	; 0x06
     ba2:	ec 81       	ldd	r30, Y+4	; 0x04
     ba4:	fd 81       	ldd	r31, Y+5	; 0x05
     ba6:	00 82       	st	Z, r0
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	9d 81       	ldd	r25, Y+5	; 0x05
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	9d 83       	std	Y+5, r25	; 0x05
     bb0:	8c 83       	std	Y+4, r24	; 0x04
     bb2:	98 85       	ldd	r25, Y+8	; 0x08
     bb4:	91 50       	subi	r25, 0x01	; 1
     bb6:	98 87       	std	Y+8, r25	; 0x08
     bb8:	e8 85       	ldd	r30, Y+8	; 0x08
     bba:	ee 23       	and	r30, r30
     bbc:	51 f7       	brne	.-44     	; 0xb92 <Airbag+0x28>
     bbe:	69 81       	ldd	r22, Y+1	; 0x01
     bc0:	7a 81       	ldd	r23, Y+2	; 0x02
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LED_voidInit>
	LED_voidON(Led1);
     bc8:	69 81       	ldd	r22, Y+1	; 0x01
     bca:	7a 81       	ldd	r23, Y+2	; 0x02
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <LED_voidON>
}
     bd2:	28 96       	adiw	r28, 0x08	; 8
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

void KPD_voidInit(void)
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	/* ROWS -> INT_PULLUP */
	DIO_enumSetPinDirection(KPD_PORT, KPD_R0, DIO_PIN_INPUT);
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	41 e0       	ldi	r20, 0x01	; 1
     bfc:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R1, DIO_PIN_INPUT);
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	41 e0       	ldi	r20, 0x01	; 1
     c10:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R2, DIO_PIN_INPUT);
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	62 e0       	ldi	r22, 0x02	; 2
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_R3, DIO_PIN_INPUT);
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	63 e0       	ldi	r22, 0x03	; 3
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	63 e0       	ldi	r22, 0x03	; 3
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	/* COLS -> OUTPUT, HIGH */
	DIO_enumSetPinDirection(KPD_PORT, KPD_C0, DIO_PIN_OUTPUT);
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	64 e0       	ldi	r22, 0x04	; 4
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	64 e0       	ldi	r22, 0x04	; 4
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C1, DIO_PIN_OUTPUT);
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	65 e0       	ldi	r22, 0x05	; 5
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	65 e0       	ldi	r22, 0x05	; 5
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C2, DIO_PIN_OUTPUT);
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	66 e0       	ldi	r22, 0x06	; 6
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	66 e0       	ldi	r22, 0x06	; 6
     c72:	41 e0       	ldi	r20, 0x01	; 1
     c74:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	DIO_enumSetPinDirection(KPD_PORT, KPD_C3, DIO_PIN_OUTPUT);
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	67 e0       	ldi	r22, 0x07	; 7
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	DIO_enumSetPinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	67 e0       	ldi	r22, 0x07	; 7
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	
	
	
}
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <KPD_u8GetPressed>:

u8 KPD_u8GetPressed(void)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	a0 97       	sbiw	r28, 0x20	; 32
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8RetVal = NOT_PRESSED;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	8d 8f       	std	Y+29, r24	; 0x1d
     cae:	27 c1       	rjmp	.+590    	; 0xefe <KPD_u8GetPressed+0x26c>
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
     cba:	1e 8e       	std	Y+30, r1	; 0x1e
     cbc:	14 c1       	rjmp	.+552    	; 0xee6 <KPD_u8GetPressed+0x254>
		{
			DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
     cbe:	9e 01       	movw	r18, r28
     cc0:	20 5e       	subi	r18, 0xE0	; 224
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	6e 8d       	ldd	r22, Y+30	; 0x1e
     cc8:	a9 01       	movw	r20, r18
     cca:	0e 94 2f 11 	call	0x225e	; 0x225e <DIO_enumGetPinValue>
			
			if(LOC_u8GetPressed == 0)
     cce:	88 a1       	ldd	r24, Y+32	; 0x20
     cd0:	88 23       	and	r24, r24
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <KPD_u8GetPressed+0x44>
     cd4:	05 c1       	rjmp	.+522    	; 0xee0 <KPD_u8GetPressed+0x24e>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a8 e4       	ldi	r26, 0x48	; 72
     cdc:	b2 e4       	ldi	r27, 0x42	; 66
     cde:	89 8f       	std	Y+25, r24	; 0x19
     ce0:	9a 8f       	std	Y+26, r25	; 0x1a
     ce2:	ab 8f       	std	Y+27, r26	; 0x1b
     ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce6:	69 8d       	ldd	r22, Y+25	; 0x19
     ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	4a ef       	ldi	r20, 0xFA	; 250
     cf4:	54 e4       	ldi	r21, 0x44	; 68
     cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	8d 8b       	std	Y+21, r24	; 0x15
     d00:	9e 8b       	std	Y+22, r25	; 0x16
     d02:	af 8b       	std	Y+23, r26	; 0x17
     d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d06:	6d 89       	ldd	r22, Y+21	; 0x15
     d08:	7e 89       	ldd	r23, Y+22	; 0x16
     d0a:	8f 89       	ldd	r24, Y+23	; 0x17
     d0c:	98 8d       	ldd	r25, Y+24	; 0x18
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e8       	ldi	r20, 0x80	; 128
     d14:	5f e3       	ldi	r21, 0x3F	; 63
     d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1a:	88 23       	and	r24, r24
     d1c:	2c f4       	brge	.+10     	; 0xd28 <KPD_u8GetPressed+0x96>
		__ticks = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	9c 8b       	std	Y+20, r25	; 0x14
     d24:	8b 8b       	std	Y+19, r24	; 0x13
     d26:	3f c0       	rjmp	.+126    	; 0xda6 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
     d28:	6d 89       	ldd	r22, Y+21	; 0x15
     d2a:	7e 89       	ldd	r23, Y+22	; 0x16
     d2c:	8f 89       	ldd	r24, Y+23	; 0x17
     d2e:	98 8d       	ldd	r25, Y+24	; 0x18
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	4f e7       	ldi	r20, 0x7F	; 127
     d36:	57 e4       	ldi	r21, 0x47	; 71
     d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3c:	18 16       	cp	r1, r24
     d3e:	4c f5       	brge	.+82     	; 0xd92 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d40:	69 8d       	ldd	r22, Y+25	; 0x19
     d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	bc 01       	movw	r22, r24
     d5a:	cd 01       	movw	r24, r26
     d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	9c 8b       	std	Y+20, r25	; 0x14
     d66:	8b 8b       	std	Y+19, r24	; 0x13
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <KPD_u8GetPressed+0xf6>
     d6a:	88 ec       	ldi	r24, 0xC8	; 200
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9a 8b       	std	Y+18, r25	; 0x12
     d70:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d72:	89 89       	ldd	r24, Y+17	; 0x11
     d74:	9a 89       	ldd	r25, Y+18	; 0x12
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <KPD_u8GetPressed+0xe4>
     d7a:	9a 8b       	std	Y+18, r25	; 0x12
     d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7e:	8b 89       	ldd	r24, Y+19	; 0x13
     d80:	9c 89       	ldd	r25, Y+20	; 0x14
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	69 f7       	brne	.-38     	; 0xd6a <KPD_u8GetPressed+0xd8>
     d90:	14 c0       	rjmp	.+40     	; 0xdba <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d92:	6d 89       	ldd	r22, Y+21	; 0x15
     d94:	7e 89       	ldd	r23, Y+22	; 0x16
     d96:	8f 89       	ldd	r24, Y+23	; 0x17
     d98:	98 8d       	ldd	r25, Y+24	; 0x18
     d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	9c 8b       	std	Y+20, r25	; 0x14
     da4:	8b 8b       	std	Y+19, r24	; 0x13
     da6:	8b 89       	ldd	r24, Y+19	; 0x13
     da8:	9c 89       	ldd	r25, Y+20	; 0x14
     daa:	98 8b       	std	Y+16, r25	; 0x10
     dac:	8f 87       	std	Y+15, r24	; 0x0f
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
     db0:	98 89       	ldd	r25, Y+16	; 0x10
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <KPD_u8GetPressed+0x120>
     db6:	98 8b       	std	Y+16, r25	; 0x10
     db8:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(50); // bouncing
				DIO_enumGetPinValue(KPD_PORT, LOC_u8ROW_Iterator, &LOC_u8GetPressed);
     dba:	9e 01       	movw	r18, r28
     dbc:	20 5e       	subi	r18, 0xE0	; 224
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     dc4:	a9 01       	movw	r20, r18
     dc6:	0e 94 2f 11 	call	0x225e	; 0x225e <DIO_enumGetPinValue>
				
				if(LOC_u8GetPressed == 0)
     dca:	88 a1       	ldd	r24, Y+32	; 0x20
     dcc:	88 23       	and	r24, r24
     dce:	a9 f4       	brne	.+42     	; 0xdfa <KPD_u8GetPressed+0x168>
				{
					LOC_u8RetVal = KPD_u8Buttons[LOC_u8ROW_Iterator - KPD_ROW_INIT][LOC_u8COL_Iterator - KPD_COL_INIT];
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	48 2f       	mov	r20, r24
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 01       	movw	r18, r24
     dde:	24 50       	subi	r18, 0x04	; 4
     de0:	30 40       	sbci	r19, 0x00	; 0
     de2:	ca 01       	movw	r24, r20
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	82 0f       	add	r24, r18
     dee:	93 1f       	adc	r25, r19
     df0:	fc 01       	movw	r30, r24
     df2:	e8 59       	subi	r30, 0x98	; 152
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	80 81       	ld	r24, Z
     df8:	8f 8f       	std	Y+31, r24	; 0x1f
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a8 e4       	ldi	r26, 0x48	; 72
     e00:	b3 e4       	ldi	r27, 0x43	; 67
     e02:	8b 87       	std	Y+11, r24	; 0x0b
     e04:	9c 87       	std	Y+12, r25	; 0x0c
     e06:	ad 87       	std	Y+13, r26	; 0x0d
     e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8f 83       	std	Y+7, r24	; 0x07
     e24:	98 87       	std	Y+8, r25	; 0x08
     e26:	a9 87       	std	Y+9, r26	; 0x09
     e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <KPD_u8GetPressed+0x1ba>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <KPD_u8GetPressed+0x238>
	else if (__tmp > 65535)
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	89 85       	ldd	r24, Y+9	; 0x09
     e52:	9a 85       	ldd	r25, Y+10	; 0x0a
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <KPD_u8GetPressed+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	6b 85       	ldd	r22, Y+11	; 0x0b
     e66:	7c 85       	ldd	r23, Y+12	; 0x0c
     e68:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <KPD_u8GetPressed+0x21a>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <KPD_u8GetPressed+0x208>
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <KPD_u8GetPressed+0x1fc>
     eb4:	1c c0       	rjmp	.+56     	; 0xeee <KPD_u8GetPressed+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <KPD_u8GetPressed+0x244>
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	07 c0       	rjmp	.+14     	; 0xeee <KPD_u8GetPressed+0x25c>
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
	{
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_LOW);
		for(LOC_u8ROW_Iterator = KPD_ROW_INIT; LOC_u8ROW_Iterator < KPD_ROW_END; LOC_u8ROW_Iterator++)
     ee0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	8e 8f       	std	Y+30, r24	; 0x1e
     ee6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	08 f4       	brcc	.+2      	; 0xeee <KPD_u8GetPressed+0x25c>
     eec:	e8 ce       	rjmp	.-560    	; 0xcbe <KPD_u8GetPressed+0x2c>
				_delay_ms(200); // if continuous pressing
				break;
			}
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ef2:	41 e0       	ldi	r20, 0x01	; 1
     ef4:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	u8 LOC_u8GetPressed;
	
	u8 LOC_u8ROW_Iterator;
	u8 LOC_u8COL_Iterator;
	
	for(LOC_u8COL_Iterator = KPD_COL_INIT; LOC_u8COL_Iterator < KPD_COL_END; LOC_u8COL_Iterator++)
     ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	8d 8f       	std	Y+29, r24	; 0x1d
     efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f00:	87 30       	cpi	r24, 0x07	; 7
     f02:	08 f4       	brcc	.+2      	; 0xf06 <KPD_u8GetPressed+0x274>
     f04:	d5 ce       	rjmp	.-598    	; 0xcb0 <KPD_u8GetPressed+0x1e>
		}
		
		DIO_enumSetPinValue(KPD_PORT, LOC_u8COL_Iterator, DIO_PIN_HIGH);
	}
	
	return LOC_u8RetVal;
     f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
     f08:	a0 96       	adiw	r28, 0x20	; 32
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "util/delay.h"

void LCD_voidInit()
{
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	c4 55       	subi	r28, 0x54	; 84
     f28:	d0 40       	sbci	r29, 0x00	; 0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(LCD_CTRL_PORT, DIO_PORT_OUTPUT);
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	0e 94 51 14 	call	0x28a2	; 0x28a2 <DIO_enumSetPortDirection>
	DIO_enumSetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	6f ef       	ldi	r22, 0xFF	; 255
     f40:	0e 94 51 14 	call	0x28a2	; 0x28a2 <DIO_enumSetPortDirection>
     f44:	fe 01       	movw	r30, r28
     f46:	ef 5a       	subi	r30, 0xAF	; 175
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 ef       	ldi	r26, 0xF0	; 240
     f50:	b1 e4       	ldi	r27, 0x41	; 65
     f52:	80 83       	st	Z, r24
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	a2 83       	std	Z+2, r26	; 0x02
     f58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5a:	8e 01       	movw	r16, r28
     f5c:	03 5b       	subi	r16, 0xB3	; 179
     f5e:	1f 4f       	sbci	r17, 0xFF	; 255
     f60:	fe 01       	movw	r30, r28
     f62:	ef 5a       	subi	r30, 0xAF	; 175
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a ef       	ldi	r20, 0xFA	; 250
     f74:	54 e4       	ldi	r21, 0x44	; 68
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	f8 01       	movw	r30, r16
     f80:	80 83       	st	Z, r24
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	a2 83       	std	Z+2, r26	; 0x02
     f86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f88:	fe 01       	movw	r30, r28
     f8a:	e3 5b       	subi	r30, 0xB3	; 179
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5f e3       	ldi	r21, 0x3F	; 63
     f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	44 f4       	brge	.+16     	; 0xfb6 <LCD_voidInit+0x9c>
		__ticks = 1;
     fa6:	fe 01       	movw	r30, r28
     fa8:	e5 5b       	subi	r30, 0xB5	; 181
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	64 c0       	rjmp	.+200    	; 0x107e <LCD_voidInit+0x164>
	else if (__tmp > 65535)
     fb6:	fe 01       	movw	r30, r28
     fb8:	e3 5b       	subi	r30, 0xB3	; 179
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	60 81       	ld	r22, Z
     fbe:	71 81       	ldd	r23, Z+1	; 0x01
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	3f ef       	ldi	r19, 0xFF	; 255
     fc8:	4f e7       	ldi	r20, 0x7F	; 127
     fca:	57 e4       	ldi	r21, 0x47	; 71
     fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd0:	18 16       	cp	r1, r24
     fd2:	0c f0       	brlt	.+2      	; 0xfd6 <LCD_voidInit+0xbc>
     fd4:	43 c0       	rjmp	.+134    	; 0x105c <LCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	fe 01       	movw	r30, r28
     fd8:	ef 5a       	subi	r30, 0xAF	; 175
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	60 81       	ld	r22, Z
     fde:	71 81       	ldd	r23, Z+1	; 0x01
     fe0:	82 81       	ldd	r24, Z+2	; 0x02
     fe2:	93 81       	ldd	r25, Z+3	; 0x03
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e2       	ldi	r20, 0x20	; 32
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8e 01       	movw	r16, r28
     ff6:	05 5b       	subi	r16, 0xB5	; 181
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	f8 01       	movw	r30, r16
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
    100c:	1f c0       	rjmp	.+62     	; 0x104c <LCD_voidInit+0x132>
    100e:	fe 01       	movw	r30, r28
    1010:	e7 5b       	subi	r30, 0xB7	; 183
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	88 ec       	ldi	r24, 0xC8	; 200
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	80 83       	st	Z, r24
    101c:	fe 01       	movw	r30, r28
    101e:	e7 5b       	subi	r30, 0xB7	; 183
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <LCD_voidInit+0x10c>
    102a:	fe 01       	movw	r30, r28
    102c:	e7 5b       	subi	r30, 0xB7	; 183
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	91 83       	std	Z+1, r25	; 0x01
    1032:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	de 01       	movw	r26, r28
    1036:	a5 5b       	subi	r26, 0xB5	; 181
    1038:	bf 4f       	sbci	r27, 0xFF	; 255
    103a:	fe 01       	movw	r30, r28
    103c:	e5 5b       	subi	r30, 0xB5	; 181
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	9c 93       	st	X, r25
    104a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	fe 01       	movw	r30, r28
    104e:	e5 5b       	subi	r30, 0xB5	; 181
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	d1 f6       	brne	.-76     	; 0x100e <LCD_voidInit+0xf4>
    105a:	27 c0       	rjmp	.+78     	; 0x10aa <LCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105c:	8e 01       	movw	r16, r28
    105e:	05 5b       	subi	r16, 0xB5	; 181
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	fe 01       	movw	r30, r28
    1064:	e3 5b       	subi	r30, 0xB3	; 179
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	f8 01       	movw	r30, r16
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
    107e:	de 01       	movw	r26, r28
    1080:	a9 5b       	subi	r26, 0xB9	; 185
    1082:	bf 4f       	sbci	r27, 0xFF	; 255
    1084:	fe 01       	movw	r30, r28
    1086:	e5 5b       	subi	r30, 0xB5	; 181
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	8d 93       	st	X+, r24
    1090:	9c 93       	st	X, r25
    1092:	fe 01       	movw	r30, r28
    1094:	e9 5b       	subi	r30, 0xB9	; 185
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <LCD_voidInit+0x182>
    10a0:	fe 01       	movw	r30, r28
    10a2:	e9 5b       	subi	r30, 0xB9	; 185
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24
	//DIO_enumSetPortValue(LCD_CTRL_PORT, DIO_PORT_HIGH);
	_delay_ms(30);

	LCD_voidSendCommand(LCD_HOME);
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidSendCommand>
    10b0:	fe 01       	movw	r30, r28
    10b2:	ed 5b       	subi	r30, 0xBD	; 189
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a0 e8       	ldi	r26, 0x80	; 128
    10bc:	bf e3       	ldi	r27, 0x3F	; 63
    10be:	80 83       	st	Z, r24
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	8e 01       	movw	r16, r28
    10c8:	01 5c       	subi	r16, 0xC1	; 193
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
    10cc:	fe 01       	movw	r30, r28
    10ce:	ed 5b       	subi	r30, 0xBD	; 189
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a ef       	ldi	r20, 0xFA	; 250
    10e0:	54 e4       	ldi	r21, 0x44	; 68
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	f8 01       	movw	r30, r16
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f4:	fe 01       	movw	r30, r28
    10f6:	ff 96       	adiw	r30, 0x3f	; 63
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <LCD_voidInit+0x200>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9e af       	std	Y+62, r25	; 0x3e
    1116:	8d af       	std	Y+61, r24	; 0x3d
    1118:	46 c0       	rjmp	.+140    	; 0x11a6 <LCD_voidInit+0x28c>
	else if (__tmp > 65535)
    111a:	fe 01       	movw	r30, r28
    111c:	ff 96       	adiw	r30, 0x3f	; 63
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	3f ef       	ldi	r19, 0xFF	; 255
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	57 e4       	ldi	r21, 0x47	; 71
    112e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1132:	18 16       	cp	r1, r24
    1134:	64 f5       	brge	.+88     	; 0x118e <LCD_voidInit+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1136:	fe 01       	movw	r30, r28
    1138:	ed 5b       	subi	r30, 0xBD	; 189
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	60 81       	ld	r22, Z
    113e:	71 81       	ldd	r23, Z+1	; 0x01
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e2       	ldi	r20, 0x20	; 32
    114a:	51 e4       	ldi	r21, 0x41	; 65
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e af       	std	Y+62, r25	; 0x3e
    1162:	8d af       	std	Y+61, r24	; 0x3d
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <LCD_voidInit+0x26a>
    1166:	88 ec       	ldi	r24, 0xC8	; 200
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9c af       	std	Y+60, r25	; 0x3c
    116c:	8b af       	std	Y+59, r24	; 0x3b
    116e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1170:	9c ad       	ldd	r25, Y+60	; 0x3c
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <LCD_voidInit+0x258>
    1176:	9c af       	std	Y+60, r25	; 0x3c
    1178:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	8d ad       	ldd	r24, Y+61	; 0x3d
    117c:	9e ad       	ldd	r25, Y+62	; 0x3e
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9e af       	std	Y+62, r25	; 0x3e
    1182:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1184:	8d ad       	ldd	r24, Y+61	; 0x3d
    1186:	9e ad       	ldd	r25, Y+62	; 0x3e
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	69 f7       	brne	.-38     	; 0x1166 <LCD_voidInit+0x24c>
    118c:	16 c0       	rjmp	.+44     	; 0x11ba <LCD_voidInit+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118e:	fe 01       	movw	r30, r28
    1190:	ff 96       	adiw	r30, 0x3f	; 63
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9e af       	std	Y+62, r25	; 0x3e
    11a4:	8d af       	std	Y+61, r24	; 0x3d
    11a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11aa:	9a af       	std	Y+58, r25	; 0x3a
    11ac:	89 af       	std	Y+57, r24	; 0x39
    11ae:	89 ad       	ldd	r24, Y+57	; 0x39
    11b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <LCD_voidInit+0x298>
    11b6:	9a af       	std	Y+58, r25	; 0x3a
    11b8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	LCD_voidSendCommand(0X38);
    11ba:	88 e3       	ldi	r24, 0x38	; 56
    11bc:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidSendCommand>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e8       	ldi	r26, 0x80	; 128
    11c6:	bf e3       	ldi	r27, 0x3F	; 63
    11c8:	8d ab       	std	Y+53, r24	; 0x35
    11ca:	9e ab       	std	Y+54, r25	; 0x36
    11cc:	af ab       	std	Y+55, r26	; 0x37
    11ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d0:	6d a9       	ldd	r22, Y+53	; 0x35
    11d2:	7e a9       	ldd	r23, Y+54	; 0x36
    11d4:	8f a9       	ldd	r24, Y+55	; 0x37
    11d6:	98 ad       	ldd	r25, Y+56	; 0x38
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	4a ef       	ldi	r20, 0xFA	; 250
    11de:	54 e4       	ldi	r21, 0x44	; 68
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	89 ab       	std	Y+49, r24	; 0x31
    11ea:	9a ab       	std	Y+50, r25	; 0x32
    11ec:	ab ab       	std	Y+51, r26	; 0x33
    11ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11f0:	69 a9       	ldd	r22, Y+49	; 0x31
    11f2:	7a a9       	ldd	r23, Y+50	; 0x32
    11f4:	8b a9       	ldd	r24, Y+51	; 0x33
    11f6:	9c a9       	ldd	r25, Y+52	; 0x34
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1204:	88 23       	and	r24, r24
    1206:	2c f4       	brge	.+10     	; 0x1212 <LCD_voidInit+0x2f8>
		__ticks = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	98 ab       	std	Y+48, r25	; 0x30
    120e:	8f a7       	std	Y+47, r24	; 0x2f
    1210:	3f c0       	rjmp	.+126    	; 0x1290 <LCD_voidInit+0x376>
	else if (__tmp > 65535)
    1212:	69 a9       	ldd	r22, Y+49	; 0x31
    1214:	7a a9       	ldd	r23, Y+50	; 0x32
    1216:	8b a9       	ldd	r24, Y+51	; 0x33
    1218:	9c a9       	ldd	r25, Y+52	; 0x34
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	3f ef       	ldi	r19, 0xFF	; 255
    121e:	4f e7       	ldi	r20, 0x7F	; 127
    1220:	57 e4       	ldi	r21, 0x47	; 71
    1222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1226:	18 16       	cp	r1, r24
    1228:	4c f5       	brge	.+82     	; 0x127c <LCD_voidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122a:	6d a9       	ldd	r22, Y+53	; 0x35
    122c:	7e a9       	ldd	r23, Y+54	; 0x36
    122e:	8f a9       	ldd	r24, Y+55	; 0x37
    1230:	98 ad       	ldd	r25, Y+56	; 0x38
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	98 ab       	std	Y+48, r25	; 0x30
    1250:	8f a7       	std	Y+47, r24	; 0x2f
    1252:	0f c0       	rjmp	.+30     	; 0x1272 <LCD_voidInit+0x358>
    1254:	88 ec       	ldi	r24, 0xC8	; 200
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9e a7       	std	Y+46, r25	; 0x2e
    125a:	8d a7       	std	Y+45, r24	; 0x2d
    125c:	8d a5       	ldd	r24, Y+45	; 0x2d
    125e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <LCD_voidInit+0x346>
    1264:	9e a7       	std	Y+46, r25	; 0x2e
    1266:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1268:	8f a5       	ldd	r24, Y+47	; 0x2f
    126a:	98 a9       	ldd	r25, Y+48	; 0x30
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	69 f7       	brne	.-38     	; 0x1254 <LCD_voidInit+0x33a>
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <LCD_voidInit+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127c:	69 a9       	ldd	r22, Y+49	; 0x31
    127e:	7a a9       	ldd	r23, Y+50	; 0x32
    1280:	8b a9       	ldd	r24, Y+51	; 0x33
    1282:	9c a9       	ldd	r25, Y+52	; 0x34
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	98 ab       	std	Y+48, r25	; 0x30
    128e:	8f a7       	std	Y+47, r24	; 0x2f
    1290:	8f a5       	ldd	r24, Y+47	; 0x2f
    1292:	98 a9       	ldd	r25, Y+48	; 0x30
    1294:	9c a7       	std	Y+44, r25	; 0x2c
    1296:	8b a7       	std	Y+43, r24	; 0x2b
    1298:	8b a5       	ldd	r24, Y+43	; 0x2b
    129a:	9c a5       	ldd	r25, Y+44	; 0x2c
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LCD_voidInit+0x382>
    12a0:	9c a7       	std	Y+44, r25	; 0x2c
    12a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    12a4:	8c e0       	ldi	r24, 0x0C	; 12
    12a6:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidSendCommand>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e8       	ldi	r26, 0x80	; 128
    12b0:	bf e3       	ldi	r27, 0x3F	; 63
    12b2:	8f a3       	std	Y+39, r24	; 0x27
    12b4:	98 a7       	std	Y+40, r25	; 0x28
    12b6:	a9 a7       	std	Y+41, r26	; 0x29
    12b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ba:	6f a1       	ldd	r22, Y+39	; 0x27
    12bc:	78 a5       	ldd	r23, Y+40	; 0x28
    12be:	89 a5       	ldd	r24, Y+41	; 0x29
    12c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a ef       	ldi	r20, 0xFA	; 250
    12c8:	54 e4       	ldi	r21, 0x44	; 68
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8b a3       	std	Y+35, r24	; 0x23
    12d4:	9c a3       	std	Y+36, r25	; 0x24
    12d6:	ad a3       	std	Y+37, r26	; 0x25
    12d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12da:	6b a1       	ldd	r22, Y+35	; 0x23
    12dc:	7c a1       	ldd	r23, Y+36	; 0x24
    12de:	8d a1       	ldd	r24, Y+37	; 0x25
    12e0:	9e a1       	ldd	r25, Y+38	; 0x26
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <LCD_voidInit+0x3e2>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9a a3       	std	Y+34, r25	; 0x22
    12f8:	89 a3       	std	Y+33, r24	; 0x21
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <LCD_voidInit+0x460>
	else if (__tmp > 65535)
    12fc:	6b a1       	ldd	r22, Y+35	; 0x23
    12fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1300:	8d a1       	ldd	r24, Y+37	; 0x25
    1302:	9e a1       	ldd	r25, Y+38	; 0x26
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <LCD_voidInit+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	6f a1       	ldd	r22, Y+39	; 0x27
    1316:	78 a5       	ldd	r23, Y+40	; 0x28
    1318:	89 a5       	ldd	r24, Y+41	; 0x29
    131a:	9a a5       	ldd	r25, Y+42	; 0x2a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9a a3       	std	Y+34, r25	; 0x22
    133a:	89 a3       	std	Y+33, r24	; 0x21
    133c:	0f c0       	rjmp	.+30     	; 0x135c <LCD_voidInit+0x442>
    133e:	88 ec       	ldi	r24, 0xC8	; 200
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	98 a3       	std	Y+32, r25	; 0x20
    1344:	8f 8f       	std	Y+31, r24	; 0x1f
    1346:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1348:	98 a1       	ldd	r25, Y+32	; 0x20
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <LCD_voidInit+0x430>
    134e:	98 a3       	std	Y+32, r25	; 0x20
    1350:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	89 a1       	ldd	r24, Y+33	; 0x21
    1354:	9a a1       	ldd	r25, Y+34	; 0x22
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9a a3       	std	Y+34, r25	; 0x22
    135a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	89 a1       	ldd	r24, Y+33	; 0x21
    135e:	9a a1       	ldd	r25, Y+34	; 0x22
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f7       	brne	.-38     	; 0x133e <LCD_voidInit+0x424>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <LCD_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1366:	6b a1       	ldd	r22, Y+35	; 0x23
    1368:	7c a1       	ldd	r23, Y+36	; 0x24
    136a:	8d a1       	ldd	r24, Y+37	; 0x25
    136c:	9e a1       	ldd	r25, Y+38	; 0x26
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9a a3       	std	Y+34, r25	; 0x22
    1378:	89 a3       	std	Y+33, r24	; 0x21
    137a:	89 a1       	ldd	r24, Y+33	; 0x21
    137c:	9a a1       	ldd	r25, Y+34	; 0x22
    137e:	9e 8f       	std	Y+30, r25	; 0x1e
    1380:	8d 8f       	std	Y+29, r24	; 0x1d
    1382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1384:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <LCD_voidInit+0x46c>
    138a:	9e 8f       	std	Y+30, r25	; 0x1e
    138c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidSendCommand(LCD_CLEAR);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidSendCommand>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e4       	ldi	r27, 0x40	; 64
    139c:	89 8f       	std	Y+25, r24	; 0x19
    139e:	9a 8f       	std	Y+26, r25	; 0x1a
    13a0:	ab 8f       	std	Y+27, r26	; 0x1b
    13a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a4:	69 8d       	ldd	r22, Y+25	; 0x19
    13a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4a ef       	ldi	r20, 0xFA	; 250
    13b2:	54 e4       	ldi	r21, 0x44	; 68
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8d 8b       	std	Y+21, r24	; 0x15
    13be:	9e 8b       	std	Y+22, r25	; 0x16
    13c0:	af 8b       	std	Y+23, r26	; 0x17
    13c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c4:	6d 89       	ldd	r22, Y+21	; 0x15
    13c6:	7e 89       	ldd	r23, Y+22	; 0x16
    13c8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ca:	98 8d       	ldd	r25, Y+24	; 0x18
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e8       	ldi	r20, 0x80	; 128
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d8:	88 23       	and	r24, r24
    13da:	2c f4       	brge	.+10     	; 0x13e6 <LCD_voidInit+0x4cc>
		__ticks = 1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 8b       	std	Y+20, r25	; 0x14
    13e2:	8b 8b       	std	Y+19, r24	; 0x13
    13e4:	3f c0       	rjmp	.+126    	; 0x1464 <LCD_voidInit+0x54a>
	else if (__tmp > 65535)
    13e6:	6d 89       	ldd	r22, Y+21	; 0x15
    13e8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ea:	8f 89       	ldd	r24, Y+23	; 0x17
    13ec:	98 8d       	ldd	r25, Y+24	; 0x18
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	57 e4       	ldi	r21, 0x47	; 71
    13f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fa:	18 16       	cp	r1, r24
    13fc:	4c f5       	brge	.+82     	; 0x1450 <LCD_voidInit+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e2       	ldi	r20, 0x20	; 32
    140c:	51 e4       	ldi	r21, 0x41	; 65
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <LCD_voidInit+0x52c>
    1428:	88 ec       	ldi	r24, 0xC8	; 200
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9a 8b       	std	Y+18, r25	; 0x12
    142e:	89 8b       	std	Y+17, r24	; 0x11
    1430:	89 89       	ldd	r24, Y+17	; 0x11
    1432:	9a 89       	ldd	r25, Y+18	; 0x12
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <LCD_voidInit+0x51a>
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	9c 8b       	std	Y+20, r25	; 0x14
    1444:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1446:	8b 89       	ldd	r24, Y+19	; 0x13
    1448:	9c 89       	ldd	r25, Y+20	; 0x14
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	69 f7       	brne	.-38     	; 0x1428 <LCD_voidInit+0x50e>
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <LCD_voidInit+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1450:	6d 89       	ldd	r22, Y+21	; 0x15
    1452:	7e 89       	ldd	r23, Y+22	; 0x16
    1454:	8f 89       	ldd	r24, Y+23	; 0x17
    1456:	98 8d       	ldd	r25, Y+24	; 0x18
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	98 8b       	std	Y+16, r25	; 0x10
    146a:	8f 87       	std	Y+15, r24	; 0x0f
    146c:	8f 85       	ldd	r24, Y+15	; 0x0f
    146e:	98 89       	ldd	r25, Y+16	; 0x10
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <LCD_voidInit+0x556>
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidSendCommand(LCD_ENTRY_MODE);
    1478:	86 e0       	ldi	r24, 0x06	; 6
    147a:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidSendCommand>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e8       	ldi	r26, 0x80	; 128
    1484:	bf e3       	ldi	r27, 0x3F	; 63
    1486:	8b 87       	std	Y+11, r24	; 0x0b
    1488:	9c 87       	std	Y+12, r25	; 0x0c
    148a:	ad 87       	std	Y+13, r26	; 0x0d
    148c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1490:	7c 85       	ldd	r23, Y+12	; 0x0c
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	4a ef       	ldi	r20, 0xFA	; 250
    149c:	54 e4       	ldi	r21, 0x44	; 68
    149e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	8f 83       	std	Y+7, r24	; 0x07
    14a8:	98 87       	std	Y+8, r25	; 0x08
    14aa:	a9 87       	std	Y+9, r26	; 0x09
    14ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ae:	6f 81       	ldd	r22, Y+7	; 0x07
    14b0:	78 85       	ldd	r23, Y+8	; 0x08
    14b2:	89 85       	ldd	r24, Y+9	; 0x09
    14b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e8       	ldi	r20, 0x80	; 128
    14bc:	5f e3       	ldi	r21, 0x3F	; 63
    14be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c2:	88 23       	and	r24, r24
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <LCD_voidInit+0x5b6>
		__ticks = 1;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	3f c0       	rjmp	.+126    	; 0x154e <LCD_voidInit+0x634>
	else if (__tmp > 65535)
    14d0:	6f 81       	ldd	r22, Y+7	; 0x07
    14d2:	78 85       	ldd	r23, Y+8	; 0x08
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	3f ef       	ldi	r19, 0xFF	; 255
    14dc:	4f e7       	ldi	r20, 0x7F	; 127
    14de:	57 e4       	ldi	r21, 0x47	; 71
    14e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e4:	18 16       	cp	r1, r24
    14e6:	4c f5       	brge	.+82     	; 0x153a <LCD_voidInit+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e2       	ldi	r20, 0x20	; 32
    14f6:	51 e4       	ldi	r21, 0x41	; 65
    14f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	8d 83       	std	Y+5, r24	; 0x05
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <LCD_voidInit+0x616>
    1512:	88 ec       	ldi	r24, 0xC8	; 200
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <LCD_voidInit+0x604>
    1522:	9c 83       	std	Y+4, r25	; 0x04
    1524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	69 f7       	brne	.-38     	; 0x1512 <LCD_voidInit+0x5f8>
    1538:	14 c0       	rjmp	.+40     	; 0x1562 <LCD_voidInit+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_voidInit+0x640>
    155e:	9a 83       	std	Y+2, r25	; 0x02
    1560:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1562:	cc 5a       	subi	r28, 0xAC	; 172
    1564:	df 4f       	sbci	r29, 0xFF	; 255
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortValue(LCD_DATA_PORT, command);
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	69 81       	ldd	r22, Y+1	; 0x01
    158a:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_enumSetPortValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_LOW);
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>

	//Send Pulse
	LCD_voidSendPulse();
    15a2:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_voidSendPulse>
}
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_HIGH);
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	DIO_enumSetPortValue(LCD_DATA_PORT, data);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	69 81       	ldd	r22, Y+1	; 0x01
    15d2:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_enumSetPortValue>

	//Send Pulse
	LCD_voidSendPulse();
    15d6:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_voidSendPulse>
}
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <LCD_voidSetCursorPosition>:

void LCD_voidSetCursorPosition(u8 row, u8 col)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <LCD_voidSetCursorPosition+0x6>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 pos;
	if(row == 1)
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	21 f4       	brne	.+8      	; 0x1600 <LCD_voidSetCursorPosition+0x1e>
		pos = LCD_CURSOR + (col - 1);
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	81 58       	subi	r24, 0x81	; 129
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <LCD_voidSetCursorPosition+0x24>
	else
		pos = LCD_CURSOR + (col - 1) + 64;
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	81 54       	subi	r24, 0x41	; 65
    1604:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(pos);
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	0e 94 bd 0a 	call	0x157a	; 0x157a <LCD_voidSendCommand>
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <LCD_voidSendString>:

void LCD_voidSendString(u8* str)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <LCD_voidSendString+0x6>
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9b 83       	std	Y+3, r25	; 0x03
    1626:	8a 83       	std	Y+2, r24	; 0x02
	u8 ptr = 0;
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	0e c0       	rjmp	.+28     	; 0x1648 <LCD_voidSendString+0x30>
	while(str[ptr] != '\0')
	{
		LCD_voidSendData(str[ptr]);
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	fc 01       	movw	r30, r24
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	80 81       	ld	r24, Z
    163e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_voidSendData>
		ptr++;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	8f 5f       	subi	r24, 0xFF	; 255
    1646:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8* str)
{
	u8 ptr = 0;
	while(str[ptr] != '\0')
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	fc 01       	movw	r30, r24
    1654:	e2 0f       	add	r30, r18
    1656:	f3 1f       	adc	r31, r19
    1658:	80 81       	ld	r24, Z
    165a:	88 23       	and	r24, r24
    165c:	39 f7       	brne	.-50     	; 0x162c <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[ptr]);
		ptr++;
	}
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LCD_voidSendPulse>:
static void LCD_voidSendPulse()
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	2e 97       	sbiw	r28, 0x0e	; 14
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_HIGH);
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e8       	ldi	r26, 0x80	; 128
    168e:	bf e3       	ldi	r27, 0x3F	; 63
    1690:	8b 87       	std	Y+11, r24	; 0x0b
    1692:	9c 87       	std	Y+12, r25	; 0x0c
    1694:	ad 87       	std	Y+13, r26	; 0x0d
    1696:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6b 85       	ldd	r22, Y+11	; 0x0b
    169a:	7c 85       	ldd	r23, Y+12	; 0x0c
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a ef       	ldi	r20, 0xFA	; 250
    16a6:	54 e4       	ldi	r21, 0x44	; 68
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8f 83       	std	Y+7, r24	; 0x07
    16b2:	98 87       	std	Y+8, r25	; 0x08
    16b4:	a9 87       	std	Y+9, r26	; 0x09
    16b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <LCD_voidSendPulse+0x70>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <LCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <LCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	0f c0       	rjmp	.+30     	; 0x173a <LCD_voidSendPulse+0xd0>
    171c:	88 ec       	ldi	r24, 0xC8	; 200
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <LCD_voidSendPulse+0xbe>
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <LCD_voidSendPulse+0xb2>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <LCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_voidSendPulse+0xfa>
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_LOW);
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	62 e0       	ldi	r22, 0x02	; 2
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>

}
    1776:	2e 96       	adiw	r28, 0x0e	; 14
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <SSD_voidInit>:
#include "SSD_config.h"

static u8 Local_u8SSDNums[10] = SSD_ArrNums;

void SSD_voidInit(SSD_Type SSD_Configuration)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <SSD_voidInit+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <SSD_voidInit+0x8>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	69 83       	std	Y+1, r22	; 0x01
    1796:	7a 83       	std	Y+2, r23	; 0x02
    1798:	8b 83       	std	Y+3, r24	; 0x03
    179a:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection (SSD_Configuration.DataPort, DIO_PORT_OUTPUT);
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	6f ef       	ldi	r22, 0xFF	; 255
    17a0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <DIO_enumSetPortDirection>
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <SSD_voidSendNumber>:

void SSD_voidSendNumber(SSD_Type SSD_Configuration, u8 Copy_u8Number)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <SSD_voidSendNumber+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <SSD_voidSendNumber+0x8>
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	69 83       	std	Y+1, r22	; 0x01
    17c2:	7a 83       	std	Y+2, r23	; 0x02
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	4d 83       	std	Y+5, r20	; 0x05
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	88 23       	and	r24, r24
    17ce:	69 f4       	brne	.+26     	; 0x17ea <SSD_voidSendNumber+0x38>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, Local_u8SSDNums[Copy_u8Number] );
    17d0:	2a 81       	ldd	r18, Y+2	; 0x02
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	fc 01       	movw	r30, r24
    17da:	e8 58       	subi	r30, 0x88	; 136
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	90 81       	ld	r25, Z
    17e0:	82 2f       	mov	r24, r18
    17e2:	69 2f       	mov	r22, r25
    17e4:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_enumSetPortValue>
    17e8:	11 c0       	rjmp	.+34     	; 0x180c <SSD_voidSendNumber+0x5a>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	71 f4       	brne	.+28     	; 0x180c <SSD_voidSendNumber+0x5a>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, ~Local_u8SSDNums[Copy_u8Number]);
    17f0:	2a 81       	ldd	r18, Y+2	; 0x02
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	fc 01       	movw	r30, r24
    17fa:	e8 58       	subi	r30, 0x88	; 136
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	98 2f       	mov	r25, r24
    1802:	90 95       	com	r25
    1804:	82 2f       	mov	r24, r18
    1806:	69 2f       	mov	r22, r25
    1808:	0e 94 9e 14 	call	0x293c	; 0x293c <DIO_enumSetPortValue>
	}
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <SSD_voidEnable>:

void SSD_voidEnable(SSD_Type SSD_Configuration)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <SSD_voidEnable+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <SSD_voidEnable+0x8>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	69 83       	std	Y+1, r22	; 0x01
    182a:	7a 83       	std	Y+2, r23	; 0x02
    182c:	8b 83       	std	Y+3, r24	; 0x03
    182e:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	69 2f       	mov	r22, r25
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	88 23       	and	r24, r24
    1840:	39 f4       	brne	.+14     	; 0x1850 <SSD_voidEnable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	69 2f       	mov	r22, r25
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <SSD_voidEnable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	31 f4       	brne	.+12     	; 0x1862 <SSD_voidEnable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	69 2f       	mov	r22, r25
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	}
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <SSD_voidDisable>:

void SSD_voidDisable(SSD_Type SSD_Configuration)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <SSD_voidDisable+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <SSD_voidDisable+0x8>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	69 83       	std	Y+1, r22	; 0x01
    187e:	7a 83       	std	Y+2, r23	; 0x02
    1880:	8b 83       	std	Y+3, r24	; 0x03
    1882:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	69 2f       	mov	r22, r25
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	88 23       	and	r24, r24
    1894:	39 f4       	brne	.+14     	; 0x18a4 <SSD_voidDisable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	69 2f       	mov	r22, r25
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <SSD_voidDisable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	31 f4       	brne	.+12     	; 0x18b6 <SSD_voidDisable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	69 2f       	mov	r22, r25
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	}
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <SW_voidInit>:
#include "SW_interface.h"
#include "SW_config.h"
#include "SW_private.h"

void SW_voidInit(SW_Type SW_Config)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <SW_voidInit+0x6>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	69 83       	std	Y+1, r22	; 0x01
    18d2:	7a 83       	std	Y+2, r23	; 0x02
    18d4:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(SW_Config.PORT, SW_Config.PIN, DIO_PIN_INPUT);
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	69 2f       	mov	r22, r25
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
	if(SW_Config.PULL_STATE == SW_INT_PULL_UP)
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 23       	and	r24, r24
    18e6:	31 f4       	brne	.+12     	; 0x18f4 <SW_voidInit+0x30>
		DIO_enumSetPinValue(SW_Config.PORT, SW_Config.PIN, DIO_PIN_OUTPUT);
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	69 2f       	mov	r22, r25
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <SW_u8GetPressed>:

u8 SW_u8GetPressed (SW_Type SW_Config){
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <SW_u8GetPressed+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <SW_u8GetPressed+0x8>
    1908:	0f 92       	push	r0
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	6b 83       	std	Y+3, r22	; 0x03
    1910:	7c 83       	std	Y+4, r23	; 0x04
    1912:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    1914:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    1916:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.PULL_STATE == SW_INT_PULL_UP) || (SW_Config.PULL_STATE == SW_EXT_PULL_UP) )
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	88 23       	and	r24, r24
    191c:	19 f0       	breq	.+6      	; 0x1924 <SW_u8GetPressed+0x24>
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	a1 f4       	brne	.+40     	; 0x194c <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	9e 01       	movw	r18, r28
    192a:	2e 5f       	subi	r18, 0xFE	; 254
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	69 2f       	mov	r22, r25
    1930:	a9 01       	movw	r20, r18
    1932:	0e 94 2f 11 	call	0x225e	; 0x225e <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	88 23       	and	r24, r24
    193a:	19 f4       	brne	.+6      	; 0x1942 <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	1b c0       	rjmp	.+54     	; 0x1978 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	c1 f4       	brne	.+48     	; 0x1978 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1948:	19 82       	std	Y+1, r1	; 0x01
    194a:	16 c0       	rjmp	.+44     	; 0x1978 <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.PULL_STATE == SW_EXT_PULL_DOWN)
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	99 f4       	brne	.+38     	; 0x1978 <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.PORT , SW_Config.PIN , &LOC_u8PinVal );
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	9e 01       	movw	r18, r28
    1958:	2e 5f       	subi	r18, 0xFE	; 254
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	69 2f       	mov	r22, r25
    195e:	a9 01       	movw	r20, r18
    1960:	0e 94 2f 11 	call	0x225e	; 0x225e <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	88 23       	and	r24, r24
    1968:	11 f4       	brne	.+4      	; 0x196e <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    196a:	19 82       	std	Y+1, r1	; 0x01
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	11 f4       	brne	.+4      	; 0x1978 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <BUZ_voidInit>:


#include "BUZ_interface.h"

void BUZ_voidInit(BUZ_Type BUZ_Configuration)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <BUZ_voidInit+0x6>
    1990:	0f 92       	push	r0
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	69 83       	std	Y+1, r22	; 0x01
    1998:	7a 83       	std	Y+2, r23	; 0x02
    199a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_OUTPUT);
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	69 2f       	mov	r22, r25
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <BUZ_voidON>:

void BUZ_voidON(BUZ_Type BUZ_Configuration)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <BUZ_voidON+0x6>
    19ba:	0f 92       	push	r0
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	69 83       	std	Y+1, r22	; 0x01
    19c2:	7a 83       	std	Y+2, r23	; 0x02
    19c4:	8b 83       	std	Y+3, r24	; 0x03
	if(BUZ_Configuration.Active_State == ACTIVE_HIGH)
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	39 f4       	brne	.+14     	; 0x19da <BUZ_voidON+0x26>
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_HIGH);
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	69 2f       	mov	r22, r25
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <BUZ_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, DIO_PIN_LOW);
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	69 2f       	mov	r22, r25
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	}
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <BUZ_voidOff>:

void BUZ_voidOff ( BUZ_Type BUZ_Configuration )
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <BUZ_voidOff+0x6>
    19f8:	0f 92       	push	r0
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	69 83       	std	Y+1, r22	; 0x01
    1a00:	7a 83       	std	Y+2, r23	; 0x02
    1a02:	8b 83       	std	Y+3, r24	; 0x03

	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	39 f4       	brne	.+14     	; 0x1a18 <BUZ_voidOff+0x26>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	69 2f       	mov	r22, r25
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <BUZ_voidOff+0x38>

	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 23       	and	r24, r24
    1a1c:	31 f4       	brne	.+12     	; 0x1a2a <BUZ_voidOff+0x38>

		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH  );
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	69 2f       	mov	r22, r25
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>

	}

}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <BUZ_voidToggle>:


void BUZ_voidToggle(BUZ_Type BUZ_Configuration)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <BUZ_voidToggle+0x6>
    1a3c:	0f 92       	push	r0
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	69 83       	std	Y+1, r22	; 0x01
    1a44:	7a 83       	std	Y+2, r23	; 0x02
    1a46:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin);
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	69 2f       	mov	r22, r25
    1a4e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <DIO_enumTogglePinValue>
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <LED_voidInit>:
#include "LED_interface.h"



void LED_voidInit(LED_Type LED_Configuration)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <LED_voidInit+0x6>
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	69 83       	std	Y+1, r22	; 0x01
    1a6c:	7a 83       	std	Y+2, r23	; 0x02
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_OUTPUT);
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	69 2f       	mov	r22, r25
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_enumSetPinDirection>
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <LED_voidON>:

void LED_voidON(LED_Type LED_Configuration)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <LED_voidON+0x6>
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	69 83       	std	Y+1, r22	; 0x01
    1a96:	7a 83       	std	Y+2, r23	; 0x02
    1a98:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	39 f4       	brne	.+14     	; 0x1aae <LED_voidON+0x26>
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_HIGH);
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	69 2f       	mov	r22, r25
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <LED_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_LOW);
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	69 2f       	mov	r22, r25
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
	}
}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <LED_voidOff>:

void LED_voidOff ( LED_Type LED_Configuration )
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <LED_voidOff+0x6>
    1acc:	0f 92       	push	r0
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	69 83       	std	Y+1, r22	; 0x01
    1ad4:	7a 83       	std	Y+2, r23	; 0x02
    1ad6:	8b 83       	std	Y+3, r24	; 0x03

	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	39 f4       	brne	.+14     	; 0x1aec <LED_voidOff+0x26>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_LOW  );
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	69 2f       	mov	r22, r25
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <LED_voidOff+0x38>

	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	88 23       	and	r24, r24
    1af0:	31 f4       	brne	.+12     	; 0x1afe <LED_voidOff+0x38>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_HIGH  );
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	69 2f       	mov	r22, r25
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 20 10 	call	0x2040	; 0x2040 <DIO_enumSetPinValue>

	}

}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <LED_voidToggle>:


void LED_voidToggle(LED_Type LED_Configuration)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <LED_voidToggle+0x6>
    1b10:	0f 92       	push	r0
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	69 83       	std	Y+1, r22	; 0x01
    1b18:	7a 83       	std	Y+2, r23	; 0x02
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.port, LED_Configuration.pin);
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	69 2f       	mov	r22, r25
    1b22:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <DIO_enumTogglePinValue>
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <GIE_voidEnable>:
#include "../../4-LIB/BIT_MATH.h"
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(void)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I_Bit);
    1b3a:	af e5       	ldi	r26, 0x5F	; 95
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	ef e5       	ldi	r30, 0x5F	; 95
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	80 68       	ori	r24, 0x80	; 128
    1b46:	8c 93       	st	X, r24
}
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, I_Bit);
    1b56:	af e5       	ldi	r26, 0x5F	; 95
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ef e5       	ldi	r30, 0x5F	; 95
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	8f 77       	andi	r24, 0x7F	; 127
    1b62:	8c 93       	st	X, r24
}
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <EXTI_Init>:
void (* ptr3)();



void EXTI_Init(void)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR_Register, ISC01);
#elif EXTI0_MODE == EXTI_FALLING
	CLR_BIT(MCUCR_Register, ISC00);
	SET_BIT(MCUCR_Register, ISC01);
#elif EXTI0_MODE == EXTI_RISING
	SET_BIT(MCUCR_Register, ISC00);
    1b72:	a5 e5       	ldi	r26, 0x55	; 85
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e5 e5       	ldi	r30, 0x55	; 85
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register, ISC01);
    1b80:	a5 e5       	ldi	r26, 0x55	; 85
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e5 e5       	ldi	r30, 0x55	; 85
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	82 60       	ori	r24, 0x02	; 2
    1b8c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_Register, ISC11);
#elif EXTI1_MODE == EXTI_ON_CHANGE
	SET_BIT(MCUCR_Register, ISC10);
	CLR_BIT(MCUCR_Register, ISC11);
#elif EXTI1_MODE == EXTI_FALLING
	CLR_BIT(MCUCR_Register, ISC10);
    1b8e:	a5 e5       	ldi	r26, 0x55	; 85
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e5 e5       	ldi	r30, 0x55	; 85
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	8b 7f       	andi	r24, 0xFB	; 251
    1b9a:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register, ISC11);
    1b9c:	a5 e5       	ldi	r26, 0x55	; 85
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e5 e5       	ldi	r30, 0x55	; 85
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 60       	ori	r24, 0x08	; 8
    1ba8:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register, ISC10);
	SET_BIT(MCUCR_Register, ISC11);
#endif

#if EXTI2_MODE == EXTI_FALLING
	CLR_BIT(MCUCSR_Register, ISC2);
    1baa:	a4 e5       	ldi	r26, 0x54	; 84
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e4 e5       	ldi	r30, 0x54	; 84
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8f 7b       	andi	r24, 0xBF	; 191
    1bb6:	8c 93       	st	X, r24
#elif EXTI2_MODE == EXTI_RISING
	SET_BIT(MCUCSR_Register, ISC2);
#endif
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <EXTI_Enable>:

void EXTI_Enable(u8 L_u8EXTI_Num)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <EXTI_Enable+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTI_Num)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3b 83       	std	Y+3, r19	; 0x03
    1bd4:	2a 83       	std	Y+2, r18	; 0x02
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	89 f0       	breq	.+34     	; 0x1c02 <EXTI_Enable+0x44>
    1be0:	2a 81       	ldd	r18, Y+2	; 0x02
    1be2:	3b 81       	ldd	r19, Y+3	; 0x03
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	a1 f0       	breq	.+40     	; 0x1c12 <EXTI_Enable+0x54>
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	b9 f4       	brne	.+46     	; 0x1c20 <EXTI_Enable+0x62>
	{
	case EXTI0: SET_BIT(GICR_Register, INT0); break;
    1bf2:	ab e5       	ldi	r26, 0x5B	; 91
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	eb e5       	ldi	r30, 0x5B	; 91
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 64       	ori	r24, 0x40	; 64
    1bfe:	8c 93       	st	X, r24
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <EXTI_Enable+0x62>
	case EXTI1: SET_BIT(GICR_Register, INT1); break;
    1c02:	ab e5       	ldi	r26, 0x5B	; 91
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	eb e5       	ldi	r30, 0x5B	; 91
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 68       	ori	r24, 0x80	; 128
    1c0e:	8c 93       	st	X, r24
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <EXTI_Enable+0x62>
	case EXTI2: SET_BIT(GICR_Register, INT2); break;
    1c12:	ab e5       	ldi	r26, 0x5B	; 91
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	eb e5       	ldi	r30, 0x5B	; 91
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 62       	ori	r24, 0x20	; 32
    1c1e:	8c 93       	st	X, r24
	}
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <EXTI_Disable>:

void EXTI_Disable(u8 L_u8EXTI_Num)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <EXTI_Disable+0x6>
    1c32:	0f 92       	push	r0
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	89 83       	std	Y+1, r24	; 0x01
	switch(L_u8EXTI_Num)
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	3b 83       	std	Y+3, r19	; 0x03
    1c42:	2a 83       	std	Y+2, r18	; 0x02
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	89 f0       	breq	.+34     	; 0x1c70 <EXTI_Disable+0x44>
    1c4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c50:	3b 81       	ldd	r19, Y+3	; 0x03
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	a1 f0       	breq	.+40     	; 0x1c80 <EXTI_Disable+0x54>
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	b9 f4       	brne	.+46     	; 0x1c8e <EXTI_Disable+0x62>
	{
	case EXTI0: CLR_BIT(GICR_Register, INT0); break;
    1c60:	ab e5       	ldi	r26, 0x5B	; 91
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	eb e5       	ldi	r30, 0x5B	; 91
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 7b       	andi	r24, 0xBF	; 191
    1c6c:	8c 93       	st	X, r24
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <EXTI_Disable+0x62>
	case EXTI1: CLR_BIT(GICR_Register, INT1); break;
    1c70:	ab e5       	ldi	r26, 0x5B	; 91
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	eb e5       	ldi	r30, 0x5B	; 91
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8f 77       	andi	r24, 0x7F	; 127
    1c7c:	8c 93       	st	X, r24
    1c7e:	07 c0       	rjmp	.+14     	; 0x1c8e <EXTI_Disable+0x62>
	case EXTI2: CLR_BIT(GICR_Register, INT2); break;
    1c80:	ab e5       	ldi	r26, 0x5B	; 91
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	eb e5       	ldi	r30, 0x5B	; 91
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7d       	andi	r24, 0xDF	; 223
    1c8c:	8c 93       	st	X, r24
	}
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <EXTI_SetCallback>:

void EXTI_SetCallback(u8 L_u8EXTI_Num, void (* ptr)())
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <EXTI_SetCallback+0x6>
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <EXTI_SetCallback+0x8>
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	7b 83       	std	Y+3, r23	; 0x03
    1cac:	6a 83       	std	Y+2, r22	; 0x02
	if(ptr != 0x00)
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	39 f1       	breq	.+78     	; 0x1d04 <EXTI_SetCallback+0x6a>
	{
		switch(L_u8EXTI_Num)
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	3d 83       	std	Y+5, r19	; 0x05
    1cbe:	2c 83       	std	Y+4, r18	; 0x04
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	81 f0       	breq	.+32     	; 0x1cea <EXTI_SetCallback+0x50>
    1cca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ccc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	91 f0       	breq	.+36     	; 0x1cf8 <EXTI_SetCallback+0x5e>
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	a1 f4       	brne	.+40     	; 0x1d04 <EXTI_SetCallback+0x6a>
		{
		case EXTI0: ptr1 = ptr;break;
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	90 93 89 00 	sts	0x0089, r25
    1ce4:	80 93 88 00 	sts	0x0088, r24
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <EXTI_SetCallback+0x6a>
		case EXTI1: ptr2 = ptr;break;
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	90 93 8b 00 	sts	0x008B, r25
    1cf2:	80 93 8a 00 	sts	0x008A, r24
    1cf6:	06 c0       	rjmp	.+12     	; 0x1d04 <EXTI_SetCallback+0x6a>
		case EXTI2: ptr3 = ptr;break;
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfc:	90 93 87 00 	sts	0x0087, r25
    1d00:	80 93 86 00 	sts	0x0086, r24
		}
	}
}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <__vector_1>:


void __vector_1(void)
{
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	5f 93       	push	r21
    1d26:	6f 93       	push	r22
    1d28:	7f 93       	push	r23
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	af 93       	push	r26
    1d30:	bf 93       	push	r27
    1d32:	ef 93       	push	r30
    1d34:	ff 93       	push	r31
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
	ptr1();
    1d3e:	e0 91 88 00 	lds	r30, 0x0088
    1d42:	f0 91 89 00 	lds	r31, 0x0089
    1d46:	09 95       	icall
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <__vector_2>:

void __vector_2(void)
{
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	2f 93       	push	r18
    1d7a:	3f 93       	push	r19
    1d7c:	4f 93       	push	r20
    1d7e:	5f 93       	push	r21
    1d80:	6f 93       	push	r22
    1d82:	7f 93       	push	r23
    1d84:	8f 93       	push	r24
    1d86:	9f 93       	push	r25
    1d88:	af 93       	push	r26
    1d8a:	bf 93       	push	r27
    1d8c:	ef 93       	push	r30
    1d8e:	ff 93       	push	r31
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	ptr2();
    1d98:	e0 91 8a 00 	lds	r30, 0x008A
    1d9c:	f0 91 8b 00 	lds	r31, 0x008B
    1da0:	09 95       	icall
}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	bf 91       	pop	r27
    1dac:	af 91       	pop	r26
    1dae:	9f 91       	pop	r25
    1db0:	8f 91       	pop	r24
    1db2:	7f 91       	pop	r23
    1db4:	6f 91       	pop	r22
    1db6:	5f 91       	pop	r21
    1db8:	4f 91       	pop	r20
    1dba:	3f 91       	pop	r19
    1dbc:	2f 91       	pop	r18
    1dbe:	0f 90       	pop	r0
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <__vector_3>:

void __vector_3(void)
{
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	ptr3();
    1df2:	e0 91 86 00 	lds	r30, 0x0086
    1df6:	f0 91 87 00 	lds	r31, 0x0087
    1dfa:	09 95       	icall
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	ff 91       	pop	r31
    1e02:	ef 91       	pop	r30
    1e04:	bf 91       	pop	r27
    1e06:	af 91       	pop	r26
    1e08:	9f 91       	pop	r25
    1e0a:	8f 91       	pop	r24
    1e0c:	7f 91       	pop	r23
    1e0e:	6f 91       	pop	r22
    1e10:	5f 91       	pop	r21
    1e12:	4f 91       	pop	r20
    1e14:	3f 91       	pop	r19
    1e16:	2f 91       	pop	r18
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <DIO_enumSetPinDirection>:




DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	28 97       	sbiw	r28, 0x08	; 8
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	8a 83       	std	Y+2, r24	; 0x02
    1e38:	6b 83       	std	Y+3, r22	; 0x03
    1e3a:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	08 f0       	brcs	.+2      	; 0x1e48 <DIO_enumSetPinDirection+0x26>
    1e46:	f1 c0       	rjmp	.+482    	; 0x202a <DIO_enumSetPinDirection+0x208>
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	88 30       	cpi	r24, 0x08	; 8
    1e4c:	08 f0       	brcs	.+2      	; 0x1e50 <DIO_enumSetPinDirection+0x2e>
    1e4e:	ed c0       	rjmp	.+474    	; 0x202a <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <DIO_enumSetPinDirection+0x36>
    1e56:	6f c0       	rjmp	.+222    	; 0x1f36 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	38 87       	std	Y+8, r19	; 0x08
    1e60:	2f 83       	std	Y+7, r18	; 0x07
    1e62:	8f 81       	ldd	r24, Y+7	; 0x07
    1e64:	98 85       	ldd	r25, Y+8	; 0x08
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	49 f1       	breq	.+82     	; 0x1ebe <DIO_enumSetPinDirection+0x9c>
    1e6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e6e:	38 85       	ldd	r19, Y+8	; 0x08
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <DIO_enumSetPinDirection+0x5e>
    1e76:	8f 81       	ldd	r24, Y+7	; 0x07
    1e78:	98 85       	ldd	r25, Y+8	; 0x08
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	61 f0       	breq	.+24     	; 0x1e96 <DIO_enumSetPinDirection+0x74>
    1e7e:	d6 c0       	rjmp	.+428    	; 0x202c <DIO_enumSetPinDirection+0x20a>
    1e80:	2f 81       	ldd	r18, Y+7	; 0x07
    1e82:	38 85       	ldd	r19, Y+8	; 0x08
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	71 f1       	breq	.+92     	; 0x1ee6 <DIO_enumSetPinDirection+0xc4>
    1e8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8c:	98 85       	ldd	r25, Y+8	; 0x08
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	91 05       	cpc	r25, r1
    1e92:	e9 f1       	breq	.+122    	; 0x1f0e <DIO_enumSetPinDirection+0xec>
    1e94:	cb c0       	rjmp	.+406    	; 0x202c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    1e96:	aa e3       	ldi	r26, 0x3A	; 58
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	ea e3       	ldi	r30, 0x3A	; 58
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 2e       	mov	r0, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_enumSetPinDirection+0x92>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_enumSetPinDirection+0x8e>
    1eb8:	84 2b       	or	r24, r20
    1eba:	8c 93       	st	X, r24
    1ebc:	b7 c0       	rjmp	.+366    	; 0x202c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    1ebe:	a7 e3       	ldi	r26, 0x37	; 55
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e7 e3       	ldi	r30, 0x37	; 55
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 2e       	mov	r0, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <DIO_enumSetPinDirection+0xba>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	0a 94       	dec	r0
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <DIO_enumSetPinDirection+0xb6>
    1ee0:	84 2b       	or	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	a3 c0       	rjmp	.+326    	; 0x202c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    1ee6:	a4 e3       	ldi	r26, 0x34	; 52
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e4 e3       	ldi	r30, 0x34	; 52
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 2e       	mov	r0, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_enumSetPinDirection+0xe2>
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <DIO_enumSetPinDirection+0xde>
    1f08:	84 2b       	or	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	8f c0       	rjmp	.+286    	; 0x202c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    1f0e:	a1 e3       	ldi	r26, 0x31	; 49
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e1 e3       	ldi	r30, 0x31	; 49
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_enumSetPinDirection+0x10a>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_enumSetPinDirection+0x106>
    1f30:	84 2b       	or	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	7b c0       	rjmp	.+246    	; 0x202c <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    1f36:	8c 81       	ldd	r24, Y+4	; 0x04
    1f38:	88 23       	and	r24, r24
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <DIO_enumSetPinDirection+0x11c>
    1f3c:	74 c0       	rjmp	.+232    	; 0x2026 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3e 83       	std	Y+6, r19	; 0x06
    1f46:	2d 83       	std	Y+5, r18	; 0x05
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	59 f1       	breq	.+86     	; 0x1fa8 <DIO_enumSetPinDirection+0x186>
    1f52:	2d 81       	ldd	r18, Y+5	; 0x05
    1f54:	3e 81       	ldd	r19, Y+6	; 0x06
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <DIO_enumSetPinDirection+0x144>
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	69 f0       	breq	.+26     	; 0x1f7e <DIO_enumSetPinDirection+0x15c>
    1f64:	63 c0       	rjmp	.+198    	; 0x202c <DIO_enumSetPinDirection+0x20a>
    1f66:	2d 81       	ldd	r18, Y+5	; 0x05
    1f68:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	89 f1       	breq	.+98     	; 0x1fd2 <DIO_enumSetPinDirection+0x1b0>
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <DIO_enumSetPinDirection+0x15a>
    1f7a:	40 c0       	rjmp	.+128    	; 0x1ffc <DIO_enumSetPinDirection+0x1da>
    1f7c:	57 c0       	rjmp	.+174    	; 0x202c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    1f7e:	aa e3       	ldi	r26, 0x3A	; 58
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	ea e3       	ldi	r30, 0x3A	; 58
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	48 2f       	mov	r20, r24
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 2e       	mov	r0, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_enumSetPinDirection+0x17a>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_enumSetPinDirection+0x176>
    1fa0:	80 95       	com	r24
    1fa2:	84 23       	and	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	42 c0       	rjmp	.+132    	; 0x202c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    1fa8:	a7 e3       	ldi	r26, 0x37	; 55
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e7 e3       	ldi	r30, 0x37	; 55
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <DIO_enumSetPinDirection+0x1a4>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <DIO_enumSetPinDirection+0x1a0>
    1fca:	80 95       	com	r24
    1fcc:	84 23       	and	r24, r20
    1fce:	8c 93       	st	X, r24
    1fd0:	2d c0       	rjmp	.+90     	; 0x202c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    1fd2:	a4 e3       	ldi	r26, 0x34	; 52
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e4 e3       	ldi	r30, 0x34	; 52
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_enumSetPinDirection+0x1ce>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <DIO_enumSetPinDirection+0x1ca>
    1ff4:	80 95       	com	r24
    1ff6:	84 23       	and	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	18 c0       	rjmp	.+48     	; 0x202c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    1ffc:	a1 e3       	ldi	r26, 0x31	; 49
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e1 e3       	ldi	r30, 0x31	; 49
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_enumSetPinDirection+0x1f8>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_enumSetPinDirection+0x1f4>
    201e:	80 95       	com	r24
    2020:	84 23       	and	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	03 c0       	rjmp	.+6      	; 0x202c <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    2026:	19 82       	std	Y+1, r1	; 0x01
    2028:	01 c0       	rjmp	.+2      	; 0x202c <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    202a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    202c:	89 81       	ldd	r24, Y+1	; 0x01

}
    202e:	28 96       	adiw	r28, 0x08	; 8
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	28 97       	sbiw	r28, 0x08	; 8
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	8a 83       	std	Y+2, r24	; 0x02
    2056:	6b 83       	std	Y+3, r22	; 0x03
    2058:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	84 30       	cpi	r24, 0x04	; 4
    2062:	08 f0       	brcs	.+2      	; 0x2066 <DIO_enumSetPinValue+0x26>
    2064:	f1 c0       	rjmp	.+482    	; 0x2248 <DIO_enumSetPinValue+0x208>
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	88 30       	cpi	r24, 0x08	; 8
    206a:	08 f0       	brcs	.+2      	; 0x206e <DIO_enumSetPinValue+0x2e>
    206c:	ed c0       	rjmp	.+474    	; 0x2248 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    206e:	8c 81       	ldd	r24, Y+4	; 0x04
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	09 f0       	breq	.+2      	; 0x2076 <DIO_enumSetPinValue+0x36>
    2074:	6f c0       	rjmp	.+222    	; 0x2154 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	38 87       	std	Y+8, r19	; 0x08
    207e:	2f 83       	std	Y+7, r18	; 0x07
    2080:	8f 81       	ldd	r24, Y+7	; 0x07
    2082:	98 85       	ldd	r25, Y+8	; 0x08
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	91 05       	cpc	r25, r1
    2088:	49 f1       	breq	.+82     	; 0x20dc <DIO_enumSetPinValue+0x9c>
    208a:	2f 81       	ldd	r18, Y+7	; 0x07
    208c:	38 85       	ldd	r19, Y+8	; 0x08
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	31 05       	cpc	r19, r1
    2092:	2c f4       	brge	.+10     	; 0x209e <DIO_enumSetPinValue+0x5e>
    2094:	8f 81       	ldd	r24, Y+7	; 0x07
    2096:	98 85       	ldd	r25, Y+8	; 0x08
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	61 f0       	breq	.+24     	; 0x20b4 <DIO_enumSetPinValue+0x74>
    209c:	d6 c0       	rjmp	.+428    	; 0x224a <DIO_enumSetPinValue+0x20a>
    209e:	2f 81       	ldd	r18, Y+7	; 0x07
    20a0:	38 85       	ldd	r19, Y+8	; 0x08
    20a2:	22 30       	cpi	r18, 0x02	; 2
    20a4:	31 05       	cpc	r19, r1
    20a6:	71 f1       	breq	.+92     	; 0x2104 <DIO_enumSetPinValue+0xc4>
    20a8:	8f 81       	ldd	r24, Y+7	; 0x07
    20aa:	98 85       	ldd	r25, Y+8	; 0x08
    20ac:	83 30       	cpi	r24, 0x03	; 3
    20ae:	91 05       	cpc	r25, r1
    20b0:	e9 f1       	breq	.+122    	; 0x212c <DIO_enumSetPinValue+0xec>
    20b2:	cb c0       	rjmp	.+406    	; 0x224a <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    20b4:	ab e3       	ldi	r26, 0x3B	; 59
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	eb e3       	ldi	r30, 0x3B	; 59
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	48 2f       	mov	r20, r24
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	02 2e       	mov	r0, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_enumSetPinValue+0x92>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_enumSetPinValue+0x8e>
    20d6:	84 2b       	or	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	b7 c0       	rjmp	.+366    	; 0x224a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    20dc:	a8 e3       	ldi	r26, 0x38	; 56
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e8 e3       	ldi	r30, 0x38	; 56
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <DIO_enumSetPinValue+0xba>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <DIO_enumSetPinValue+0xb6>
    20fe:	84 2b       	or	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	a3 c0       	rjmp	.+326    	; 0x224a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    2104:	a5 e3       	ldi	r26, 0x35	; 53
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e5 e3       	ldi	r30, 0x35	; 53
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	02 2e       	mov	r0, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_enumSetPinValue+0xe2>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_enumSetPinValue+0xde>
    2126:	84 2b       	or	r24, r20
    2128:	8c 93       	st	X, r24
    212a:	8f c0       	rjmp	.+286    	; 0x224a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    212c:	a2 e3       	ldi	r26, 0x32	; 50
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e2 e3       	ldi	r30, 0x32	; 50
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <DIO_enumSetPinValue+0x10a>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <DIO_enumSetPinValue+0x106>
    214e:	84 2b       	or	r24, r20
    2150:	8c 93       	st	X, r24
    2152:	7b c0       	rjmp	.+246    	; 0x224a <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	88 23       	and	r24, r24
    2158:	09 f0       	breq	.+2      	; 0x215c <DIO_enumSetPinValue+0x11c>
    215a:	74 c0       	rjmp	.+232    	; 0x2244 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	3e 83       	std	Y+6, r19	; 0x06
    2164:	2d 83       	std	Y+5, r18	; 0x05
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	91 05       	cpc	r25, r1
    216e:	59 f1       	breq	.+86     	; 0x21c6 <DIO_enumSetPinValue+0x186>
    2170:	2d 81       	ldd	r18, Y+5	; 0x05
    2172:	3e 81       	ldd	r19, Y+6	; 0x06
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	2c f4       	brge	.+10     	; 0x2184 <DIO_enumSetPinValue+0x144>
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	69 f0       	breq	.+26     	; 0x219c <DIO_enumSetPinValue+0x15c>
    2182:	63 c0       	rjmp	.+198    	; 0x224a <DIO_enumSetPinValue+0x20a>
    2184:	2d 81       	ldd	r18, Y+5	; 0x05
    2186:	3e 81       	ldd	r19, Y+6	; 0x06
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	89 f1       	breq	.+98     	; 0x21f0 <DIO_enumSetPinValue+0x1b0>
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	91 05       	cpc	r25, r1
    2196:	09 f4       	brne	.+2      	; 0x219a <DIO_enumSetPinValue+0x15a>
    2198:	40 c0       	rjmp	.+128    	; 0x221a <DIO_enumSetPinValue+0x1da>
    219a:	57 c0       	rjmp	.+174    	; 0x224a <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    219c:	ab e3       	ldi	r26, 0x3B	; 59
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	eb e3       	ldi	r30, 0x3B	; 59
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	48 2f       	mov	r20, r24
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <DIO_enumSetPinValue+0x17a>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <DIO_enumSetPinValue+0x176>
    21be:	80 95       	com	r24
    21c0:	84 23       	and	r24, r20
    21c2:	8c 93       	st	X, r24
    21c4:	42 c0       	rjmp	.+132    	; 0x224a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    21c6:	a8 e3       	ldi	r26, 0x38	; 56
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e8 e3       	ldi	r30, 0x38	; 56
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	48 2f       	mov	r20, r24
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 2e       	mov	r0, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <DIO_enumSetPinValue+0x1a4>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	0a 94       	dec	r0
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <DIO_enumSetPinValue+0x1a0>
    21e8:	80 95       	com	r24
    21ea:	84 23       	and	r24, r20
    21ec:	8c 93       	st	X, r24
    21ee:	2d c0       	rjmp	.+90     	; 0x224a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    21f0:	a5 e3       	ldi	r26, 0x35	; 53
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e3       	ldi	r30, 0x35	; 53
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_enumSetPinValue+0x1ce>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <DIO_enumSetPinValue+0x1ca>
    2212:	80 95       	com	r24
    2214:	84 23       	and	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	18 c0       	rjmp	.+48     	; 0x224a <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    221a:	a2 e3       	ldi	r26, 0x32	; 50
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e2 e3       	ldi	r30, 0x32	; 50
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	48 2f       	mov	r20, r24
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 2e       	mov	r0, r18
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <DIO_enumSetPinValue+0x1f8>
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	0a 94       	dec	r0
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <DIO_enumSetPinValue+0x1f4>
    223c:	80 95       	com	r24
    223e:	84 23       	and	r24, r20
    2240:	8c 93       	st	X, r24
    2242:	03 c0       	rjmp	.+6      	; 0x224a <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    2244:	19 82       	std	Y+1, r1	; 0x01
    2246:	01 c0       	rjmp	.+2      	; 0x224a <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    2248:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    224a:	89 81       	ldd	r24, Y+1	; 0x01

}
    224c:	28 96       	adiw	r28, 0x08	; 8
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <DIO_enumGetPinValue>:



DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	27 97       	sbiw	r28, 0x07	; 7
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	8a 83       	std	Y+2, r24	; 0x02
    2274:	6b 83       	std	Y+3, r22	; 0x03
    2276:	5d 83       	std	Y+5, r21	; 0x05
    2278:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	84 30       	cpi	r24, 0x04	; 4
    2282:	08 f0       	brcs	.+2      	; 0x2286 <DIO_enumGetPinValue+0x28>
    2284:	a6 c0       	rjmp	.+332    	; 0x23d2 <DIO_enumGetPinValue+0x174>
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	88 30       	cpi	r24, 0x08	; 8
    228a:	08 f0       	brcs	.+2      	; 0x228e <DIO_enumGetPinValue+0x30>
    228c:	a2 c0       	rjmp	.+324    	; 0x23d2 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3f 83       	std	Y+7, r19	; 0x07
    2296:	2e 83       	std	Y+6, r18	; 0x06
    2298:	4e 81       	ldd	r20, Y+6	; 0x06
    229a:	5f 81       	ldd	r21, Y+7	; 0x07
    229c:	41 30       	cpi	r20, 0x01	; 1
    229e:	51 05       	cpc	r21, r1
    22a0:	c1 f1       	breq	.+112    	; 0x2312 <DIO_enumGetPinValue+0xb4>
    22a2:	8e 81       	ldd	r24, Y+6	; 0x06
    22a4:	9f 81       	ldd	r25, Y+7	; 0x07
    22a6:	82 30       	cpi	r24, 0x02	; 2
    22a8:	91 05       	cpc	r25, r1
    22aa:	34 f4       	brge	.+12     	; 0x22b8 <DIO_enumGetPinValue+0x5a>
    22ac:	2e 81       	ldd	r18, Y+6	; 0x06
    22ae:	3f 81       	ldd	r19, Y+7	; 0x07
    22b0:	21 15       	cp	r18, r1
    22b2:	31 05       	cpc	r19, r1
    22b4:	71 f0       	breq	.+28     	; 0x22d2 <DIO_enumGetPinValue+0x74>
    22b6:	8e c0       	rjmp	.+284    	; 0x23d4 <DIO_enumGetPinValue+0x176>
    22b8:	4e 81       	ldd	r20, Y+6	; 0x06
    22ba:	5f 81       	ldd	r21, Y+7	; 0x07
    22bc:	42 30       	cpi	r20, 0x02	; 2
    22be:	51 05       	cpc	r21, r1
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <DIO_enumGetPinValue+0x66>
    22c2:	47 c0       	rjmp	.+142    	; 0x2352 <DIO_enumGetPinValue+0xf4>
    22c4:	8e 81       	ldd	r24, Y+6	; 0x06
    22c6:	9f 81       	ldd	r25, Y+7	; 0x07
    22c8:	83 30       	cpi	r24, 0x03	; 3
    22ca:	91 05       	cpc	r25, r1
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <DIO_enumGetPinValue+0x72>
    22ce:	61 c0       	rjmp	.+194    	; 0x2392 <DIO_enumGetPinValue+0x134>
    22d0:	81 c0       	rjmp	.+258    	; 0x23d4 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    22d2:	e9 e3       	ldi	r30, 0x39	; 57
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	48 2f       	mov	r20, r24
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <DIO_enumGetPinValue+0x8e>
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	2a 95       	dec	r18
    22ee:	e2 f7       	brpl	.-8      	; 0x22e8 <DIO_enumGetPinValue+0x8a>
    22f0:	9a 01       	movw	r18, r20
    22f2:	28 23       	and	r18, r24
    22f4:	39 23       	and	r19, r25
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a9 01       	movw	r20, r18
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <DIO_enumGetPinValue+0xa6>
    2300:	55 95       	asr	r21
    2302:	47 95       	ror	r20
    2304:	8a 95       	dec	r24
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <DIO_enumGetPinValue+0xa2>
    2308:	ca 01       	movw	r24, r20
    230a:	ec 81       	ldd	r30, Y+4	; 0x04
    230c:	fd 81       	ldd	r31, Y+5	; 0x05
    230e:	80 83       	st	Z, r24
    2310:	61 c0       	rjmp	.+194    	; 0x23d4 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    2312:	e6 e3       	ldi	r30, 0x36	; 54
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	48 2f       	mov	r20, r24
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	02 c0       	rjmp	.+4      	; 0x232c <DIO_enumGetPinValue+0xce>
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	2a 95       	dec	r18
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <DIO_enumGetPinValue+0xca>
    2330:	9a 01       	movw	r18, r20
    2332:	28 23       	and	r18, r24
    2334:	39 23       	and	r19, r25
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <DIO_enumGetPinValue+0xe6>
    2340:	55 95       	asr	r21
    2342:	47 95       	ror	r20
    2344:	8a 95       	dec	r24
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <DIO_enumGetPinValue+0xe2>
    2348:	ca 01       	movw	r24, r20
    234a:	ec 81       	ldd	r30, Y+4	; 0x04
    234c:	fd 81       	ldd	r31, Y+5	; 0x05
    234e:	80 83       	st	Z, r24
    2350:	41 c0       	rjmp	.+130    	; 0x23d4 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    2352:	e3 e3       	ldi	r30, 0x33	; 51
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	48 2f       	mov	r20, r24
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	02 c0       	rjmp	.+4      	; 0x236c <DIO_enumGetPinValue+0x10e>
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	2a 95       	dec	r18
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <DIO_enumGetPinValue+0x10a>
    2370:	9a 01       	movw	r18, r20
    2372:	28 23       	and	r18, r24
    2374:	39 23       	and	r19, r25
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a9 01       	movw	r20, r18
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <DIO_enumGetPinValue+0x126>
    2380:	55 95       	asr	r21
    2382:	47 95       	ror	r20
    2384:	8a 95       	dec	r24
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <DIO_enumGetPinValue+0x122>
    2388:	ca 01       	movw	r24, r20
    238a:	ec 81       	ldd	r30, Y+4	; 0x04
    238c:	fd 81       	ldd	r31, Y+5	; 0x05
    238e:	80 83       	st	Z, r24
    2390:	21 c0       	rjmp	.+66     	; 0x23d4 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    2392:	e0 e3       	ldi	r30, 0x30	; 48
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <DIO_enumGetPinValue+0x14e>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	2a 95       	dec	r18
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <DIO_enumGetPinValue+0x14a>
    23b0:	9a 01       	movw	r18, r20
    23b2:	28 23       	and	r18, r24
    23b4:	39 23       	and	r19, r25
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	88 2f       	mov	r24, r24
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a9 01       	movw	r20, r18
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <DIO_enumGetPinValue+0x166>
    23c0:	55 95       	asr	r21
    23c2:	47 95       	ror	r20
    23c4:	8a 95       	dec	r24
    23c6:	e2 f7       	brpl	.-8      	; 0x23c0 <DIO_enumGetPinValue+0x162>
    23c8:	ca 01       	movw	r24, r20
    23ca:	ec 81       	ldd	r30, Y+4	; 0x04
    23cc:	fd 81       	ldd	r31, Y+5	; 0x05
    23ce:	80 83       	st	Z, r24
    23d0:	01 c0       	rjmp	.+2      	; 0x23d4 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    23d2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d6:	27 96       	adiw	r28, 0x07	; 7
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <DIO_enumTogglePinValue>:


DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <DIO_enumTogglePinValue+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <DIO_enumTogglePinValue+0x8>
    23f0:	0f 92       	push	r0
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	8a 83       	std	Y+2, r24	; 0x02
    23f8:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	88 30       	cpi	r24, 0x08	; 8
    2402:	08 f0       	brcs	.+2      	; 0x2406 <DIO_enumTogglePinValue+0x1e>
    2404:	6f c0       	rjmp	.+222    	; 0x24e4 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	3d 83       	std	Y+5, r19	; 0x05
    240e:	2c 83       	std	Y+4, r18	; 0x04
    2410:	8c 81       	ldd	r24, Y+4	; 0x04
    2412:	9d 81       	ldd	r25, Y+5	; 0x05
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	91 05       	cpc	r25, r1
    2418:	49 f1       	breq	.+82     	; 0x246c <DIO_enumTogglePinValue+0x84>
    241a:	2c 81       	ldd	r18, Y+4	; 0x04
    241c:	3d 81       	ldd	r19, Y+5	; 0x05
    241e:	22 30       	cpi	r18, 0x02	; 2
    2420:	31 05       	cpc	r19, r1
    2422:	2c f4       	brge	.+10     	; 0x242e <DIO_enumTogglePinValue+0x46>
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	61 f0       	breq	.+24     	; 0x2444 <DIO_enumTogglePinValue+0x5c>
    242c:	5c c0       	rjmp	.+184    	; 0x24e6 <DIO_enumTogglePinValue+0xfe>
    242e:	2c 81       	ldd	r18, Y+4	; 0x04
    2430:	3d 81       	ldd	r19, Y+5	; 0x05
    2432:	22 30       	cpi	r18, 0x02	; 2
    2434:	31 05       	cpc	r19, r1
    2436:	71 f1       	breq	.+92     	; 0x2494 <DIO_enumTogglePinValue+0xac>
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	91 05       	cpc	r25, r1
    2440:	e9 f1       	breq	.+122    	; 0x24bc <DIO_enumTogglePinValue+0xd4>
    2442:	51 c0       	rjmp	.+162    	; 0x24e6 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    2444:	ab e3       	ldi	r26, 0x3B	; 59
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	eb e3       	ldi	r30, 0x3B	; 59
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	48 2f       	mov	r20, r24
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	02 2e       	mov	r0, r18
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <DIO_enumTogglePinValue+0x7a>
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	0a 94       	dec	r0
    2464:	e2 f7       	brpl	.-8      	; 0x245e <DIO_enumTogglePinValue+0x76>
    2466:	84 27       	eor	r24, r20
    2468:	8c 93       	st	X, r24
    246a:	3d c0       	rjmp	.+122    	; 0x24e6 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    246c:	a8 e3       	ldi	r26, 0x38	; 56
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e8 e3       	ldi	r30, 0x38	; 56
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_enumTogglePinValue+0xa2>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_enumTogglePinValue+0x9e>
    248e:	84 27       	eor	r24, r20
    2490:	8c 93       	st	X, r24
    2492:	29 c0       	rjmp	.+82     	; 0x24e6 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    2494:	a5 e3       	ldi	r26, 0x35	; 53
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e5 e3       	ldi	r30, 0x35	; 53
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 2e       	mov	r0, r18
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <DIO_enumTogglePinValue+0xca>
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	0a 94       	dec	r0
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <DIO_enumTogglePinValue+0xc6>
    24b6:	84 27       	eor	r24, r20
    24b8:	8c 93       	st	X, r24
    24ba:	15 c0       	rjmp	.+42     	; 0x24e6 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    24bc:	a2 e3       	ldi	r26, 0x32	; 50
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e2 e3       	ldi	r30, 0x32	; 50
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	48 2f       	mov	r20, r24
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 2e       	mov	r0, r18
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <DIO_enumTogglePinValue+0xf2>
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	0a 94       	dec	r0
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <DIO_enumTogglePinValue+0xee>
    24de:	84 27       	eor	r24, r20
    24e0:	8c 93       	st	X, r24
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    24e4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <DIO_enumConnectPullup>:


DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <DIO_enumConnectPullup+0x6>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <DIO_enumConnectPullup+0x8>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <DIO_enumConnectPullup+0xa>
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	8a 83       	std	Y+2, r24	; 0x02
    2508:	6b 83       	std	Y+3, r22	; 0x03
    250a:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	84 30       	cpi	r24, 0x04	; 4
    2514:	08 f0       	brcs	.+2      	; 0x2518 <DIO_enumConnectPullup+0x20>
    2516:	3e c1       	rjmp	.+636    	; 0x2794 <DIO_enumConnectPullup+0x29c>
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	88 30       	cpi	r24, 0x08	; 8
    251c:	08 f0       	brcs	.+2      	; 0x2520 <DIO_enumConnectPullup+0x28>
    251e:	3a c1       	rjmp	.+628    	; 0x2794 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	3e 83       	std	Y+6, r19	; 0x06
    2528:	2d 83       	std	Y+5, r18	; 0x05
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	91 05       	cpc	r25, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <DIO_enumConnectPullup+0x3e>
    2534:	5d c0       	rjmp	.+186    	; 0x25f0 <DIO_enumConnectPullup+0xf8>
    2536:	2d 81       	ldd	r18, Y+5	; 0x05
    2538:	3e 81       	ldd	r19, Y+6	; 0x06
    253a:	22 30       	cpi	r18, 0x02	; 2
    253c:	31 05       	cpc	r19, r1
    253e:	2c f4       	brge	.+10     	; 0x254a <DIO_enumConnectPullup+0x52>
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	71 f0       	breq	.+28     	; 0x2564 <DIO_enumConnectPullup+0x6c>
    2548:	26 c1       	rjmp	.+588    	; 0x2796 <DIO_enumConnectPullup+0x29e>
    254a:	2d 81       	ldd	r18, Y+5	; 0x05
    254c:	3e 81       	ldd	r19, Y+6	; 0x06
    254e:	22 30       	cpi	r18, 0x02	; 2
    2550:	31 05       	cpc	r19, r1
    2552:	09 f4       	brne	.+2      	; 0x2556 <DIO_enumConnectPullup+0x5e>
    2554:	93 c0       	rjmp	.+294    	; 0x267c <DIO_enumConnectPullup+0x184>
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	83 30       	cpi	r24, 0x03	; 3
    255c:	91 05       	cpc	r25, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <DIO_enumConnectPullup+0x6a>
    2560:	d3 c0       	rjmp	.+422    	; 0x2708 <DIO_enumConnectPullup+0x210>
    2562:	19 c1       	rjmp	.+562    	; 0x2796 <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	71 f5       	brne	.+92     	; 0x25c6 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    256a:	a0 e5       	ldi	r26, 0x50	; 80
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e0 e5       	ldi	r30, 0x50	; 80
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8b 7f       	andi	r24, 0xFB	; 251
    2576:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    2578:	aa e3       	ldi	r26, 0x3A	; 58
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ea e3       	ldi	r30, 0x3A	; 58
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	48 2f       	mov	r20, r24
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <DIO_enumConnectPullup+0x9c>
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	2a 95       	dec	r18
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <DIO_enumConnectPullup+0x98>
    2598:	80 95       	com	r24
    259a:	84 23       	and	r24, r20
    259c:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    259e:	ab e3       	ldi	r26, 0x3B	; 59
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	eb e3       	ldi	r30, 0x3B	; 59
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	48 2f       	mov	r20, r24
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 2e       	mov	r0, r18
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <DIO_enumConnectPullup+0xc4>
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	0a 94       	dec	r0
    25be:	e2 f7       	brpl	.-8      	; 0x25b8 <DIO_enumConnectPullup+0xc0>
    25c0:	84 2b       	or	r24, r20
    25c2:	8c 93       	st	X, r24
    25c4:	e8 c0       	rjmp	.+464    	; 0x2796 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    25c6:	ab e3       	ldi	r26, 0x3B	; 59
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	eb e3       	ldi	r30, 0x3B	; 59
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <DIO_enumConnectPullup+0xec>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <DIO_enumConnectPullup+0xe8>
    25e8:	80 95       	com	r24
    25ea:	84 23       	and	r24, r20
    25ec:	8c 93       	st	X, r24
    25ee:	d3 c0       	rjmp	.+422    	; 0x2796 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	71 f5       	brne	.+92     	; 0x2652 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    25f6:	a0 e5       	ldi	r26, 0x50	; 80
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e0 e5       	ldi	r30, 0x50	; 80
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	8b 7f       	andi	r24, 0xFB	; 251
    2602:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    2604:	a7 e3       	ldi	r26, 0x37	; 55
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e7 e3       	ldi	r30, 0x37	; 55
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	48 2f       	mov	r20, r24
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <DIO_enumConnectPullup+0x128>
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	2a 95       	dec	r18
    2622:	e2 f7       	brpl	.-8      	; 0x261c <DIO_enumConnectPullup+0x124>
    2624:	80 95       	com	r24
    2626:	84 23       	and	r24, r20
    2628:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    262a:	a8 e3       	ldi	r26, 0x38	; 56
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e8 e3       	ldi	r30, 0x38	; 56
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	48 2f       	mov	r20, r24
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	02 2e       	mov	r0, r18
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <DIO_enumConnectPullup+0x150>
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	0a 94       	dec	r0
    264a:	e2 f7       	brpl	.-8      	; 0x2644 <DIO_enumConnectPullup+0x14c>
    264c:	84 2b       	or	r24, r20
    264e:	8c 93       	st	X, r24
    2650:	a2 c0       	rjmp	.+324    	; 0x2796 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    2652:	a8 e3       	ldi	r26, 0x38	; 56
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e8 e3       	ldi	r30, 0x38	; 56
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	48 2f       	mov	r20, r24
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	02 2e       	mov	r0, r18
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <DIO_enumConnectPullup+0x178>
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	0a 94       	dec	r0
    2672:	e2 f7       	brpl	.-8      	; 0x266c <DIO_enumConnectPullup+0x174>
    2674:	80 95       	com	r24
    2676:	84 23       	and	r24, r20
    2678:	8c 93       	st	X, r24
    267a:	8d c0       	rjmp	.+282    	; 0x2796 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	71 f5       	brne	.+92     	; 0x26de <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    2682:	a0 e5       	ldi	r26, 0x50	; 80
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e0 e5       	ldi	r30, 0x50	; 80
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8b 7f       	andi	r24, 0xFB	; 251
    268e:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    2690:	a4 e3       	ldi	r26, 0x34	; 52
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e4 e3       	ldi	r30, 0x34	; 52
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	48 2f       	mov	r20, r24
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <DIO_enumConnectPullup+0x1b4>
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	2a 95       	dec	r18
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <DIO_enumConnectPullup+0x1b0>
    26b0:	80 95       	com	r24
    26b2:	84 23       	and	r24, r20
    26b4:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    26b6:	a5 e3       	ldi	r26, 0x35	; 53
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e5 e3       	ldi	r30, 0x35	; 53
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	48 2f       	mov	r20, r24
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	02 2e       	mov	r0, r18
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <DIO_enumConnectPullup+0x1dc>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	0a 94       	dec	r0
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <DIO_enumConnectPullup+0x1d8>
    26d8:	84 2b       	or	r24, r20
    26da:	8c 93       	st	X, r24
    26dc:	5c c0       	rjmp	.+184    	; 0x2796 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    26de:	a5 e3       	ldi	r26, 0x35	; 53
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e5 e3       	ldi	r30, 0x35	; 53
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	48 2f       	mov	r20, r24
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	02 2e       	mov	r0, r18
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <DIO_enumConnectPullup+0x204>
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	0a 94       	dec	r0
    26fe:	e2 f7       	brpl	.-8      	; 0x26f8 <DIO_enumConnectPullup+0x200>
    2700:	80 95       	com	r24
    2702:	84 23       	and	r24, r20
    2704:	8c 93       	st	X, r24
    2706:	47 c0       	rjmp	.+142    	; 0x2796 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2708:	8c 81       	ldd	r24, Y+4	; 0x04
    270a:	81 30       	cpi	r24, 0x01	; 1
    270c:	71 f5       	brne	.+92     	; 0x276a <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    270e:	a0 e5       	ldi	r26, 0x50	; 80
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e0 e5       	ldi	r30, 0x50	; 80
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8b 7f       	andi	r24, 0xFB	; 251
    271a:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    271c:	a1 e3       	ldi	r26, 0x31	; 49
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e1 e3       	ldi	r30, 0x31	; 49
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	48 2f       	mov	r20, r24
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <DIO_enumConnectPullup+0x240>
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	2a 95       	dec	r18
    273a:	e2 f7       	brpl	.-8      	; 0x2734 <DIO_enumConnectPullup+0x23c>
    273c:	80 95       	com	r24
    273e:	84 23       	and	r24, r20
    2740:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    2742:	a2 e3       	ldi	r26, 0x32	; 50
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e2 e3       	ldi	r30, 0x32	; 50
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	48 2f       	mov	r20, r24
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	02 2e       	mov	r0, r18
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <DIO_enumConnectPullup+0x268>
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	0a 94       	dec	r0
    2762:	e2 f7       	brpl	.-8      	; 0x275c <DIO_enumConnectPullup+0x264>
    2764:	84 2b       	or	r24, r20
    2766:	8c 93       	st	X, r24
    2768:	16 c0       	rjmp	.+44     	; 0x2796 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    276a:	a2 e3       	ldi	r26, 0x32	; 50
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e2 e3       	ldi	r30, 0x32	; 50
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	48 2f       	mov	r20, r24
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	02 2e       	mov	r0, r18
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <DIO_enumConnectPullup+0x290>
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	0a 94       	dec	r0
    278a:	e2 f7       	brpl	.-8      	; 0x2784 <DIO_enumConnectPullup+0x28c>
    278c:	80 95       	com	r24
    278e:	84 23       	and	r24, r20
    2790:	8c 93       	st	X, r24
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    2794:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    2796:	89 81       	ldd	r24, Y+1	; 0x01


}
    2798:	26 96       	adiw	r28, 0x06	; 6
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <DIO_voidWriteHighNibbles>:




DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <DIO_voidWriteHighNibbles+0x6>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <DIO_voidWriteHighNibbles+0x8>
    27b2:	0f 92       	push	r0
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	8a 83       	std	Y+2, r24	; 0x02
    27ba:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	84 30       	cpi	r24, 0x04	; 4
    27c4:	08 f0       	brcs	.+2      	; 0x27c8 <DIO_voidWriteHighNibbles+0x1e>
    27c6:	63 c0       	rjmp	.+198    	; 0x288e <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	82 95       	swap	r24
    27cc:	80 7f       	andi	r24, 0xF0	; 240
    27ce:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	3d 83       	std	Y+5, r19	; 0x05
    27d8:	2c 83       	std	Y+4, r18	; 0x04
    27da:	8c 81       	ldd	r24, Y+4	; 0x04
    27dc:	9d 81       	ldd	r25, Y+5	; 0x05
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	91 05       	cpc	r25, r1
    27e2:	29 f1       	breq	.+74     	; 0x282e <DIO_voidWriteHighNibbles+0x84>
    27e4:	2c 81       	ldd	r18, Y+4	; 0x04
    27e6:	3d 81       	ldd	r19, Y+5	; 0x05
    27e8:	22 30       	cpi	r18, 0x02	; 2
    27ea:	31 05       	cpc	r19, r1
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <DIO_voidWriteHighNibbles+0x4e>
    27ee:	8c 81       	ldd	r24, Y+4	; 0x04
    27f0:	9d 81       	ldd	r25, Y+5	; 0x05
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	61 f0       	breq	.+24     	; 0x280e <DIO_voidWriteHighNibbles+0x64>
    27f6:	4c c0       	rjmp	.+152    	; 0x2890 <DIO_voidWriteHighNibbles+0xe6>
    27f8:	2c 81       	ldd	r18, Y+4	; 0x04
    27fa:	3d 81       	ldd	r19, Y+5	; 0x05
    27fc:	22 30       	cpi	r18, 0x02	; 2
    27fe:	31 05       	cpc	r19, r1
    2800:	31 f1       	breq	.+76     	; 0x284e <DIO_voidWriteHighNibbles+0xa4>
    2802:	8c 81       	ldd	r24, Y+4	; 0x04
    2804:	9d 81       	ldd	r25, Y+5	; 0x05
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	91 05       	cpc	r25, r1
    280a:	89 f1       	breq	.+98     	; 0x286e <DIO_voidWriteHighNibbles+0xc4>
    280c:	41 c0       	rjmp	.+130    	; 0x2890 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    280e:	ab e3       	ldi	r26, 0x3B	; 59
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	eb e3       	ldi	r30, 0x3B	; 59
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8f 70       	andi	r24, 0x0F	; 15
    281a:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    281c:	ab e3       	ldi	r26, 0x3B	; 59
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	eb e3       	ldi	r30, 0x3B	; 59
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	90 81       	ld	r25, Z
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	89 2b       	or	r24, r25
    282a:	8c 93       	st	X, r24
    282c:	31 c0       	rjmp	.+98     	; 0x2890 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    282e:	a8 e3       	ldi	r26, 0x38	; 56
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e8 e3       	ldi	r30, 0x38	; 56
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	8f 70       	andi	r24, 0x0F	; 15
    283a:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    283c:	a8 e3       	ldi	r26, 0x38	; 56
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e8 e3       	ldi	r30, 0x38	; 56
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	90 81       	ld	r25, Z
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	89 2b       	or	r24, r25
    284a:	8c 93       	st	X, r24
    284c:	21 c0       	rjmp	.+66     	; 0x2890 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    284e:	a5 e3       	ldi	r26, 0x35	; 53
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e5 e3       	ldi	r30, 0x35	; 53
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	8f 70       	andi	r24, 0x0F	; 15
    285a:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    285c:	a5 e3       	ldi	r26, 0x35	; 53
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e5 e3       	ldi	r30, 0x35	; 53
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	90 81       	ld	r25, Z
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	89 2b       	or	r24, r25
    286a:	8c 93       	st	X, r24
    286c:	11 c0       	rjmp	.+34     	; 0x2890 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    286e:	a2 e3       	ldi	r26, 0x32	; 50
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e2 e3       	ldi	r30, 0x32	; 50
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8f 70       	andi	r24, 0x0F	; 15
    287a:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    287c:	a2 e3       	ldi	r26, 0x32	; 50
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e2 e3       	ldi	r30, 0x32	; 50
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	90 81       	ld	r25, Z
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	89 2b       	or	r24, r25
    288a:	8c 93       	st	X, r24
    288c:	01 c0       	rjmp	.+2      	; 0x2890 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    288e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    2890:	89 81       	ldd	r24, Y+1	; 0x01

}
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <DIO_enumSetPortDirection+0x6>
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <DIO_enumSetPortDirection+0x8>
    28aa:	0f 92       	push	r0
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	8a 83       	std	Y+2, r24	; 0x02
    28b2:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	84 30       	cpi	r24, 0x04	; 4
    28bc:	a8 f5       	brcc	.+106    	; 0x2928 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	3d 83       	std	Y+5, r19	; 0x05
    28c6:	2c 83       	std	Y+4, r18	; 0x04
    28c8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ca:	9d 81       	ldd	r25, Y+5	; 0x05
    28cc:	81 30       	cpi	r24, 0x01	; 1
    28ce:	91 05       	cpc	r25, r1
    28d0:	d1 f0       	breq	.+52     	; 0x2906 <DIO_enumSetPortDirection+0x64>
    28d2:	2c 81       	ldd	r18, Y+4	; 0x04
    28d4:	3d 81       	ldd	r19, Y+5	; 0x05
    28d6:	22 30       	cpi	r18, 0x02	; 2
    28d8:	31 05       	cpc	r19, r1
    28da:	2c f4       	brge	.+10     	; 0x28e6 <DIO_enumSetPortDirection+0x44>
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
    28de:	9d 81       	ldd	r25, Y+5	; 0x05
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	61 f0       	breq	.+24     	; 0x28fc <DIO_enumSetPortDirection+0x5a>
    28e4:	1f c0       	rjmp	.+62     	; 0x2924 <DIO_enumSetPortDirection+0x82>
    28e6:	2c 81       	ldd	r18, Y+4	; 0x04
    28e8:	3d 81       	ldd	r19, Y+5	; 0x05
    28ea:	22 30       	cpi	r18, 0x02	; 2
    28ec:	31 05       	cpc	r19, r1
    28ee:	81 f0       	breq	.+32     	; 0x2910 <DIO_enumSetPortDirection+0x6e>
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	9d 81       	ldd	r25, Y+5	; 0x05
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	91 05       	cpc	r25, r1
    28f8:	81 f0       	breq	.+32     	; 0x291a <DIO_enumSetPortDirection+0x78>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    28fc:	ea e3       	ldi	r30, 0x3A	; 58
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	80 83       	st	Z, r24
    2904:	12 c0       	rjmp	.+36     	; 0x292a <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    2906:	e7 e3       	ldi	r30, 0x37	; 55
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	80 83       	st	Z, r24
    290e:	0d c0       	rjmp	.+26     	; 0x292a <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    2910:	e4 e3       	ldi	r30, 0x34	; 52
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	80 83       	st	Z, r24
    2918:	08 c0       	rjmp	.+16     	; 0x292a <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    291a:	e1 e3       	ldi	r30, 0x31	; 49
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	80 83       	st	Z, r24
    2922:	03 c0       	rjmp	.+6      	; 0x292a <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    2924:	19 82       	std	Y+1, r1	; 0x01
    2926:	01 c0       	rjmp	.+2      	; 0x292a <DIO_enumSetPortDirection+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2928:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
}
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	00 d0       	rcall	.+0      	; 0x2942 <DIO_enumSetPortValue+0x6>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <DIO_enumSetPortValue+0x8>
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	8a 83       	std	Y+2, r24	; 0x02
    294c:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	84 30       	cpi	r24, 0x04	; 4
    2956:	a8 f5       	brcc	.+106    	; 0x29c2 <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	3d 83       	std	Y+5, r19	; 0x05
    2960:	2c 83       	std	Y+4, r18	; 0x04
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	91 05       	cpc	r25, r1
    296a:	d1 f0       	breq	.+52     	; 0x29a0 <DIO_enumSetPortValue+0x64>
    296c:	2c 81       	ldd	r18, Y+4	; 0x04
    296e:	3d 81       	ldd	r19, Y+5	; 0x05
    2970:	22 30       	cpi	r18, 0x02	; 2
    2972:	31 05       	cpc	r19, r1
    2974:	2c f4       	brge	.+10     	; 0x2980 <DIO_enumSetPortValue+0x44>
    2976:	8c 81       	ldd	r24, Y+4	; 0x04
    2978:	9d 81       	ldd	r25, Y+5	; 0x05
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	61 f0       	breq	.+24     	; 0x2996 <DIO_enumSetPortValue+0x5a>
    297e:	1f c0       	rjmp	.+62     	; 0x29be <DIO_enumSetPortValue+0x82>
    2980:	2c 81       	ldd	r18, Y+4	; 0x04
    2982:	3d 81       	ldd	r19, Y+5	; 0x05
    2984:	22 30       	cpi	r18, 0x02	; 2
    2986:	31 05       	cpc	r19, r1
    2988:	81 f0       	breq	.+32     	; 0x29aa <DIO_enumSetPortValue+0x6e>
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	9d 81       	ldd	r25, Y+5	; 0x05
    298e:	83 30       	cpi	r24, 0x03	; 3
    2990:	91 05       	cpc	r25, r1
    2992:	81 f0       	breq	.+32     	; 0x29b4 <DIO_enumSetPortValue+0x78>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    2996:	eb e3       	ldi	r30, 0x3B	; 59
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	80 83       	st	Z, r24
    299e:	12 c0       	rjmp	.+36     	; 0x29c4 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    29a0:	e8 e3       	ldi	r30, 0x38	; 56
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	80 83       	st	Z, r24
    29a8:	0d c0       	rjmp	.+26     	; 0x29c4 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    29aa:	e5 e3       	ldi	r30, 0x35	; 53
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	80 83       	st	Z, r24
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    29b4:	e2 e3       	ldi	r30, 0x32	; 50
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	80 83       	st	Z, r24
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    29be:	19 82       	std	Y+1, r1	; 0x01
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <DIO_enumSetPortValue+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    29c2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <__prologue_saves__>:
    29d6:	2f 92       	push	r2
    29d8:	3f 92       	push	r3
    29da:	4f 92       	push	r4
    29dc:	5f 92       	push	r5
    29de:	6f 92       	push	r6
    29e0:	7f 92       	push	r7
    29e2:	8f 92       	push	r8
    29e4:	9f 92       	push	r9
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	ca 1b       	sub	r28, r26
    2a00:	db 0b       	sbc	r29, r27
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	09 94       	ijmp

00002a0e <__epilogue_restores__>:
    2a0e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a10:	39 88       	ldd	r3, Y+17	; 0x11
    2a12:	48 88       	ldd	r4, Y+16	; 0x10
    2a14:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a16:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a18:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a20:	b9 84       	ldd	r11, Y+9	; 0x09
    2a22:	c8 84       	ldd	r12, Y+8	; 0x08
    2a24:	df 80       	ldd	r13, Y+7	; 0x07
    2a26:	ee 80       	ldd	r14, Y+6	; 0x06
    2a28:	fd 80       	ldd	r15, Y+5	; 0x05
    2a2a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a2c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a2e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a30:	b9 81       	ldd	r27, Y+1	; 0x01
    2a32:	ce 0f       	add	r28, r30
    2a34:	d1 1d       	adc	r29, r1
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	ed 01       	movw	r28, r26
    2a42:	08 95       	ret

00002a44 <_exit>:
    2a44:	f8 94       	cli

00002a46 <__stop_program>:
    2a46:	ff cf       	rjmp	.-2      	; 0x2a46 <__stop_program>
